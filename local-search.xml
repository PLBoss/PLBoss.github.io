<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>注意</title>
    <link href="/2099/02/19/Readme/"/>
    <url>/2099/02/19/Readme/</url>
    
    <content type="html"><![CDATA[<p>创建文章一定要使用hexo new 否则将没有标题</p><p>图片的要上传到图传上，否则将无法读取</p>]]></content>
    
    
    
    <tags>
      
      <tag>read</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pagehelper实现分页</title>
    <link href="/2023/05/18/pagehelper%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/"/>
    <url>/2023/05/18/pagehelper%E5%AE%9E%E7%8E%B0%E5%88%86%E9%A1%B5/</url>
    
    <content type="html"><![CDATA[<h1 id="PageHelper是什么？"><a href="#PageHelper是什么？" class="headerlink" title="PageHelper是什么？"></a>PageHelper是什么？</h1><p>一种基于Mybatis实现的分页插件，更加快捷和方便。传统的分页需要自己构造也对象，包括求取总页数，页大小，数据总数，而且需要在查询的时候带上分页条件，这就增加了service层和dao层的耦合性，利用PageHelper,不需要加上分页条件，就直接查询所有数据即可，然后其他的都交给PageHelper进行管理，这也降低了代码的耦合性。</p><h1 id="如何使用PageHelper"><a href="#如何使用PageHelper" class="headerlink" title="如何使用PageHelper?"></a>如何使用PageHelper?</h1><p>这里环境使用的是Ideal搭建的SpringWeb项目</p><h4 id="导入所需要的包"><a href="#导入所需要的包" class="headerlink" title="导入所需要的包"></a>导入所需要的包</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.github.pagehelper<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>pagehelper-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>           <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.4.0<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>       <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><h4 id="配置PageHelper"><a href="#配置PageHelper" class="headerlink" title="配置PageHelper"></a>配置PageHelper</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment">#pageHelpr</span><br><span class="hljs-attr">pagehelper:</span><br>    <span class="hljs-attr">helperDialect:</span> <span class="hljs-string">mysql</span><br>    <span class="hljs-attr">reasonable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">supportMethodsArguments:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">params:</span> <span class="hljs-string">count=countSql</span><br><span class="hljs-comment">#出现循环调用报错时的设置</span><br><span class="hljs-string">spring.main.allow-circular-references:true</span><br></code></pre></td></tr></table></figure><h4 id="建立分页请求对象"><a href="#建立分页请求对象" class="headerlink" title="建立分页请求对象"></a>建立分页请求对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageRequest</span> </span>&#123;<br><br>    <span class="hljs-comment">//当前页码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageNum;<br>    <span class="hljs-comment">//页大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pageSize;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageNum</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pageNum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNum)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pageNum = pageNum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageSize</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> pageSize;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageSize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageSize)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.pageSize = pageSize;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="建立分页工具"><a href="#建立分页工具" class="headerlink" title="建立分页工具"></a>建立分页工具</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> PageUtil &#123;<br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    * 将插件中的分页信息设置到结果集中</span><br><span class="hljs-comment">    * */</span><br><br>    public static PageResult get<span class="hljs-constructor">PageResult(PageRequest <span class="hljs-params">pageRequest</span>, PageInfo&lt;?&gt; <span class="hljs-params">pageInfo</span>)</span> &#123;<br><br>        PageResult pageResult=<span class="hljs-keyword">new</span> <span class="hljs-constructor">PageResult()</span>;<br>        pageResult.set<span class="hljs-constructor">PageNum(<span class="hljs-params">pageInfo</span>.<span class="hljs-params">getPageNum</span>()</span>);<br>        pageResult.set<span class="hljs-constructor">Pagesize(<span class="hljs-params">pageInfo</span>.<span class="hljs-params">getPageSize</span>()</span>);<br>        pageResult.set<span class="hljs-constructor">TotalPage(<span class="hljs-params">pageInfo</span>.<span class="hljs-params">getPages</span>()</span>);<br>        pageResult.set<span class="hljs-constructor">TotalSize(<span class="hljs-params">pageInfo</span>.<span class="hljs-params">getTotal</span>()</span>);<br>        pageResult.set<span class="hljs-constructor">Content(<span class="hljs-params">pageInfo</span>.<span class="hljs-params">getList</span>()</span>);<br>        return  pageResult;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="建立分页结果封装对象"><a href="#建立分页结果封装对象" class="headerlink" title="建立分页结果封装对象"></a>建立分页结果封装对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PageResult</span></span>&#123;<br><br>    <span class="hljs-comment">//当前页码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> PageNum;<br><br><br>    <span class="hljs-comment">//页大小</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> Pagesize;<br><br>    <span class="hljs-comment">//总页数</span><br>    <span class="hljs-keyword">private</span>  <span class="hljs-keyword">int</span> totalPage;<br><br>    <span class="hljs-comment">//总记录数</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">long</span> totalSize;<br>    <span class="hljs-comment">//记录的数据</span><br>    <span class="hljs-keyword">private</span> List&lt;?&gt; content;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">long</span> <span class="hljs-title">getTotalSize</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalSize;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalSize</span><span class="hljs-params">(<span class="hljs-keyword">long</span> totalSize)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalSize = totalSize;<br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> List&lt;?&gt; getContent() &#123;<br>        <span class="hljs-keyword">return</span> content;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setContent</span><span class="hljs-params">(List&lt;?&gt; content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">PageResult</span><span class="hljs-params">()</span> </span>&#123;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageNum</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> PageNum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPageNum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageNum)</span> </span>&#123;<br>        PageNum = pageNum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPagesize</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> Pagesize;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setPagesize</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pagesize)</span> </span>&#123;<br>        Pagesize = pagesize;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getTotalPage</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> totalPage;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTotalPage</span><span class="hljs-params">(<span class="hljs-keyword">int</span> totalPage)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.totalPage = totalPage;<br>    &#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="服务层封装"><a href="#服务层封装" class="headerlink" title="服务层封装"></a>服务层封装</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-keyword">class</span> discussPostService &#123;<br><br>    @Autowired<br>    <span class="hljs-keyword">private</span> DiscussMapper discussMapper;<br><br>    public List&lt;DiscussPost&gt; select<span class="hljs-constructor">All()</span>&#123;<br><br>        return  discussMapper.select<span class="hljs-constructor">All()</span>;<br><br><br>    &#125;<br><br>   public PageResult select<span class="hljs-constructor">Page(PageRequest <span class="hljs-params">request</span>)</span>&#123;<br><br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageUtil</span>.</span></span>get<span class="hljs-constructor">PageResult(<span class="hljs-params">request</span>,<span class="hljs-params">getPageinfo</span>(<span class="hljs-params">request</span>)</span>);<br><br>   &#125;<br><br>   <span class="hljs-keyword">private</span> PageInfo&lt;DiscussPost&gt; get<span class="hljs-constructor">Pageinfo(PageRequest <span class="hljs-params">pageRequest</span>)</span>&#123;<br>       <span class="hljs-built_in">int</span> pageNum = pageRequest.get<span class="hljs-constructor">PageNum()</span>;<br>       <span class="hljs-built_in">int</span> pageSize = pageRequest.get<span class="hljs-constructor">PageSize()</span>;<br>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">PageHelper</span>.</span></span>start<span class="hljs-constructor">Page(<span class="hljs-params">pageNum</span>,<span class="hljs-params">pageSize</span>)</span>;<br>       <span class="hljs-comment">//查询数据，然后分装到pageINfo,selectPage就是正常查询所有的代码</span><br>       List&lt;DiscussPost&gt; discussPosts = discussMapper.select<span class="hljs-constructor">Page()</span>;<br>       return <span class="hljs-keyword">new</span> PageInfo&lt;DiscussPost&gt;(discussPosts);<br><br><br><br>   &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="控制层调用"><a href="#控制层调用" class="headerlink" title="控制层调用"></a>控制层调用</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">@<span class="hljs-constructor">RequestMapping(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;/index&quot;</span>)</span><br>   public String index(@<span class="hljs-constructor">RequestParam(<span class="hljs-params">value</span> = <span class="hljs-string">&quot;PageNum&quot;</span>,<span class="hljs-params">required</span> = <span class="hljs-params">false</span>,<span class="hljs-params">defaultValue</span> = <span class="hljs-string">&quot;1&quot;</span>)</span> Integer  PageNum, Model model)&#123;<br>       <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(PageNum);<br><br>       PageRequest pageRequest=<span class="hljs-keyword">new</span> <span class="hljs-constructor">PageRequest()</span>;<br>       pageRequest.set<span class="hljs-constructor">PageNum(PageNum)</span>;<br>       pageRequest.set<span class="hljs-constructor">PageSize(4)</span>;<br><br>       PageResult pageResult = discussPostService.select<span class="hljs-constructor">Page(<span class="hljs-params">pageRequest</span>)</span>;<br>       <br>       <br>  &#125;<br></code></pre></td></tr></table></figure><h4 id="查询的结果"><a href="#查询的结果" class="headerlink" title="查询的结果"></a>查询的结果</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20230518191537.png"></p><h1 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h1><p><a href="https://pagehelper.github.io/">MyBatis 分页插件 PageHelper</a></p><p><a href="https://www.cnblogs.com/xifengxiaoma/p/11027551.html">Spring Boot：实现MyBatis分页 - 朝雨忆轻尘 - 博客园 (cnblogs.com)</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>Mybatis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mysql</title>
    <link href="/2023/03/12/Mysql/"/>
    <url>/2023/03/12/Mysql/</url>
    
    <content type="html"><![CDATA[<h2 id="连接"><a href="#连接" class="headerlink" title="连接"></a>连接</h2><h3 id="连接本地mysql服务"><a href="#连接本地mysql服务" class="headerlink" title="连接本地mysql服务"></a>连接本地mysql服务</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">mysql -u用户名 -<span class="hljs-selector-tag">p</span>密码<br></code></pre></td></tr></table></figure><h3 id="连接远程mysql服务"><a href="#连接远程mysql服务" class="headerlink" title="连接远程mysql服务"></a>连接远程mysql服务</h3><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">mysql</span> -u用户名 -p密码 -h要连接的mysql服务器的ip地址(默认<span class="hljs-number">127.0.0.1</span>) -P端口号(默认<span class="hljs-number">3306</span>)<br></code></pre></td></tr></table></figure><h2 id="数据库模型"><a href="#数据库模型" class="headerlink" title="数据库模型"></a>数据库模型</h2><p>一个数据库其实就对应一个文件夹，然后表就对应文件，也就是说一个数据库可以存放多张表</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230106115753508.png" alt="image-20230106115753508"></p><h2 id="命令的分类"><a href="#命令的分类" class="headerlink" title="命令的分类"></a>命令的分类</h2><p>DDL:操作数据库和表的语句</p><p>DML</p><p>DQL</p><p>DCL</p><h3 id="命令与语法"><a href="#命令与语法" class="headerlink" title="命令与语法"></a>命令与语法</h3><p>sql不区分大小写</p><h3 id="DDL-操作数据库"><a href="#DDL-操作数据库" class="headerlink" title="DDL:操作数据库"></a>DDL:操作数据库</h3><h4 id="1-查询所有已经存在的数据库"><a href="#1-查询所有已经存在的数据库" class="headerlink" title="1.查询所有已经存在的数据库"></a>1.查询所有已经存在的数据库</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">show</span> databases<br></code></pre></td></tr></table></figure><h4 id="2-创建数据库名"><a href="#2-创建数据库名" class="headerlink" title="2.创建数据库名"></a>2.创建数据库名</h4><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">create</span> databases 数据库名<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">EXISTS</span> 数据库名称;<br></code></pre></td></tr></table></figure><h4 id="3-删除数据库"><a href="#3-删除数据库" class="headerlink" title="3.删除数据库"></a>3.删除数据库</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> 数据库名称;<br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">DATABASE</span> <span class="hljs-keyword">IF</span> <span class="hljs-keyword">EXISTS</span> 数据库名称;<br></code></pre></td></tr></table></figure><h4 id="4-使用数据库"><a href="#4-使用数据库" class="headerlink" title="4.使用数据库"></a>4.使用数据库</h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">use</span> 数据库名称<br></code></pre></td></tr></table></figure><h3 id="常用数据类型"><a href="#常用数据类型" class="headerlink" title="常用数据类型"></a>常用数据类型</h3><p>数值：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">tinyint</span> :<span class="hljs-string">小整型数，占一个字节</span><br><span class="hljs-attr">int</span> :<span class="hljs-string">大整数型，占四字节</span><br><span class="hljs-attr">doule</span>:<span class="hljs-string">浮点整型，占八字节 使用格式： 字段名 double(总长度,小数点后保留的位数)</span><br></code></pre></td></tr></table></figure><p>日期：</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-type">date</span> ：日期值，只包含年月日<br><span class="hljs-symbol">datetime:</span> 混合日期和时间值，包含年月日时分秒<br></code></pre></td></tr></table></figure><p>字符串：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">char</span> :定长字符串<br>优点：存储性能高<br>缺点：浪费空间<br>eg ： <span class="hljs-type">name</span> <span class="hljs-type">char</span>(<span class="hljs-number">10</span>) 如果存储的数据字符个数不足<span class="hljs-number">10</span>个，也会占<span class="hljs-number">10</span>个的空间<br>vachar:变长字符串<br>优点：节约空间<br>缺点：存储性能低<br>eg:<span class="hljs-type">name</span> <span class="hljs-type">varchar</span>(<span class="hljs-number">10</span>) 如果存储的数据字符个数不足<span class="hljs-number">10</span>个，那就数据字符个数是几就占几个的空间<br></code></pre></td></tr></table></figure><h3 id="DDL-操作表"><a href="#DDL-操作表" class="headerlink" title="DDL:操作表"></a>DDL:操作表</h3><h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名 (<br>字段名<span class="hljs-number">1</span> 数据类型<span class="hljs-number">1</span>,<br>字段名<span class="hljs-number">2</span> 数据类型<span class="hljs-number">2</span>,<br>…<br>字段名n 数据类型n<br>);<br></code></pre></td></tr></table></figure><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>查看所有表</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">show</span> <span class="hljs-keyword">tables</span><br></code></pre></td></tr></table></figure><p>查看数据表结构</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">desc</span> 表名称<br></code></pre></td></tr></table></figure><h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>修改表名</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">rename</span> <span class="hljs-keyword">to</span> 新的表名<br></code></pre></td></tr></table></figure><p>修改数据类型</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">alter</span> <span class="hljs-meta">table</span> 表名 <span class="hljs-meta">modify</span>  列名 新数据类型<br></code></pre></td></tr></table></figure><p>添加一列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">add</span> 列名 数据类型<br></code></pre></td></tr></table></figure><p>删除一列</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> 列名<br></code></pre></td></tr></table></figure><p>修改列明和数据类型</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 change 列名 新列名 新数据类型<br></code></pre></td></tr></table></figure><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> 表名<br><span class="hljs-keyword">drop</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">if</span> <span class="hljs-keyword">exists</span> 表名<br></code></pre></td></tr></table></figure><h3 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h3><p>DML主要是对数据的增删改操作</p><h4 id="添加数据"><a href="#添加数据" class="headerlink" title="添加数据"></a>添加数据</h4><p>给指定列添加数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">inset</span> into 表名（列名<span class="hljs-number">1</span>，列名<span class="hljs-number">2</span>，） values(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><p>给全部列添加数据</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> 表名 <span class="hljs-keyword">values</span>(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><p>批量添加数据</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">INSERT</span> INTO 表名 VALUES ( 值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span> ),(值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span> ),( 值<span class="hljs-number">1</span>，值<span class="hljs-number">2</span> );<br></code></pre></td></tr></table></figure><h4 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">update</span> 表名 <span class="hljs-keyword">set</span> 列名=值，列名=值 <span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><p>注意：如果不写条件，则数据都会被修改</p><h4 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h4><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">delete</span> <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><p>注意：如果不写条件，则数据都会被删除</p><h3 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h3><p>对数据表中得数据进行查询</p><p>完整语法</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span><br>字段列表<br><span class="hljs-keyword">FROM</span><br>表名列表<br><span class="hljs-keyword">WHERE</span><br>条件列表<br><span class="hljs-keyword">GROUP</span> <span class="hljs-keyword">BY</span><br>分组字段<br><span class="hljs-keyword">HAVING</span><br>分组后条件<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span><br>排序字段<br><span class="hljs-keyword">LIMIT</span><br>分页限定<br></code></pre></td></tr></table></figure><h4 id="基础查询"><a href="#基础查询" class="headerlink" title="基础查询"></a>基础查询</h4><ul><li>查询多个字段</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名;<br>eg: <span class="hljs-keyword">select</span> <span class="hljs-type">name</span>,id,sex <span class="hljs-keyword">from</span> tabels;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> 表名; <span class="hljs-comment">-- 查询所有字段</span><br></code></pre></td></tr></table></figure><p>注意：开发中不建议写*,因为不方便阅读有哪些字段</p><ul><li>取出重复记录</li></ul><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> <span class="hljs-keyword">distinct</span> 字段列表 <span class="hljs-keyword">from</span> 表名<br></code></pre></td></tr></table></figure><ul><li>起别名</li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">as</span> 也可省略<br>eg:<span class="hljs-keyword">select</span> <span class="hljs-type">name</span> <span class="hljs-keyword">as</span> mingzhi <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span>;<br>eg:<span class="hljs-keyword">select</span> <span class="hljs-type">name</span> mingzhi <span class="hljs-keyword">from</span> <span class="hljs-keyword">tables</span>;<br></code></pre></td></tr></table></figure><h4 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h4><p>语法格式</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表明 <span class="hljs-keyword">where</span> 条件列表<br></code></pre></td></tr></table></figure><p>条件运算符</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230108150322720.png" alt="image-20230108150322720"></p><h4 id="条件查询联系"><a href="#条件查询联系" class="headerlink" title="条件查询联系"></a>条件查询联系</h4><p>查询年龄大于等于20岁 并且 年龄 小于等于 30岁 的学员信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">selsect * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age&gt;=<span class="hljs-number">20</span> &amp;&amp; age&lt;=<span class="hljs-number">30</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age&gt;=<span class="hljs-number">20</span> <span class="hljs-keyword">and</span> age&lt;=<span class="hljs-number">30</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">30</span>;<br></code></pre></td></tr></table></figure><p>查询年龄不等于18岁的学员信息</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age!=<span class="hljs-number">18</span>;<br><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> age&lt;&gt;<span class="hljs-number">18</span>;<br></code></pre></td></tr></table></figure><p>查询年龄等于18岁 或者 年龄等于20岁 或者 年龄等于22岁的学员信息</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">select * <span class="hljs-keyword">from</span> stu where <span class="hljs-attribute">age</span>=18 <span class="hljs-keyword">or</span> <span class="hljs-attribute">age</span>=20 <span class="hljs-keyword">or</span> <span class="hljs-attribute">age</span>=22;<br>select * <span class="hljs-keyword">from</span> stu where age <span class="hljs-keyword">in</span>(18,20,22);<br></code></pre></td></tr></table></figure><p>查询英语成绩为 null的学员信息</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> enlish=<span class="hljs-literal">null</span>;<br></code></pre></td></tr></table></figure><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta">模糊查询使用<span class="hljs-keyword">like</span>关键字,可以使用通配符进行占位置<br>（<span class="hljs-number">1</span>）_:代表单个任意字符；<br>（<span class="hljs-number">2</span>）%：代表任意多个字符<br></code></pre></td></tr></table></figure><ul><li><p>查询姓马的学员信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;马%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查询第二个字是花的学员信息</p></li></ul><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;_马%&#x27;</span>;<br></code></pre></td></tr></table></figure><p>查询名字包含德的学员信息</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> <span class="hljs-type">name</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%德%&#x27;</span>;<br></code></pre></td></tr></table></figure><h4 id="排序查询"><a href="#排序查询" class="headerlink" title="排序查询"></a>排序查询</h4><p>语法结构</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表名 <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> 排序字段<span class="hljs-number">1</span> 排序方式,排序字段<span class="hljs-number">2</span> 排序方式;<br></code></pre></td></tr></table></figure><p>排序方式：</p><p>ASC:升序排列 （默认选项）</p><p>DESC:降序排列</p><p>注意：如果多个排序条件，只有前面的值相同时，后面的排序条件才会生效</p><p>eg</p><p>查询学生信息，按照数学成绩降序排列，如果数学成绩一样，再按照英语成绩升序排列</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> math <span class="hljs-keyword">desc</span>,english <span class="hljs-keyword">asc</span>;<br></code></pre></td></tr></table></figure><h4 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h4><p>将一列数据作为一个整体，进行纵向计算</p><p>常用聚合函数</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230108161121231.png" alt="image-20230108161121231"></p><p>聚合函数查询语法</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 聚合函数(列名) <span class="hljs-keyword">from</span> 表<br></code></pre></td></tr></table></figure><p>注意：null值不参与所有聚合函数运算</p><p>eg:</p><p>统计班级一共有多少数学生</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(id) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure><p>上面语句是根据某个字段进行统计，如果字段某一行为null的话,将不会 被统计，所以可以在count（**)来实现，<em>表示所有字段数据，一行中也不可能所有的数据都为null，count(</em>)只要一行中一个数据不为空，就会进行统计</p><p>查询数学成绩的平均分</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">avg</span>(math) <span class="hljs-keyword">from</span> stu;<br></code></pre></td></tr></table></figure><h4 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h4><p>语法结构</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> [ <span class="hljs-keyword">where</span> 分组前的限定条件] <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> 分组后字段名 [<span class="hljs-keyword">having</span> 分组后的条件过滤]<br></code></pre></td></tr></table></figure><p>注意：分组之后，查询的字段仅为聚合函数和分组字段 ，查询其他字段将毫无意义。</p><p>eg:</p><p>查询男同学和女同学各自的数学平均分</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> sex,<span class="hljs-keyword">avg</span>(math) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sex;<br></code></pre></td></tr></table></figure><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> sex,<span class="hljs-built_in">avg</span>(math),<span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">where</span> math<span class="hljs-operator">&gt;</span><span class="hljs-number">70</span> <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> sex<br></code></pre></td></tr></table></figure><p>查询男同学和女同学各自的数学平均分，以及各自人数，要求：分数低于70分的不参与分组，分组之后人数大于2个的</p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">select</span> sex,avg(math),count<span class="hljs-comment">(*) from stu where math&gt;70 group by sex having count(*)</span>&gt;<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p>where 和having的区别</p><p>执行的时间不一样：where是分组之前进行限定，不满足where条件，则不参与分组，而having是分组之后对结果进行过滤</p><p>可判断的条件按不一样：where不能对聚合函数进行判断,having可以.</p><p>执行顺序：where ==&gt;聚合函数 ==》 having</p><h4 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h4><p>限定一页的显示条数</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">form</span> 表名 limit 起始索引，查询条目;<br></code></pre></td></tr></table></figure><p>注意：上述语句的其实索引都是从0开始的</p><p>不写起始索引将默认从零开始</p><h5 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h5><p>从0 开始，查询3条数据</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>每页显示3条数据，查询第一页</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>每页显示3条数据，查询第二页</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> <span class="hljs-number">3</span>,<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>每页显示3条数据，查询第三页</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> stu <span class="hljs-keyword">limit</span> <span class="hljs-number">6</span>,<span class="hljs-number">3</span>;<br></code></pre></td></tr></table></figure><p>起始索引的计算公式</p><figure class="highlight fix"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fix"><span class="hljs-attr">起始索引</span>=<span class="hljs-string">（当前页码-1）*每页显示的条数</span><br></code></pre></td></tr></table></figure><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><p>用于限制加入表中的数据，约束的存在保证了数据库数据的正确电性，有效性，完整型</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p><strong>非空约束</strong>：关键字是NOT NULL</p><p>保证列中的数据都不能有null值。</p><p>当数据为空就不能添加成功</p><p><strong>唯一约束</strong>:关键字是unique</p><p>保证列中所有数据都各不相同</p><p>当存在相同数据时禁止添加</p><p><strong>主键约束</strong>：关键字是primary key</p><p>主键是一行数据的唯一标识，要求非空且唯一，一般我们都会给每张表都添加一个主键来唯一标识数据</p><p><strong>检查约束</strong>：关键字是check</p><p>保证列中的值满足某一条件</p><p><strong>默认约束</strong>：关键字是default</p><p>保持数据时，未指定数据 就采用默认值</p><p><strong>外键约束</strong>：关键字是foreign key</p><h3 id="非空约束"><a href="#非空约束" class="headerlink" title="非空约束"></a>非空约束</h3><p>非空约束用与保证数据不能有null</p><p>语法:</p><p>创建表的时候添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>列名 数据类型 <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span><br>);<br></code></pre></td></tr></table></figure><p>创建表后添加约束</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">alter</span> <span class="hljs-meta">table</span> 表名 <span class="hljs-meta">modify</span> 字段名 数据类型<br></code></pre></td></tr></table></figure><p>修改约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> <span class="hljs-operator">&lt;</span>数据表名<span class="hljs-operator">&gt;</span> CHANGE <span class="hljs-keyword">COLUMN</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>字段名<span class="hljs-operator">&gt;</span> <span class="hljs-operator">&lt;</span>数据类型<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">NULL</span>;<br></code></pre></td></tr></table></figure><h3 id="唯一约束"><a href="#唯一约束" class="headerlink" title="唯一约束"></a>唯一约束</h3><p>用于保证数据列中所有数各不相同</p><p>语法</p><p>创建表的时候添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>列名 数据类型 <span class="hljs-keyword">unique</span> ;<br><br>);<br></code></pre></td></tr></table></figure><p>创建表后添加约束</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">alter</span> <span class="hljs-meta">table</span> 表名 <span class="hljs-meta">modify</span> 字段名 数据类型 <span class="hljs-meta">unique</span>;<br></code></pre></td></tr></table></figure><p>删除约束</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">index</span> 字段名<br></code></pre></td></tr></table></figure><h3 id="主键约束"><a href="#主键约束" class="headerlink" title="主键约束"></a>主键约束</h3><p>主键是一行数据的唯一标识，且非空</p><p>一张表只能有一个主键</p><p>创建表的时候添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>列名 数据类型 <span class="hljs-keyword">primary</span> key<br><br>);<br></code></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>列名 数据类型,<br>列名 数据类型 ,<br><span class="hljs-keyword">constraint</span> 约束名称 <span class="hljs-keyword">primary</span> key(列名)<br><br>);<br></code></pre></td></tr></table></figure><p>建完表后添加主键</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">alter</span> atble 表名 <span class="hljs-meta">add</span> <span class="hljs-meta">primary</span> <span class="hljs-meta">key</span>(字段名);<br></code></pre></td></tr></table></figure><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">primary</span> key;<br></code></pre></td></tr></table></figure><h3 id="默认约束"><a href="#默认约束" class="headerlink" title="默认约束"></a>默认约束</h3><p>保存数据时，设置默认值</p><p>语法</p><p>创建表的时候添加约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>列名 数据类型 <span class="hljs-keyword">default</span> 默认值，<br>)<br></code></pre></td></tr></table></figure><p>建完表后添加默认约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名  <span class="hljs-keyword">alter</span> 列名 <span class="hljs-keyword">set</span> <span class="hljs-keyword">default</span> 默认值；<br></code></pre></td></tr></table></figure><p>删除约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> 表名 <span class="hljs-keyword">alter</span> 列名 <span class="hljs-keyword">drop</span> <span class="hljs-keyword">default</span>;<br></code></pre></td></tr></table></figure><h3 id="自动增长"><a href="#自动增长" class="headerlink" title="自动增长"></a>自动增长</h3><p>当列是数字类型且唯一约束才可添加</p><p>auto-increment 当不指定值时，自动增长</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br>列名 数据类型 <span class="hljs-keyword">unique</span> autoincrement,<br>);<br></code></pre></td></tr></table></figure><h3 id="外键约束"><a href="#外键约束" class="headerlink" title="外键约束"></a>外键约束</h3><p>外键是用来让两个表之前建立连接，保证数据的一致性和完整性</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230109152804527.png" alt="image-20230109152804527"></p><p>语法</p><p>建表时添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> 表名(<br> 列名 数据类型，<br> <br> <span class="hljs-keyword">constraint</span> 【外键名称】 <span class="hljs-keyword">foreign</span> key(外键列表名) <span class="hljs-keyword">references</span> 主表(主列表名)<br><br>);<br></code></pre></td></tr></table></figure><p>建表后添加</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 建完表后添加外键约束</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">ADD</span> <span class="hljs-keyword">CONSTRAINT</span> 外键名称 <span class="hljs-keyword">FOREIGN</span> KEY (外键字段名称) <span class="hljs-keyword">REFERENCES</span> 主表名称(主表列名称);<br></code></pre></td></tr></table></figure><p>删除外键约束</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">TABLE</span> 表名 <span class="hljs-keyword">DROP</span> <span class="hljs-keyword">FOREIGN</span> KEY 外键名称;<br><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230109170816010.png" alt="image-20230109170816010"></p><p>bug</p><p>添加外键不生效</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230109170547355.png" alt="image-20230109170547355"></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">解决办法：重新设置表的引擎为innodb<br></code></pre></td></tr></table></figure><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230109171039420.png" alt="image-20230109171039420"></p><h3 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230109201000618.png" alt="image-20230109201000618"></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 作业</span><br><br><span class="hljs-comment">-- 音乐专辑表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> music(<br>title <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) ,<br>alias <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">32</span>) ,<br>image <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">64</span>),<br>style <span class="hljs-type">varchar</span>(<span class="hljs-number">8</span>),<br>type <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>),<br>medium <span class="hljs-type">varchar</span>(<span class="hljs-number">4</span>),<br>publish_time <span class="hljs-type">date</span>,<br>publisher <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<br>number tinyint ,<br>barcode <span class="hljs-type">bigint</span> ,<br>summary <span class="hljs-type">varchar</span>(<span class="hljs-number">1024</span>),<br>aritist <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> key<br><br>);<br><span class="hljs-comment">-- 曲目表名</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> song(<br>name <span class="hljs-type">varchar</span>(<span class="hljs-number">32</span>),<br>serial_number tinyint,<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> KEY,<br>music_id <span class="hljs-type">int</span> <br><br>);<br><span class="hljs-comment">-- 评论表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> review(<br>content <span class="hljs-type">varchar</span>(<span class="hljs-number">256</span>),<br>rating tinyint ,<br>review_time datetime,<br>id <span class="hljs-type">int</span>,<br>music_id <span class="hljs-type">int</span><br><br><br>);<br><span class="hljs-comment">-- 用户表</span><br><span class="hljs-keyword">create</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">user</span>(<br>username <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">16</span>) <span class="hljs-keyword">UNIQUE</span>,<br>image <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>),<br>signature <span class="hljs-type">varchar</span>(<span class="hljs-number">64</span>),<br>nikename <span class="hljs-type">varchar</span>(<span class="hljs-number">16</span>),<br>id <span class="hljs-type">int</span> <span class="hljs-keyword">PRIMARY</span> KEY<br><br><br>);<br><br><span class="hljs-comment">-- 建立用户与专辑的多对多映射</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">table</span> info(<br><br>user_id <span class="hljs-type">int</span>,<br>music_id <span class="hljs-type">int</span>,<br><span class="hljs-keyword">constraint</span> fk_user_id <span class="hljs-keyword">foreign</span> key(user_id) <span class="hljs-keyword">references</span> <span class="hljs-keyword">user</span>(id),<br><span class="hljs-keyword">constraint</span> fk_music_id <span class="hljs-keyword">foreign</span> key(music_id) <span class="hljs-keyword">references</span> music(id)<br><br>);<br><br><span class="hljs-comment">-- 为曲目设置外键</span><br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> song <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> song_id <span class="hljs-keyword">foreign</span> key (music_id) <span class="hljs-keyword">REFERENCES</span> music(id);<br><br><span class="hljs-comment">-- 为评论设置外键</span><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> review  <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> review_usr_id <span class="hljs-keyword">foreign</span> key (id) <span class="hljs-keyword">REFERENCES</span> <span class="hljs-keyword">user</span>(id);<br><br><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> review  <span class="hljs-keyword">add</span> <span class="hljs-keyword">constraint</span> review_music_id <span class="hljs-keyword">foreign</span> key (music_id) <span class="hljs-keyword">REFERENCES</span> music(id);<br><br><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230109200858631.png" alt="image-20230109200858631"></p><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230110171108832.png" alt="image-20230110171108832"></p><h4 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h4><p>相当于查询表A与表B的交集</p><p>语法结构：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp">隐士内内连接<br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span>，表<span class="hljs-number">2</span> <span class="hljs-keyword">where</span> 条件<br>显示内连接<br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">on</span> 条件<br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表<span class="hljs-number">1</span> <span class="hljs-keyword">join</span> 表<span class="hljs-number">2</span> <span class="hljs-keyword">using</span> (条件<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>案列</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs applescript">select * <span class="hljs-keyword">from</span> emp dept <span class="hljs-keyword">where</span> emp.<span class="hljs-built_in">id</span>=dept.<span class="hljs-built_in">id</span>;<br>select t1.<span class="hljs-built_in">name</span> t1.gender <span class="hljs-keyword">from</span> emp t1,dept t2 <span class="hljs-keyword">where</span> t1.<span class="hljs-built_in">id</span>=t2.<span class="hljs-built_in">id</span><br></code></pre></td></tr></table></figure><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span> dept <span class="hljs-keyword">on</span> emp.id=ept.id<br></code></pre></td></tr></table></figure><h4 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h4><p>左外连接：相当于查询表A的所有数据，和交集部分数据，比较常用</p><p>右外连接：相当于查询表B的所有数据，和交集部分数据</p><p>语法</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">左外连接<br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表A <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span> 表B <span class="hljs-keyword">on</span> 条件<br><br>右外连接<br><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> 表A <span class="hljs-keyword">right</span> <span class="hljs-keyword">join</span> 表B <span class="hljs-keyword">on</span> 条件<br></code></pre></td></tr></table></figure><h4 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h4><p>查询中嵌套查询，称嵌套查询为子查询</p><p>子查询根据查询结果的不同，作用不同</p><p>单列查询：子查询语句作为条件值，使用=！=&lt;&gt;等进行判断</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> <span class="hljs-keyword">where</span> 字段名=(子查询);<br></code></pre></td></tr></table></figure><p>多行单列：子查询语句作为条件值，使用in等关键字进行条件判断</p><figure class="highlight sas"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sas"><span class="hljs-meta">select</span> 字段列表 <span class="hljs-meta">from</span> 表 <span class="hljs-meta">where</span> 字段名 <span class="hljs-meta">in(</span>子查询);<br></code></pre></td></tr></table></figure><p>多行多列：子查询语句作为序列表，就是将查询结果重新命名为一个表，然后在进行查询操作</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> 字段列表 <span class="hljs-keyword">from</span> (子查询) <span class="hljs-keyword">where</span> 条件<br></code></pre></td></tr></table></figure><p>eg:</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> dept.id dept.name dept.loc t1.<span class="hljs-keyword">count</span> <span class="hljs-keyword">from</span> dept (<span class="hljs-keyword">select</span> dept_id <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">count</span> <span class="hljs-keyword">from</span> emp <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> dept_id)t1 <span class="hljs-keyword">where</span> dept.id=t1.dept_id;<br></code></pre></td></tr></table></figure><h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><p>数据库的事务是一种机制，一个操作序列，包含了一组数据库炒作命令</p><p>事务把所有命令作为一个整体一起向系统提交或撤销操作请求，即这一组数据库命令要么同时成功，要么同时失败</p><p>事务是一个不可分割的工作逻辑单元</p><h4 id="开启事务"><a href="#开启事务" class="headerlink" title="开启事务"></a>开启事务</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">start</span> <span class="hljs-keyword">transaction</span><br>或者<br><span class="hljs-keyword">begin</span><br></code></pre></td></tr></table></figure><h4 id="提交事务"><a href="#提交事务" class="headerlink" title="提交事务"></a>提交事务</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">commit</span><br></code></pre></td></tr></table></figure><h4 id="回滚事务"><a href="#回滚事务" class="headerlink" title="回滚事务"></a>回滚事务</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rollback</span><br></code></pre></td></tr></table></figure><p>只要进行事务控制，只要没有提交，修改都可以进行回滚，且没有提交的事务，其他事务也查询不到修改</p><h4 id="四大特征"><a href="#四大特征" class="headerlink" title="四大特征"></a>四大特征</h4><ul><li>原子性：事务是不可分割的最小操作单元，要莫同时成功，要莫同时失败。</li><li>一致性：事务完成时，必须使所有数据都保持一致</li><li>隔离性：多个事务之间，操作的可见性</li><li>持久性：事务一旦提交或回滚，它对数据库中的数据改变就是永久的</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">mysql中事务是自动提交的，也就是说我们不条件事务执行的相光关语句时，语句执行完毕后就会自动提交事务<br><br><br></code></pre></td></tr></table></figure><p>查看mysql的默认提交方式</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">slect @@<span class="hljs-built_in">auto</span>commit<br></code></pre></td></tr></table></figure><p>如果查询到的结果时1，表示自动提交，结果是0表示手动提交，当然也可以通过下面的语句修改提交方式</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> @@<span class="hljs-attribute">autocommit</span>=0;<br></code></pre></td></tr></table></figure><h2 id="底层数据结构"><a href="#底层数据结构" class="headerlink" title="底层数据结构"></a>底层数据结构</h2><p>sql语句执过程中都发生了什么？</p><p>用户端发送请求，然后给连接器验证用户身份，给与权限，然后先查询缓存，缓存中存在就直接返回，不存在就执行后续的操作，然后交给分析器，进行sql语句的词法分析和语法分析，分析结束后，交给优化器去选择最优化的执行方案，最后再交给执行器去执行，执行器交给存储引擎获取数据然后返回。</p><p><img src="Mysql.assets/20230312231852.png"></p><p>Mysql的存储引擎？</p><h2 id="sql练习"><a href="#sql练习" class="headerlink" title="sql练习"></a>sql练习</h2><p><a href="https://www.nowcoder.com/practice/82ebd89f12cf48efba0fecb392e193dd?tpId=199&tqId=1971219&ru=/exam/intelligent&qru=/ta/sql-quick-study/question-ranking&sourceUrl=/exam/intelligent">查询结果去重</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">select</span>  <span class="hljs-title">distinct</span>(<span class="hljs-params">university</span>) <span class="hljs-keyword">from</span> user_profile</span>;<br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/c7ad0e2df4f647dfa5278e99894a7561?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/intelligent">查询结果限制返回行数_</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/0d8f49aeaf7a4e1cb7fecec980712113?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/intelligent">将查询后的列重新命名</a></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> device_id user_infos_example <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span>,<span class="hljs-number">2</span>;<br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/be54223075cc43ceb20e4ce8a8e3e340?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/intelligent">查找某个年龄段的用户信息</a></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span> device_id,gender,age <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> age <span class="hljs-keyword">between</span> <span class="hljs-number">20</span> <span class="hljs-keyword">and</span> <span class="hljs-number">23</span>;<br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/c12a056497404d1ea782308a7b821f9c?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/intelligent">查找除复旦大学的用户信息</a></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs n1ql">#1 <span class="hljs-keyword">select</span> device_id,gender,age,university <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> university!=<span class="hljs-string">&quot;复旦大学&quot;</span>;<br>#2 <span class="hljs-keyword">select</span> device_id,gender,age,university <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> university <span class="hljs-keyword">not</span> <span class="hljs-keyword">like</span> <span class="hljs-string">&quot;复旦大学&quot;</span>;<br>#2 <span class="hljs-keyword">select</span> device_id,gender,age,university <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> university <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> (<span class="hljs-string">&quot;复旦大学&quot;</span>);<br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/08c9846a423540319eea4be44e339e35?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/intelligent">用where过滤空值练习</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">#<span class="hljs-number">1</span> <span class="hljs-keyword">select</span> device_id,gender,age,university <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> age<span class="hljs-operator">!=</span>&quot;&quot;;<br>#<span class="hljs-number">2</span><span class="hljs-keyword">select</span> device_id,gender,age,university <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> age  <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">null</span>;<br><br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/d5ac4c878b63477fa5e5dfcb427d9102?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">操作符混合运用</a></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">select</span><br>    <span class="hljs-attribute">device_id</span>,<br>    <span class="hljs-attribute">gender</span>,<br>    <span class="hljs-attribute">age</span>,<br>    <span class="hljs-attribute">university</span>,<br>    <span class="hljs-attribute">gpa</span><br><span class="hljs-attribute">from</span><br>    <span class="hljs-attribute">user_profile</span><br><span class="hljs-attribute">where</span><br>    <span class="hljs-attribute">gpa</span> &gt; <span class="hljs-number">3</span>.<span class="hljs-number">5</span><br>    <span class="hljs-attribute">and</span> university = <span class="hljs-string">&quot;山东大学&quot;</span><br>    <span class="hljs-attribute">or</span> gpa &gt; <span class="hljs-number">3</span>.<span class="hljs-number">8</span><br>    <span class="hljs-attribute">and</span> university = <span class="hljs-string">&quot;复旦大学&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/95d9922b1e2a49de80daa491889969ee?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">查看学校名称中含北京的用户_牛客题霸_牛客网 (nowcoder.com)</a></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">select</span> device_id,age,university <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> university <span class="hljs-keyword">like</span> <span class="hljs-string">&#x27;%北京%&#x27;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/4e22fc5dbd16414fb2c7683557a84a4f?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">查找GPA最高值_牛客题霸_牛客网 (nowcoder.com)</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">max</span>(gpa) <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> university<span class="hljs-operator">=</span>&quot;复旦大学&quot;<br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/7d9a7b2d6b4241dbb5e5066d7549ca01?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">计算男生人数以及平均GPA_牛客题霸_牛客网 (nowcoder.com)</a></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> <span class="hljs-built_in">count</span>(<span class="hljs-operator">*</span>) male_num,round(<span class="hljs-built_in">avg</span>(gpa),<span class="hljs-number">1</span>) avg_gpa <span class="hljs-keyword">from</span> user_profile <span class="hljs-keyword">where</span> gender<span class="hljs-operator">=</span><span class="hljs-string">&#x27;male&#x27;</span>;<br># round 保留小数点<br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/009d8067d2df47fea429afe2e7b9de45?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/company">分组计算练习题_牛客题霸_牛客网 (nowcoder.com)</a></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span><br>    gender,<br>    university,<br>    <span class="hljs-built_in">count</span>(*) <span class="hljs-keyword">as</span> user_num,<br>    <span class="hljs-built_in">round</span>(<span class="hljs-built_in">avg</span>(active_days_within_30),<span class="hljs-number">1</span>) avg_active_day,<br>    <span class="hljs-built_in">round</span>(<span class="hljs-built_in">avg</span>(question_cnt),<span class="hljs-number">1</span>) avg_question_cnt<br>    <span class="hljs-keyword">from</span> user_profile<br>    <span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span> gender,university<br><br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/ddbcedcd9600403296038ee44a172f2d?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/intelligent">分组过滤练习题_牛客题霸_牛客网 (nowcoder.com)</a></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span><br>    university,<br>    <span class="hljs-built_in">round</span>(<span class="hljs-built_in">avg</span>(question_cnt),<span class="hljs-number">3</span>) avg_question_cnt,<br>    <span class="hljs-built_in">round</span>(<span class="hljs-built_in">avg</span>(answer_cnt),<span class="hljs-number">3</span>) avg_answer_cnt<br><span class="hljs-keyword">from</span><br>    user_profile<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>    university<br><span class="hljs-keyword">having</span> <br>     avg_question_cnt&lt;<span class="hljs-number">5</span> <span class="hljs-keyword">or</span><br>     avg_answer_cnt&lt;<span class="hljs-number">20</span><br><br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/e00bbac732cb4b6bbc62a52b930cb15e?tpId=199&tqId=1975672&ru=/exam/intelligent&qru=/ta/sql-quick-study/question-ranking&sourceUrl=/exam/intelligent">分组排序练习题_牛客题霸_牛客网 (nowcoder.com)</a></p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">select</span><br>    university,<br>    <span class="hljs-built_in">round</span>(<span class="hljs-built_in">avg</span>(question_cnt),<span class="hljs-number">4</span>) avg_question_cnt<br><span class="hljs-keyword">from</span><br>    user_profile<br><span class="hljs-keyword">group</span> <span class="hljs-keyword">by</span><br>    university<br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>    avg_question_cnt<br><br></code></pre></td></tr></table></figure><p><a href="https://www.nowcoder.com/practice/55f3d94c3f4d47b69833b335867c06c1?tpId=199&tags=&title=&difficulty=0&judgeStatus=0&rp=0&sourceUrl=/exam/intelligent">浙江大学用户题目回答情况_牛客题霸_牛客网 (nowcoder.com)</a></p><figure class="highlight oxygene"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs oxygene"><span class="hljs-keyword">select</span><br>    u.device_id,<br>    question_id,<br>    <span class="hljs-keyword">result</span><br><span class="hljs-keyword">from</span><br>    question_practice_detail q,<br>    user_profile u<br><span class="hljs-keyword">where</span><br>    q.device_id = u.device_id<br>    <span class="hljs-keyword">and</span> university = <span class="hljs-string">&#x27;浙江大学&#x27;</span><br><br><span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span> question_id<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Mysql</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习之道</title>
    <link href="/2023/03/02/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93/"/>
    <url>/2023/03/02/%E5%AD%A6%E4%B9%A0%E4%B9%8B%E9%81%93/</url>
    
    <content type="html"><![CDATA[<h1 id="学习之道"><a href="#学习之道" class="headerlink" title="学习之道"></a>学习之道</h1><p>用三段话说明本书的内容?</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gcode">经过长期的训练，在解决问题时，容易利用用先前的思维模式进行解决问题，缺乏思考与创新。<br>接触新领域的知识时，先要快速了解广泛的基础知识，进而解决问题时才能更容易进入专注模式。<br>过度专注不利于解决问题，<br>要在适当的专注模式下，进入发散模式<span class="hljs-comment">(散步，睡觉，听纯音乐，洗澡，弹奏乐器)</span>。<br>解决问题时，要提取关键点，针对难点进行刻意练习，构建组块，主动利用回想强化记忆组块。<br>思维定势,专注模式，发散模式，<br>提取练习，刻意练习，组块，回想,记忆方法<br>间隔重复，学习日志，知识迁移<br>当天学习的知识在<span class="hljs-number">24</span>消失内重复记忆，将会有意想不到的效果<br>记录学习日志和建立良好习惯，对付拖延症<br></code></pre></td></tr></table></figure><p>这本书为我带来了什么改变?</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">学习方法改变了，更注重学习效率<br></code></pre></td></tr></table></figure><p>三个我最喜欢的句子?</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">1.一个常见的能力错觉，就是仅仅因为成功解题会带来良好的自我感觉，你就会不断去练习一个已经会用的技巧<br>2.光盯着书上的学习材料，学让你错认为自己已经学习<br>3.最擅长思考的人学习的窍门就是简化——转换成让小孩子都能听懂的语言<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>算法小抄</title>
    <link href="/2023/02/28/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84/"/>
    <url>/2023/02/28/%E7%AE%97%E6%B3%95%E5%B0%8F%E6%8A%84/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>链式存储：含有左右指针，将指散落在各个地址的指针通过节点串联起来</p><p>顺序存储：有序的存放在数组中</p><h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>先取出整体问题的一小份，然后把剩余的问题交给其他人处理，注意边界</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p><a href="https://leetcode.cn/problems/binary-search/submissions/">704. 二分查找 </a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs excel">public <span class="hljs-built_in">int</span> <span class="hljs-built_in">search</span>(<span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target) &#123;<br>      /* <br>      一个排序数组，定义两个指针，一个指向数组的头部，一个指向数组的尾部，还有一个中间指针指向左右指针的中间<br>      只有左指针小于等于右指针，就不断循环，如果中间指针等于要找的目标值就返回，<br>      反之，目标值大于中间指针的值，将左指针更新为中间指针的下一个。<br>      当目标值小于中间指针的值，就将右指针更新为中间指针的前一个，如果一直每找到就返回-<span class="hljs-number">1</span>。<br>      <br>      */<br>      <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>      <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=nums.length-<span class="hljs-number">1</span>;<br>      <span class="hljs-built_in">int</span> <span class="hljs-built_in">mid</span>=<span class="hljs-built_in">left</span>+(<span class="hljs-built_in">right</span>-<span class="hljs-built_in">left</span>)/<span class="hljs-number">2</span>;<br>      while(<span class="hljs-built_in">left</span>&lt;=<span class="hljs-built_in">right</span>)<br>      &#123;<br>          <span class="hljs-built_in">mid</span>=<span class="hljs-built_in">left</span>+(<span class="hljs-built_in">right</span>-<span class="hljs-built_in">left</span>)/<span class="hljs-number">2</span>;<br>          <span class="hljs-built_in">if</span>(nums[<span class="hljs-built_in">mid</span>]==target)&#123;<br>              return <span class="hljs-built_in">mid</span>;<br><br><br>          &#125;else <span class="hljs-built_in">if</span>(nums[<span class="hljs-built_in">mid</span>]&lt;target)&#123;<br>              <span class="hljs-built_in">left</span>=<span class="hljs-built_in">mid</span>+<span class="hljs-number">1</span>;<br><br>          &#125;else <span class="hljs-built_in">if</span>(nums[<span class="hljs-built_in">mid</span>]&gt;target)&#123;<br>              <span class="hljs-built_in">right</span>=<span class="hljs-built_in">mid</span>-<span class="hljs-number">1</span>;<br><br>          &#125;<br><br>      &#125;<br><br>      return -<span class="hljs-number">1</span>;<br><br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><h3 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h3><p>将数组分成左右两半，然后将左右两部分排序好后，在进行合并</p><p><a href="https://leetcode.cn/problems/sort-an-array/">912. 排序数组 </a></p><p>未处理当一个数组中全是同一个元素的情况</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>    public <span class="hljs-built_in">int</span>[] sortArray(<span class="hljs-built_in">int</span>[] nums) &#123;<br><br>        /*<br>        快速排序：<br>        递归三要素<span class="hljs-symbol">:</span><br>        传入参数和返回值类型<span class="hljs-symbol">:</span>传入一个代排序的数组，左右指针，没有返回<br>        终止条件，左指针大于右指针<br>        单次循环逻辑：定义一个基准值（最左边的值），右指针先移动，右指针直到找到小于基准值的值，就停止移动，<br>        然后移动左指针，左指针移动到直到找到比基准大的值，然后就交换这两个值，一直移动到左右 指针相等，这时候<br>        就将基准值和相遇的值交换，然后递归排序分解点左右两边的值<br>        <br>        <br>         */ <br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=nums.length-<span class="hljs-number">1</span>;<br>         quicksort(nums,<span class="hljs-built_in">left</span>,<span class="hljs-built_in">right</span>);<br><br>         return nums;<br><br><br><br>    &#125;<br><br>    public void quicksort(<span class="hljs-built_in">int</span>[] nums,<span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>,<span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>)&#123;<br>        <span class="hljs-built_in">if</span>(<span class="hljs-built_in">left</span>&gt;<span class="hljs-built_in">right</span>)<br>        &#123;<br>            return;<br>        &#125;<br><br>        <span class="hljs-built_in">int</span> i=<span class="hljs-built_in">left</span>;<br>        <span class="hljs-built_in">int</span> j=<span class="hljs-built_in">right</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">base</span>=nums[<span class="hljs-built_in">left</span>];<br><br>        while(i!=j)&#123;<br><br>            while(nums[j]&gt;=<span class="hljs-built_in">base</span>&amp;i&lt;j)&#123;<br>                j--;<br><br><br>            &#125;<br><br>            while(nums[i]&lt;=<span class="hljs-built_in">base</span>&amp;i&lt;j)&#123;<br>                i++;<br><br><br>            &#125;<br>            <span class="hljs-built_in">if</span>(i&gt;j)&#123;<br>                break;<br>            &#125;<br>            <span class="hljs-built_in">if</span>(i&lt;j)&#123;<br><br>                <span class="hljs-built_in">int</span> temp=nums[j];<br>                nums[j]=nums[i];<br>                nums[i]=temp;<br>            &#125;<br><br>            <br><br><br><br>        &#125;<br><br>        nums[<span class="hljs-built_in">left</span>]=nums[i];<br>        nums[i]=<span class="hljs-built_in">base</span>;<br><br>        quicksort(nums,<span class="hljs-built_in">left</span>,i-<span class="hljs-number">1</span>);<br>        quicksort(nums,i+<span class="hljs-number">1</span>,<span class="hljs-built_in">right</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/kth-largest-element-in-an-array/submissions/">215. 数组中的第K个最大元素 </a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs excel">public <span class="hljs-built_in">int</span> findKthLargest(<span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> k) &#123;<br><br>   /*<br>   先通过快速排序，从大到小进行排序，然后返回数组 中的第k个元素即可<br>   快速排序：<br>    单次循环逻辑<br>       找一个基准数，基准数取左边的第一个，然后定义两个指针，左指针初始指向基础数，<br>       右指针指向数组的末尾，然后右指针先移动，右指针负责找比基准数大的数，等找到比<br>       基准数大的数就停止移动，然后移动左指针，左指针负责寻找比基准数小的数，找到之后，<br>       就交换这两二个指针代表的值，只要左指针不大于右指针就可以一直重复上面的步奏，<br>       等到左右指针相遇的时候，就开始交换基准数的值与相遇位置指针的值，交换结束后，<br>       然后递归排序以及准数为界的左右部分。<br>   递归的停止条件<span class="hljs-symbol">:</span>左指针大于右指针<br>   传入参数和返回：数组，左右指针<br><br>   <br>    */ <br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=nums.length-<span class="hljs-number">1</span>;<br><br>    quikesort(nums,<span class="hljs-built_in">left</span>,<span class="hljs-built_in">right</span>);<br><br>    return nums[k-<span class="hljs-number">1</span>];<br><br>   &#125;<br><br>   public void quikesort(<span class="hljs-built_in">int</span>[] nums,<span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>,<span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>)&#123;<br>       <span class="hljs-built_in">if</span>(<span class="hljs-built_in">left</span>&gt;<span class="hljs-built_in">right</span>)&#123;<br>           return;<br>       &#125;<br><br>       <span class="hljs-built_in">int</span> <span class="hljs-built_in">base</span>=nums[<span class="hljs-built_in">left</span>];<br>       <span class="hljs-built_in">int</span> i=<span class="hljs-built_in">left</span>;<br>       <span class="hljs-built_in">int</span> j=<span class="hljs-built_in">right</span>;<br><br>       while(i!=j)&#123;<br>           <br>           //右指针先移动<br>           while(nums[j]&lt;=<span class="hljs-built_in">base</span>&amp;i&lt;j)&#123;<br>               j--;<br>           &#125;<br>           //左指针移动<br>           while(nums[i]&gt;=<span class="hljs-built_in">base</span>&amp;i&lt;j)&#123;<br>               i++;<br>           &#125;<br><br>           <span class="hljs-built_in">int</span> temp=nums[j];<br>           nums[j]=nums[i];<br>           nums[i]=temp;<br><br>       &#125;<br>       nums[<span class="hljs-built_in">left</span>]=nums[i];<br>       nums[i]=<span class="hljs-built_in">base</span>;<br><br>       quikesort(nums,<span class="hljs-built_in">left</span>,i-<span class="hljs-number">1</span>);<br>       quikesort(nums,i+<span class="hljs-number">1</span>,<span class="hljs-built_in">right</span>);<br><br><br><br><br>   &#125;<br></code></pre></td></tr></table></figure><h4 id="归并排序-1"><a href="#归并排序-1" class="headerlink" title="归并排序"></a>归并排序</h4><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>数组是存放在连续内存空间的相同数据类型的集合。</p><p>特点：</p><p>带有下标，下标都是从零开始的</p><p>内存地址的是连续的</p><p>优点：</p><p>方便查找</p><p>缺点：</p><p>删除与添加元素都有费劲，因为数组的地址值是连续的，所以增加与删除元素都需要移动其他元素</p><h3 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Integer.MAX_VALUE<span class="hljs-comment">;最大值</span><br></code></pre></td></tr></table></figure><p>在一个有序的数组中进行查找，注意不要出现重复</p><p>思路：定义三个指针（left,mid,right),在一个循环（while）下不断收缩范围,循环的条件是（left&lt;=right),然后判断目标值与mid值得大小，目标值大与mid值，就left=mid+1,反之，就right=mid-1.直到找到目标值就返回目标值mid.没有找到就返回-1.</p><p><a href="https://leetcode.cn/problems/search-insert-position/submissions/">35. 搜索插入位置 -  </a></p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs coq">/*<br>思路：<br>首先判断该数与最大值最小值进行比较，小于就返回<span class="hljs-number">0</span>，大于就返回数组的长度加一，也就是<span class="hljs-built_in">right</span>+<span class="hljs-number">1.</span><br>对于在数组中的数，一种是存在的，一种是不存在的，都统一成返回做下标<br>对于存在的数的数使用二分查找法，最终就能返回该数存在的下标。<br>然后对于不存在,没有找到的自然就是不存在的，结合特特殊情况大于最大值的情况可得，<br>最终不存在的数<br>插入的位置乃是二分法最后的<span class="hljs-built_in">right</span>+<span class="hljs-number">1</span>，到这里问题也解决了<br>        <br>        <br>*/<br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs excel">public <span class="hljs-built_in">int</span> searchInsert(<span class="hljs-built_in">int</span>[] nums, <span class="hljs-built_in">int</span> target) &#123;<br>       /*<br>       思路：<br>       本地的难点就是处理不在数组中的情况，不在数组中，插入的位置就是最后统一成<span class="hljs-built_in">right</span>+<span class="hljs-number">1</span><br>       因为当插入的数字大于整个数组时，插入的位置，就是最后一个位置加一<br>       <br>       <br>        */<br><br>       <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>       <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=nums.length-<span class="hljs-number">1</span>;<br><br>       <span class="hljs-built_in">int</span> <span class="hljs-built_in">mid</span>=<span class="hljs-built_in">left</span>+(<span class="hljs-built_in">right</span>-<span class="hljs-built_in">left</span>)/<span class="hljs-number">2</span>;<br>       <span class="hljs-built_in">if</span>(target&lt;nums[<span class="hljs-number">0</span>])&#123;<br>           return <span class="hljs-number">0</span>;<br>       &#125;<br><br>       while(<span class="hljs-built_in">left</span>&lt;=<span class="hljs-built_in">right</span>)&#123;<br>            <span class="hljs-built_in">mid</span>=<span class="hljs-built_in">left</span>+(<span class="hljs-built_in">right</span>-<span class="hljs-built_in">left</span>)/<span class="hljs-number">2</span>;<br><br>           <span class="hljs-built_in">if</span>(nums[<span class="hljs-built_in">mid</span>]==target)&#123;<br><br>               return <span class="hljs-built_in">mid</span>;<br><br>           &#125;else <span class="hljs-built_in">if</span>(nums[<span class="hljs-built_in">mid</span>]&lt;target)&#123;<br>               <span class="hljs-built_in">left</span>=<span class="hljs-built_in">mid</span>+<span class="hljs-number">1</span>;<br><br><br>           &#125;else <span class="hljs-built_in">if</span>(nums[<span class="hljs-built_in">mid</span>]&gt;target)&#123;<br>               <span class="hljs-built_in">right</span>=<span class="hljs-built_in">mid</span>-<span class="hljs-number">1</span>;<br><br><br><br>           &#125;<br>   &#125;<br><br><br>   return <span class="hljs-built_in">right</span>+<span class="hljs-number">1</span>;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230108231052359.png" alt="image-20230108231052359"></p><p>注意：插入位置的判断</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/find-first-and-last-position-of-element-in-sorted-array/">34. 在排序数组中查找元素的第一个和最后一个位置 -  </a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">暴力解法：<br>遍历依次依次数组，然后记录刚好等于目标值的下标，然后再记录，刚好不等于的<br>下标值减一<br></code></pre></td></tr></table></figure><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs subunit">二分查找法解决<br>  /* <br>        首先看特殊情况：目标值不在数组范围内的和在范围内的但不存在的，返回[<span class="hljs-string">-1</span>,<span class="hljs-string">-1</span>]。<br>        然后就是在范围内且存在的，需要寻在开头与结束的位置。<br>        左边界与右边界的位置分别使用二分法，求得，与二分法不同的是，等于也会被包含进去，为了求得边界。<br>        左边界，从右往左求，右边界从左往右求。<br>        */<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] searchRange(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br><br>      <br>        <span class="hljs-keyword">int</span> boder_left=searchLeft(nums,target);<br>        <span class="hljs-keyword">int</span> boder_right=searchRight(nums,target);<br><br>        <span class="hljs-keyword">int</span> l=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//数组长度为0的</span><br>       <span class="hljs-keyword">if</span>(l==-<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>       &#125;<br>       <span class="hljs-comment">//不在范围内的</span><br>        <span class="hljs-keyword">if</span>(target&lt;nums[<span class="hljs-number">0</span>] || target&gt;nums[l])&#123;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>        &#125;<br>        <span class="hljs-comment">//在范围里且存在</span><br>        <span class="hljs-keyword">if</span>(boder_right-boder_left&gt;<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;boder_left+<span class="hljs-number">1</span>,boder_right-<span class="hljs-number">1</span>&#125;;<br>        &#125;<br><br>        <span class="hljs-comment">//在范围里不存</span><br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;-<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>&#125;;<br>        <br><br>    <br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchLeft</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> target)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> boder_left=-<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> mid=right+(left-right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            mid=right+(left-right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&gt;=target)&#123;<br>                right=mid-<span class="hljs-number">1</span>;<br>                boder_left=right;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                left=mid+<span class="hljs-number">1</span>;<br><br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> boder_left;<br><br><br><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">searchRight</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums,<span class="hljs-keyword">int</span> target)</span></span>&#123;<br>         <span class="hljs-keyword">int</span> left=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> right=nums.length-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> boder_right=-<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">int</span> mid=right+(left-right)/<span class="hljs-number">2</span>;<br>        <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>            mid=right+(left-right)/<span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(nums[mid]&lt;=target)&#123;<br>              left=mid+<span class="hljs-number">1</span>;<br>              boder_right=left;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                right=mid-<span class="hljs-number">1</span>;<br><br>            &#125;<br>        <br>    &#125;<br>    <span class="hljs-keyword">return</span> boder_right;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>右边界找左指针，左边界找右指针</p><p><a href="https://leetcode.cn/problems/sqrtx/submissions/">69. x 的平方根 -  </a></p><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/submissions/">26. 删除有序数组中的重复项 -  </a></p><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">/* </span><br><span class="hljs-comment">        快慢指针法：定义两个指针，一个慢指针，一个快指针，慢指针用于更新数组，快指针用于找不重复的元素，</span><br><span class="hljs-comment">        然后直到快指针遍历到</span><br><span class="hljs-comment">        数组末尾，就返回慢指针的后一个即可，即去重后的数组长度.这里需要注意的是，每次都要先移动后赋值，</span><br><span class="hljs-comment">        为了避免多次覆盖同一个元素。</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-type">int</span> slow=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fast=<span class="hljs-number">0</span>;fast&lt;nums.<span class="hljs-built_in">length</span>;fast++)&#123;<br>            <span class="hljs-keyword">if</span>(nums[fast]!=nums[slow])&#123;<br>                slow++;<br>                nums[slow]=nums[fast];<br>                <br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> slow+<span class="hljs-number">1</span>;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/move-zeroes/solution/">283. 移动零 题解 -  </a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/* </span><br><span class="hljs-comment">       双指针：</span><br><span class="hljs-comment">       快慢指针法：定义两个指针，一个慢指针，一个快指针，慢指针用于更新数组，快指针用于寻找不是0的元素，</span><br><span class="hljs-comment">       然后与慢指针进行</span><br><span class="hljs-comment">       交换，即可，直到快指针达到结尾</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       */</span><br><br>       <span class="hljs-type">int</span> slow=<span class="hljs-number">0</span>;<br><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> fast=<span class="hljs-number">0</span>;fast&lt;nums.length;fast++)&#123;<br>           <span class="hljs-keyword">if</span>(nums[fast]!=<span class="hljs-number">0</span>)&#123;<br>               <span class="hljs-type">int</span> <span class="hljs-keyword">temp</span>=nums[fast];<br>               nums[fast]=nums[slow];<br>               nums[slow]=<span class="hljs-keyword">temp</span>;<br>               slow++;<br>           &#125;<br>       &#125;<br></code></pre></td></tr></table></figure><p>*<a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串 -  </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">        思路：从后往遍历数组，定义一个指针用于记录退格键的数量，当指针为退格键时就加一，不是退格键</span><br><span class="hljs-comment">        时，当记录的退格键数目不为零时，就删去该字符，反之则不删除。</span><br><span class="hljs-comment">        整个逻辑为再一个大循环中，嵌套两个小循环，大循环用于旁段两个字符串的对应不删除位置的字符是否相同，</span><br><span class="hljs-comment">        小循环是用于进行删除字符。</span><br><span class="hljs-comment">         */</span><br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/submissions/">977. 有序数组的平方 -  </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">      思路：首先定义一个新数组,长度和原始数组长度一样，用于存放排序后的数组，定义一个指针指向新数组的最后面。</span><br><span class="hljs-comment">      其次再定义两个指针，一个指针指向原始数组最前面，一个指针指向最后面，因为这个数组最大值都是出现在两边（有负数的情况）</span><br><span class="hljs-comment">      ，然后比较两个指针代表的值，将大的值赋值给新数组，然后这个指针和新数组的指针进行移动</span><br><span class="hljs-comment">       */</span><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-size-subarray-sum/submissions/">209. 长度最小的子数组 -  </a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">思路：使用滑动窗口，定义一个开始指针，定义一个循环用与遍历数组，<br>  还有充当滑动窗口的末尾指针的作用，循环类还要嵌套一个当型循环，用于动态更新开始指针的位置，<br>  当开始指针与末尾指针的和大于等于最小值时，就进行循环，取出这时的区间长度和原始最小区间结果进行比较，<br>  如果这个新的区间长度小于原始区间长度，就更新长度，反之则不更新。然后将开始指针的值从本次结果中剔除，<br>  开始指针加一，为的是从下一个值开始重新判断数组和与<span class="hljs-literal">result</span>的结果大小。注意，找不到数组和大于target的数情况<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/fruit-into-baskets/submissions/">904. 水果成篮 -  </a></p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-comment">/*</span><br><span class="hljs-comment">      思路：滑动窗口，定义一个开始指针，还有一个大循环，大循环的次数就是结尾指针。还要嵌套一个当型循环，</span><br><span class="hljs-comment">      用于动态更新窗口的大小以及开始指针的位置。还有一个哈希表map用于记录窗口内值出现的次数。</span><br><span class="hljs-comment">      不断移动尾部指针并放入哈希表内，当哈希表的长度大于2时，就移动开始指针的位置，</span><br><span class="hljs-comment">      并将上一个的尾部指针代表的值从哈希表从减一，以便于使得哈希表长度小于2，</span><br><span class="hljs-comment">      当开始指针在哈希表中出现的次数为0时，就将这个键也从哈希表中删除</span><br><span class="hljs-comment">.当原始窗口的最大值小于现在的窗口值，就将窗口最大值更新为现在的窗口值大小        </span><br><span class="hljs-comment">      */</span><br>      <span class="hljs-built_in">getOrDefault</span>() 方法获取指定 <span class="hljs-built_in">key</span> 对应对 value，如果找不到 <span class="hljs-built_in">key</span> ，则返回设置的默认值。<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-window-substring/">76. 最小覆盖子串 -  </a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Integer.MAX_VALUE;<br>substring<span class="hljs-literal">()</span>:取字串<br>contains<span class="hljs-constructor">Key()</span>:<br>values:返回哈希表的所有值<br><span class="hljs-keyword">to</span><span class="hljs-constructor">CharArray()</span>:转换成字符数组<br><span class="hljs-built_in">char</span><span class="hljs-constructor">At()</span>:转换成字符<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">滑动窗口，定义两个指针，都从起始位置开始。还要定义一个哈希表，用于记录覆盖字符串中的字符的在窗口内的出现情况，初始都为1,表示都为出现，当值都小于0时，就表示字符串中所有的值都已出现在窗口中。</span><br><span class="hljs-comment">当右指针指向的字符时是要覆盖的字符，就将将哈希表中该字符的次数减一。当窗口内没有包含覆盖的字符串，右指针就一直向前移动。当出现了所有覆盖字符都在窗口中出现时，即哈希表的值都为负数，</span><br><span class="hljs-comment">就记录下该窗口的起始位置和窗口大小，并且开始移动左指针，移动左指针后，如果窗口内还包含要覆盖的字符串，如果新窗口的大小小于上一次记录的窗口大小，则更新窗口值大小和起始位置，反之则不更新，</span><br><span class="hljs-comment">且开始移动右指针，当右指针走到字符串尾部后，循环结束，返回结果</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/spiral-matrix-ii/submissions/">59. 螺旋矩阵 II -  </a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs excel">思路：<br>    需要确定的量：循环的圈数（<span class="hljs-built_in">n</span>/<span class="hljs-number">2</span>），每次开始循环的位置，循环的边界（循环完一次，边界数加一）.<br>    特殊情况的处理，当<span class="hljs-built_in">n</span>为奇数时，最后一次循环不完整，所以最后一个值需要单独处理。注意每次赋值的区间选择，要统一。<br>    每次循环结束后到要重新将开始位置定位到新的起点，而不是上一次循环结束的位置。<br></code></pre></td></tr></table></figure><h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="链表的定义"><a href="#链表的定义" class="headerlink" title="链表的定义"></a>链表的定义</h3><p>1.链表由两部分构成，一部分是数据域，一部分是指针域，指针域指向下一个节点的数据空，而最后一个指针指向为空</p><h3 id="链表的分类"><a href="#链表的分类" class="headerlink" title="链表的分类"></a>链表的分类</h3><p>单链表：只能从前往后查找</p><p>双链表：既可以向前查找也可以向后查找，双链表含有两个指针域，即头指针域和后指针域</p><p>循环链表：指的是首位连接在一起的链表</p><h3 id="链表的存储"><a href="#链表的存储" class="headerlink" title="链表的存储"></a>链表的存储</h3><p>数组是在内存中连续分布的</p><p>链表通过指针连系在一起的，他是随机分配在内存中</p><h3 id="链表的优点"><a href="#链表的优点" class="headerlink" title="链表的优点"></a>链表的优点</h3><p>链表可以动态的申请空间大小，数组是固定长度的</p><p>链表方便用于删除与添加元素，但不方便查找元素，因为每次都需要从前往后查找</p><p>数组方便查找，因为数组带有下标，但删除与增加元素不方便，每次修改元素都要重新修改下标</p><h3 id="链表的构造"><a href="#链表的构造" class="headerlink" title="链表的构造"></a>链表的构造</h3><p><a href="https://www.runoob.com/java/java-linkedlist.html">Java LinkedList | 菜鸟教程 (runoob.com)</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ListNode</span></span>&#123;<br><br><span class="hljs-comment">//节点的值</span><br>int <span class="hljs-keyword">val</span>;<br><br><span class="hljs-comment">//指向下一个节点</span><br>ListNode next;<br><br><span class="hljs-comment">//无参构造函数</span><br><span class="hljs-keyword">public</span> ListNode()&#123;<br><br><br>&#125;<br><br><span class="hljs-comment">//单参数的构造函数</span><br><span class="hljs-keyword">public</span> ListNode(int <span class="hljs-keyword">val</span>)&#123;<br><span class="hljs-keyword">this</span>.<span class="hljs-keyword">val</span>=<span class="hljs-keyword">val</span>;<br>&#125;<br><br><span class="hljs-comment">//全参构造</span><br><span class="hljs-keyword">public</span> ListNode(int <span class="hljs-keyword">val</span>,ListNode next)&#123;<br><span class="hljs-keyword">this</span>.<span class="hljs-keyword">val</span>=<span class="hljs-keyword">val</span>;<br><span class="hljs-keyword">this</span>.next=next;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/submissions/">203. 移除链表元素 -  </a></p><p>前指针      后指针</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">虚拟头结点解法：先自定义一个头结点，让他的指针指向头部,然后再定义两个指针，一个指向虚拟头结点，一个指向真实头结点，</span><br><span class="hljs-comment">只要前面的结点指向不为空，就进行循环，循环的内容是判断前指针的值是否为要删除的值，</span><br><span class="hljs-comment">如果是要删除的值，就把前指针的下一个指向后指针的下一个指向，如果不等与，</span><br><span class="hljs-comment">就正常把后指针赋给前指针，意味着前后的顺序还是保持不变，然后就是每一轮循环后，都让后指针指向自己的后一个指针。</span><br><span class="hljs-comment">循环结束后，就返回虚拟头结点的下一个，因为要返回的是真实结点，添加虚拟头结点是为了处理第一个结点的删除问题</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* 不添加虚拟解答的办法：</span><br><span class="hljs-comment">不添加虚拟结点，意味着头结点的删除，就不能依靠前指针的下一个指向后指针的下一个指向来解决问题，</span><br><span class="hljs-comment">这里就需要头结点的删除 做出特殊处理(直接让头结点指向下一个)，也就是头结点的值等于要删除的值。</span><br><span class="hljs-comment">除了头结点的其他值等于要删除的值，就可以按照前指针的下一个指向后指针的下一个指向来解决问题。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>注意</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ListNode removeElements(ListNode head, int <span class="hljs-keyword">val</span>) &#123;<br><br>​       <span class="hljs-comment">//注意这里不适用if的原因是因为，可能出现了多个一样要删除的在一起</span><br>​        <span class="hljs-keyword">while</span>(head!=<span class="hljs-literal">null</span> &amp;&amp; head.<span class="hljs-keyword">val</span>==<span class="hljs-keyword">val</span> )&#123;<br>​            head=head.next;<br>​        &#125;<br>​        <span class="hljs-keyword">if</span>(head==<span class="hljs-literal">null</span>)&#123;<br>​            <span class="hljs-keyword">return</span> head;<br>​        &#125;<br>​        ListNode left=head;<br>​        ListNode right=head.next;<br>​        <span class="hljs-keyword">while</span>(right!=<span class="hljs-literal">null</span>)&#123;<br>​            <span class="hljs-keyword">if</span>(right.<span class="hljs-keyword">val</span>==<span class="hljs-keyword">val</span>)&#123;<br>​                left.next=right.next;<br>​            &#125;<span class="hljs-keyword">else</span>&#123;<br><br>​                left=right;<br>​            &#125;<br>​            right=right.next;<br>​        &#125;<br>​         <span class="hljs-keyword">return</span> head;<br>​    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/design-linked-list/">707. 设计链表 -  </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">获取值：从头开始遍历链表，直到指针到了要找的位置就停止循环，然后返回这个指针位置的值</span><br><span class="hljs-comment">添加值：首先判断传入的指针位置是否大与链表的长度，如果是，就返回，意味着插入结束，如果存在小于0的数，</span><br><span class="hljs-comment">就改变指针的位置为0，也就是从头开始插入，然后就开始让指针向前移动，直到找到要插入位置的前一结点。</span><br><span class="hljs-comment">然后就把这个值的指针指向寻找指针的下一个，然后再把这个寻找指针的下一个指向要寻找的这个值，注意插入时长度加一。</span><br><span class="hljs-comment">添加头与添加尾：直接调用添加方法即可</span><br><span class="hljs-comment">删除：如果要删除的指针位置 在链表中，就删除，链表长度减一.如果没有就返回，代表删除结束。然后也是依次遍历。</span><br><span class="hljs-comment">直到指针指向要删除的位置的前一个结点，就把这个位置的指针的下一个指向这个指针的下一个的下一个。</span><br><span class="hljs-comment">注意：删除和增加只需要找到要删除的前驱结点即可，然后执行删除与增加，而查找不同，必须要找到该查找结点</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="反转链表"><a href="#反转链表" class="headerlink" title="反转链表"></a>反转链表</h3><p><a href="https://leetcode.cn/problems/reverse-linked-list/submissions/">206. 反转链表 -  </a></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">/<span class="hljs-emphasis">*</span><br><span class="hljs-emphasis">思路：</span><br><span class="hljs-emphasis">双指针法，初始左指针指向空，右指针指向头部，开始循环，只要右指针指向不为空，就一直循环，</span><br><span class="hljs-emphasis">循环的内容就是左右指针向前移动，然后反转指针，先用另外一个临时指针把右指针的下一个指向存起来，</span><br><span class="hljs-emphasis">然后再把这个右指针的下一个指向传给左指针。</span><br><span class="hljs-emphasis">然后再从新给左指针取下一个位置即，右指针的位置，然后再给右指针重新给一个位置，即使之前保存的临时指针位置。</span><br><span class="hljs-emphasis">这里有点类似与两个数的交换，使用中间数进行存储</span><br><span class="hljs-emphasis">最后返回左指针即可</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">*</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs routeros">/&#123;<br>        ListNode <span class="hljs-attribute">left</span>=<span class="hljs-literal">null</span>;<br>        ListNode <span class="hljs-attribute">right</span>=head;<br>        ListNode <span class="hljs-attribute">temp</span>=<span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span>(right!=<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-attribute">temp</span>=right.next;<br>            right.<span class="hljs-attribute">next</span>=left;<br><br>            <span class="hljs-attribute">left</span>=right;<br>            <span class="hljs-attribute">right</span>=temp;<br>        &#125;<br><br>        return left;<br></code></pre></td></tr></table></figure><h4 id="递归写法"><a href="#递归写法" class="headerlink" title="递归写法"></a>递归写法</h4><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">  <span class="hljs-comment">/* </span><br><span class="hljs-comment">    递归写法：</span><br><span class="hljs-comment">    递归思路其实就是双指指针的简化，具体简化为最后的左指针指向右指针，右指针指向下一个指针。</span><br><span class="hljs-comment">    递归的内容还是将前指针指向后指针的过程</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br>    <span class="hljs-built_in">public</span> ListNode reverse(ListNode left,ListNode right)&#123;<br>        ListNode <span class="hljs-keyword">temp</span>=<span class="hljs-keyword">null</span>;<br>        <span class="hljs-keyword">if</span>(right==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> left;<br>        &#125;<br>         <span class="hljs-keyword">temp</span>=right.next;<br>         right.next=left;<br>       <span class="hljs-keyword">return</span> reverse(right,<span class="hljs-keyword">temp</span>);<br>    &#125;<br>    <span class="hljs-built_in">public</span> ListNode reverseList(ListNode head) &#123;        <br>      <span class="hljs-keyword">return</span>  reverse(<span class="hljs-keyword">null</span>,head);      <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/submissions/">24. 两两交换链表中的节点 -  </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">    迭代法：首先利用虚拟头结点处理头节点的删除问题，虚拟头结点指向头结点，</span><br><span class="hljs-comment">    最后返回的也是虚拟头结点的下一个结点。</span><br><span class="hljs-comment">    定义一个指针，指针指向虚拟头结点。然后进入循环，</span><br><span class="hljs-comment">    循环的条件是指针的下一个指向和下下个指向都不为空。循环的内容为，</span><br><span class="hljs-comment">    首先利用临时指针一存储指针的下一个指向，这样是为了方便后面的指针反转。</span><br><span class="hljs-comment">    然后再利用一个临时指针二存储指针的下下下个指向，</span><br><span class="hljs-comment">    这样是为了方便每一组数据交换后，方便与下一组的元素产生指针指向关系。</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    然后就将指针的下一个指向下下个指向，然后再将指针的下下个指向临时指针一，</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    然后再将指针的下下下个指向临时指针二，</span><br><span class="hljs-comment">    最后就将指针向前移动两个，最后返回即可</span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs axapta">    <br><br>ListNode base=<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">-1</span>);<br>base.<span class="hljs-keyword">next</span>=head;<br>ListNode current=base;<br><br>      <br><span class="hljs-keyword">while</span>(current.<span class="hljs-keyword">next</span>!=<span class="hljs-literal">null</span>&amp;&amp;current.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>!=<span class="hljs-literal">null</span>)&#123;<br>    <br>    ListNode temp=current.<span class="hljs-keyword">next</span>;<br>    ListNode temp1=current.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br>    <br>    current.<span class="hljs-keyword">next</span>=current.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br>    current.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>=temp;<br>    current.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>=temp1;<br><br>    current=current.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br><br><br>&#125;<br><span class="hljs-keyword">return</span> base.<span class="hljs-keyword">next</span>;<br><br><br></code></pre></td></tr></table></figure><p>删除倒数第n个结点</p><p><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/submissions/">19. 删除链表的倒数第 N 个结点 -  </a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs excel">/* <br>思路：双指针加上虚拟头节点，设置左右指针，先让右指针走<span class="hljs-built_in">n</span>+<span class="hljs-number">1</span>步，目的是为了保持与左指针的距离为<span class="hljs-built_in">n</span>+<span class="hljs-number">1</span>，<br>就是说当左指针指向为删除节点的前一个结点，而右指针指向为空，然后就将左指针下一个指向下下个指向<br><br><br>*/<br></code></pre></td></tr></table></figure><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">/* </span><br><span class="hljs-comment">      暴力解法：先便利整个链表，求出链表的长度，然后根据倒数的位置，求出正数的位置，然后再将指针便利到该位置的前一个，然后再将该位置的指针的下一个指向下下个</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      */</span><br>      <span class="hljs-keyword">while</span>(p!=<span class="hljs-keyword">null</span>)&#123;<br>          p=p.<span class="hljs-keyword">next</span>;<br>          <span class="hljs-keyword">size</span>++;<br>      &#125;<br>      <span class="hljs-keyword">if</span>(n==<span class="hljs-keyword">size</span>)&#123;<br>          <span class="hljs-keyword">return</span> head=head.<span class="hljs-keyword">next</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">int</span> index=<span class="hljs-keyword">size</span>-n;<br><br>      <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;index-<span class="hljs-number">1</span>;i++)&#123;<br>          cur=cur.<span class="hljs-keyword">next</span>;<br><br>      &#125;<br>      cur.<span class="hljs-keyword">next</span>=cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br>      <span class="hljs-keyword">return</span> head;<br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/submissions/">面试题 02.07. 链表相交 -  </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">为了解决两个链表长度不一致的问题，我们首先要求出两个链表长度的差值，让长的链表的指针先移动，</span><br><span class="hljs-comment">移动到差值的后一位，然后两个一起移动，只要两个指针的指向不相同，就一直移动到都为空，只要指向相同，</span><br><span class="hljs-comment">就立刻返回该节点。</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h3 id="循环链表"><a href="#循环链表" class="headerlink" title="循环链表"></a>循环链表</h3><p><a href="https://leetcode.cn/problems/linked-list-cycle-ii/">142. 环形链表 II - 力扣（LeetCode）</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：本题先要判断是否存在环，如果存在环，就需要求出入环的第一个结点，如果不存在环就直接返回。</span><br><span class="hljs-comment">判断是否存在环的方法是快慢指针法，慢指针依次走一步，快指针一次走两步，当快指针与满指针相遇就说明存在环，否则就不存在环。</span><br><span class="hljs-comment">找如何的结点的方法是，在头结点和相遇结点都定义一个指针，当两个指针相遇时，就是入环结点的位置了，具体原因设计数学问题。</span><br><span class="hljs-comment">注意数链表为空和为一的情况，都是不可能出现环的情况     </span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs routeros">public ListNode detectCycle(ListNode head) &#123;<br>     ListNode <span class="hljs-attribute">slow</span>=head;<br>     ListNode <span class="hljs-attribute">fast</span>=head;<br> <br>     <span class="hljs-keyword">while</span>(fast!=<span class="hljs-literal">null</span>&amp;&amp;fast.next!=<span class="hljs-literal">null</span>)&#123;<br>         <span class="hljs-attribute">fast</span>=fast.next.next;<br>         <span class="hljs-attribute">slow</span>=slow.next;<br><br>         <span class="hljs-keyword">if</span>(<span class="hljs-attribute">fast</span>==slow)&#123;<br><br>             break;<br>         &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-attribute">fast</span>==null || fast.<span class="hljs-attribute">next</span>==null)&#123;<br><br>            return <span class="hljs-literal">null</span>;<br>        &#125;<br>        ListNode <span class="hljs-attribute">index1</span>=head;<br>        ListNode <span class="hljs-attribute">index2</span>=fast;<br><br>        <span class="hljs-keyword">while</span>(index1!=index2)&#123;<br>            <span class="hljs-attribute">index1</span>=index1.next;<br>            <span class="hljs-attribute">index2</span>=index2.next;<br><br>        &#125;<br><br>        return index1;       <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/remove-linked-list-elements/">203. 移除链表元素 - 力扣（LeetCode）</a></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> ListNode removeElements(ListNode head, <span class="hljs-built_in">int</span> val) &#123;<br><br>       <span class="hljs-comment">/* </span><br><span class="hljs-comment">       双指针法：加上虚拟头结点，初始化做指针指向虚拟头结点，右指针指向头结点，只有右指针指向不为空，</span><br><span class="hljs-comment">       就一直移动，如果在移动的过程中，右指针指向的值是要删除的值，就将左指针的指向右指针的下一个，</span><br><span class="hljs-comment">       否则就将将左指针指向右指针，然后移动右指针为下一个</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       */</span><br><br>       ListNode base=<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">-1</span>);<br>       base.<span class="hljs-keyword">next</span>=head;<br>       ListNode left=base;<br>       ListNode right=head;<br><br>       <span class="hljs-keyword">while</span>(right!=<span class="hljs-literal">null</span>)&#123;<br><br>           <span class="hljs-keyword">if</span>(right.val==val)&#123;<br>               left.<span class="hljs-keyword">next</span>=right.<span class="hljs-keyword">next</span>;<br><br><br>           &#125;<span class="hljs-keyword">else</span>&#123;<br>                 left=right;<br>           &#125;<br><br><br>         <br>           right=right.<span class="hljs-keyword">next</span>;<br>       &#125;<br><br><br><br>       <span class="hljs-keyword">return</span> base.<span class="hljs-keyword">next</span>;<br><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h2><p>一种可以类似于数组的数据结构，也就是可以通过下标访问元素的数据结构，但这里的下标并没有那么简单，这里的下标可以代表一些非整数型的值，为实现这种方法，就需要用到哈希函数，就是把非数值型通过计算哈希值得到下标值</p><h3 id="哈希值碰撞"><a href="#哈希值碰撞" class="headerlink" title="哈希值碰撞"></a>哈希值碰撞</h3><p>不同的对象的哈希值相同</p><p><strong>拉链法</strong>：</p><p><strong>线性探针法</strong>：</p><h4 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h4><p>常用于寻找某各元素</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>集合：无重复的</p><p>红黑树：一种平衡二叉搜索树，排过序的</p><h4 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242. 有效的字母异位词 -  "></a><a href="https://leetcode.cn/problems/valid-anagram/submissions/">242. 有效的字母异位词 -  </a></h4><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">     思路：首先考虑特殊情况，当两个字符串的长度不相等时，则一定不是异位词</span><br><span class="hljs-comment">     使用哈希表存储字符出现的次数，在s中字符出现就加一，在t中出现就减一，最后看哈希表中的值是否全为0，</span><br><span class="hljs-comment">     是就是异位词，反之则不是。</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">     */</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Map&lt;Character,Integer&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;Character,Integer&gt;<span class="hljs-literal">()</span>;<br><br>   <br>       <span class="hljs-built_in">int</span> l1=s.length<span class="hljs-literal">()</span>-<span class="hljs-number">1</span>;<br>       <span class="hljs-built_in">int</span> l2=t.length<span class="hljs-literal">()</span>-<span class="hljs-number">1</span>;<br>       <span class="hljs-keyword">if</span>(l1!=l2)&#123;<br>           return <span class="hljs-literal">false</span>;<br>       &#125;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;=l1;i++)&#123;<br>           map.put(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>,map.get<span class="hljs-constructor">OrDefault(<span class="hljs-params">s</span>.<span class="hljs-params">charAt</span>(<span class="hljs-params">i</span>)</span>,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>           map.put(t.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>,map.get<span class="hljs-constructor">OrDefault(<span class="hljs-params">t</span>.<span class="hljs-params">charAt</span>(<span class="hljs-params">i</span>)</span>,<span class="hljs-number">0</span>)-<span class="hljs-number">1</span>);<br><br>       &#125;<br>       <span class="hljs-keyword">for</span>(Integer <span class="hljs-keyword">val</span>:map.values<span class="hljs-literal">()</span>)&#123;<br>           <span class="hljs-keyword">if</span>(<span class="hljs-keyword">val</span>!=<span class="hljs-number">0</span>)&#123;<br>               return <span class="hljs-literal">false</span>;<br>           &#125;<br>       &#125;<br>       return <span class="hljs-literal">true</span>;<br><br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/ransom-note/submissions/">383. 赎金信 -  </a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">使用一个哈希表记录元素的出现次数，字符再magezine出现加一，字符再ransomNote出现就减一，</span><br><span class="hljs-comment">统计完成后，就旁段该哈希表中的值是否有出现负数的，如果有就代表不能，反之则可能</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br>         Map&lt;Character,Integer&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;Character,Integer&gt;<span class="hljs-literal">()</span>;<br><br>         <span class="hljs-built_in">int</span> l2=ransomNote.length<span class="hljs-literal">()</span>-<span class="hljs-number">1</span>;<br>         <span class="hljs-built_in">int</span> l1=magazine.length<span class="hljs-literal">()</span>-<span class="hljs-number">1</span>;<br>         <span class="hljs-keyword">if</span>(l2&gt;l1)&#123;<br>             return <span class="hljs-literal">false</span>;<br>         &#125;<br><br>         <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;=l1;i++)&#123;<br>             map.put(magazine.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>,map.get<span class="hljs-constructor">OrDefault(<span class="hljs-params">magazine</span>.<span class="hljs-params">charAt</span>(<span class="hljs-params">i</span>)</span>,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br><br>         &#125;<br>         <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;=l2;j++)&#123;<br>              map.put(ransomNote.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">j</span>)</span>,map.get<span class="hljs-constructor">OrDefault(<span class="hljs-params">ransomNote</span>.<span class="hljs-params">charAt</span>(<span class="hljs-params">j</span>)</span>,<span class="hljs-number">0</span>)-<span class="hljs-number">1</span>);<br><br>         &#125;<br><br>         <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> <span class="hljs-keyword">val</span>:map.values<span class="hljs-literal">()</span>)&#123;<br><br>             <span class="hljs-keyword">if</span>(<span class="hljs-keyword">val</span>&lt;<span class="hljs-number">0</span>)&#123;<br>                 return <span class="hljs-literal">false</span>;<br>             &#125;<br>         &#125;<br><br>         return <span class="hljs-literal">true</span>;<br><br></code></pre></td></tr></table></figure><p>解法二</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/*使用数组进行记录：定义一个数组长度为26的数组 ,使用下标代表字符，得出下标的方式是num=&#x27;s&#x27;-&#x27;a&#x27;,</span><br><span class="hljs-comment">然后遍历两个字符串，记录字符的出现次数，ransomNote中出现减一，magzine中出现加一，最后遍历 该数组，</span><br><span class="hljs-comment">看是否有0出现</span><br><span class="hljs-comment">       */</span><br><br>       <span class="hljs-type">int</span>[] arr=<span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">26</span>];<br>       <span class="hljs-type">int</span> p=<span class="hljs-number">0</span>;<br>       <span class="hljs-type">int</span> q=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">26</span>;i++)&#123;<br>           arr[i]=<span class="hljs-number">0</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;magazine.length();j++)&#123;<br>          p=magazine.charAt(j)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>           arr[p]++;<br>       &#125;<br><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;m&lt;ransomNote.length();m++)&#123;<br><br>           q=ransomNote.charAt(m)-<span class="hljs-string">&#x27;a&#x27;</span>;<br>           arr[q]<span class="hljs-comment">--;</span><br><br>       &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> n=<span class="hljs-number">0</span>;n&lt;<span class="hljs-number">26</span>;n++)&#123;<br>          <span class="hljs-keyword">if</span>(arr[n]&lt;<span class="hljs-number">0</span>)&#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>          &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br> <br></code></pre></td></tr></table></figure><h3 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49. 字母异位词分组 -  "></a><a href="https://leetcode.cn/problems/group-anagrams/submissions/">49. 字母异位词分组 -  </a></h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs">思路：利用哈希表进行存储，键为排序后的统一字符串，因为字母异位词的特点就是，排序后的字符顺序是一样的。<br>值就是，该键对应的一系列异位词，是一个列表。然后遍历整个字符数组，取出其中的每个字符串，变成字符数组，<br>然后排序，这样哈希表中的键就得到了，然后就把这个值放入一个列表中，这个列表就是哈希表中的值，如果这个值存在<br>就使用哈希表中已经存在的列表，不存在就创建一个新的，然后再把这个字符串放进去，最后就是将键值，放入哈希表中。<br>遍历结束后，最后就返回一个列表，值为哈希表的值<br></code></pre></td></tr></table></figure><h3 id="438-找到字符串中所有字母异位词"><a href="#438-找到字符串中所有字母异位词" class="headerlink" title="438. 找到字符串中所有字母异位词 -  "></a><a href="https://leetcode.cn/problems/find-all-anagrams-in-a-string/submissions/">438. 找到字符串中所有字母异位词 -  </a></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs sql">使用滑动窗口，定义两个指针，一个做左指针，一个右指针，右指针先开始移动，负责窗口的右边界，而左指针负责收缩。<br>定义两个哈希表，一个用于记录我们需要的字符串p的字符记录，一个用于记录窗口内的可用字符记录。定义一个计数器，<br>用于记录满足条件的字符个数。定义一个列表用于返回的匹配到的异位词的下标。<br>进行循环时，取出右指针指向的值，只要右指针指向的值在我们需要的哈希表中，<br>就将该字符的窗口的哈希表进行添加或修改，如果需要的该字符记录和窗口内该字符的记录相等，就将计数器加一。<br>等到窗口值大小大于等于要匹配的字符串，就可以判断是否可以收缩了，如果计数器的次数与需求的哈希表长度一致，<br>就将左指针添加到该列表中，然后就是取出做指针的值，因为要缩小窗口了，如果左指针的值是我们需要的值，<br>就要改动该窗口中的字符的值和计数器的值。<br>等到循环结束后，返回列表即可<br>注意：<span class="hljs-keyword">equals</span>和<span class="hljs-operator">=</span><span class="hljs-operator">=</span>区别：<br>       在[<span class="hljs-number">-128</span>，<span class="hljs-number">127</span>]没有区别，超过这个区间就必须用<span class="hljs-keyword">equals</span>了，因为<span class="hljs-type">Integer</span>此时会创建两个对象。<br></code></pre></td></tr></table></figure><h3 id="349-两个数组的交集"><a href="#349-两个数组的交集" class="headerlink" title="349. 两个数组的交集 -  "></a><a href="https://leetcode.cn/problems/intersection-of-two-arrays/submissions/">349. 两个数组的交集 -  </a></h3><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/*<br>定义两个<span class="hljs-keyword">set</span>集合，一个用于存放结果集，一个用于去重其中的一个数组，取另外一个数组中的元素，<br>与转化后的去重数组元素进行比较，如果不在去重的<span class="hljs-keyword">set</span>中就进行下一次循环，如果在就将 该字符添加进结果集<br><br>*/<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.util.HashSet;<br><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> <span class="hljs-type">int</span>[] intersection(<span class="hljs-type">int</span>[] nums1, <span class="hljs-type">int</span>[] nums2) &#123;<br><br><br>        HashSet&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-keyword">set</span>=<span class="hljs-built_in">new</span> HashSet&lt;<span class="hljs-type">Integer</span>&gt;();<br>        HashSet&lt;<span class="hljs-type">Integer</span>&gt; res=<span class="hljs-built_in">new</span> HashSet&lt;<span class="hljs-type">Integer</span>&gt;();<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;nums1.length;i++)&#123;<br>            <span class="hljs-keyword">set</span>.<span class="hljs-keyword">add</span>(nums1[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">0</span>;j&lt;nums2.length;j++)&#123;<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-keyword">set</span>.contains(nums2[j]))&#123;<br>                res.<span class="hljs-keyword">add</span>(nums2[j]);<br><br>            &#125;<br>        &#125;<br><br>        //将<span class="hljs-keyword">set</span>集合中的元素赋值给数组<br>        <span class="hljs-type">int</span> l=res.size();<br>       <span class="hljs-type">int</span>[] arr= <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[l];<br>       <span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num:res)&#123;<br>            arr[m]=num;<br>            m++;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> arr ;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="350-两个数组的交集-II"><a href="#350-两个数组的交集-II" class="headerlink" title="350. 两个数组的交集 II -  "></a><a href="https://leetcode.cn/problems/intersection-of-two-arrays-ii/submissions/">350. 两个数组的交集 II -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">定义一个哈希表用于记录两个字符中字符出现次数，在定义一个数组，用于存放最后结果。</span><br><span class="hljs-comment">然后取字符串一中的字符放入哈希表中，哈希值做加法，然后再取字符串二中的字符，</span><br><span class="hljs-comment">只要这个字符在之前的哈希表中存在且哈希值大于0，就做减法，然后再把这个键放入列表中</span><br><span class="hljs-comment">*/</span><br>        <br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="hljs-built_in">map</span>=<span class="hljs-keyword">new</span> <span class="hljs-keyword">HashMap</span>&lt;Integer,Integer&gt;();<br>List&lt;Integer&gt; lists=<span class="hljs-keyword">new</span> ArrayList&lt;Integer&gt;();<br><br> <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>; i&lt;nums1.length;i++)&#123;<br><br>     <span class="hljs-built_in">map</span>.put(nums1[i],<span class="hljs-built_in">map</span>.getOrDefault(nums1[i],<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br><br> &#125;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>; j&lt;nums2.length;j++)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>.containsKey(nums2[j]) &amp;&amp; <span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(nums2[j])&gt;<span class="hljs-number">0</span>)&#123;<br><br>        <span class="hljs-built_in">map</span>.put(nums2[j],<span class="hljs-built_in">map</span>.getOrDefault(nums2[j],<span class="hljs-number">0</span>)<span class="hljs-number">-1</span>);<br>        lists.<span class="hljs-built_in">add</span>(nums2[j]);<br><br><br>    &#125;     <br> &#125;<br><br> <span class="hljs-built_in">int</span> <span class="hljs-built_in">size</span>=lists.<span class="hljs-built_in">size</span>();<br> <span class="hljs-built_in">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[<span class="hljs-built_in">size</span>];<br> <span class="hljs-built_in">int</span> p=<span class="hljs-number">0</span>;<br> <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> val:lists)&#123;<br>     arr[p]=val;<br>     p++;<br> &#125; <br> <span class="hljs-keyword">return</span> arr;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/happy-number/submissions/">202. 快乐数 -  </a></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs applescript">/*<br>思路：<br>定义一个哈希<span class="hljs-keyword">set</span>,用于记录平方和是否在之前出现。当在无线循环中，出现了和为一的情况，就代表这个数是快乐数。<br>如果之前就出现了，就代表进入了循环，就直接返回<span class="hljs-literal">false</span>。否则将将该和插入到哈希表中。然后就将和赋值给n。<br>这里的重点就是，数字的各个位求和，这里单独定义一个函数，只要n&gt;<span class="hljs-number">0</span>就进行循环，然后使用求取各个位数相乘即可,<br>然后将数除以<span class="hljs-number">10</span>,循环结束然后返回该和。<br><br>*/<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/two-sum/submissions/">1. 两数之和 -  </a></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">/*</span><br><span class="hljs-comment">       思路：使用一个哈希表进行记录我们访问过的元素，这样就不需要重复访问之前访问过的元素了，只要之前存在的元素被访问过且是我们需要差值元素，就返回该数组的下标位置，然后再返回对应的哈希值的值，如果不在我们的哈希表中，就将该值添加到哈希表中，继续进行下一次遍历。这里的哈希表键是数组的值，值是对应数字的下标。      </span><br><span class="hljs-comment">        */</span><br>       <span class="hljs-keyword">HashMap</span>&lt;Integer,Integer&gt; <span class="hljs-built_in">map</span>=<span class="hljs-keyword">new</span> <span class="hljs-keyword">HashMap</span>&lt;Integer,Integer&gt;();<br>       <span class="hljs-built_in">int</span> x=<span class="hljs-number">0</span>;<br>       <span class="hljs-built_in">int</span> y=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-built_in">int</span> le=target-nums[i];<br><br>            <span class="hljs-keyword">if</span>(<span class="hljs-built_in">map</span>.containsKey(le))&#123;<br><br>                x=<span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(le);<br>                y=i;<br><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;x,y&#125;;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br><br>                <span class="hljs-built_in">map</span>.put(nums[i],i);<br>            &#125;<br><br><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>[]&#123;&#125;;<br></code></pre></td></tr></table></figure><h3 id="454-四数相加-II"><a href="#454-四数相加-II" class="headerlink" title="454. 四数相加 II -  "></a><a href="https://leetcode.cn/problems/4sum-ii/submissions/">454. 四数相加 II -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">将四个数组两两一组，先计算一组的和，然后将该和作为键放入哈希表中，值就是该和出现的次数。然后就是要定义一个计数器，用于记录满足条件的数。</span><br><span class="hljs-comment">然后是在另外两个数组中，求和然后取相反数，然后就该值取找哈希表的值赋值给计数器，循环结束后，计数器得到的和也就是计数器反复累计的和，也就是最终总的个数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br></code></pre></td></tr></table></figure><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs fortran">HashMap&lt;<span class="hljs-keyword">Integer</span>,<span class="hljs-keyword">Integer</span>&gt; map=new HashMap&lt;<span class="hljs-keyword">Integer</span>,<span class="hljs-keyword">Integer</span>&gt;();<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">count</span>=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>=<span class="hljs-number">0</span>;<br> for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;nums1.length;i++)&#123;<br><br>     for(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;nums2.length;j++)&#123;<br><br>         <span class="hljs-built_in">sum</span>=nums1[i]+nums2[j];<br>         map.put(<span class="hljs-built_in">sum</span>,map.getOrDefault(<span class="hljs-built_in">sum</span>,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br><br><br>     &#125;<br> &#125;<br><br> for(<span class="hljs-built_in">int</span> m=<span class="hljs-number">0</span>;m&lt;nums3.length;m++)&#123;<br><br>     for(<span class="hljs-built_in">int</span> n=<span class="hljs-number">0</span>;n&lt;nums4.length;n++)&#123;<br>         <span class="hljs-built_in">sum</span>=nums3[m]+nums4[n];<br><br>         <span class="hljs-keyword">if</span>(map.containsKey(-<span class="hljs-built_in">sum</span>))&#123;<br>            <span class="hljs-built_in">count</span>+= map.get(-<span class="hljs-built_in">sum</span>);<br>         &#125;<br><br>         <br>     &#125;<br> &#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">count</span>;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="**15. 三数之和 -  "></a>**<a href="https://leetcode.cn/problems/3sum/submissions/">15. 三数之和 -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">注意，这里不重复的三元组是三个数完全相同，同时还有不能一个位置的元素用两次</span><br><span class="hljs-comment">先将数组排序，然后使用双指针方，定义三个指针，一个指向开头，用于遍历数组，一个左指针向开头的下一个，</span><br><span class="hljs-comment">而右指针指向数组的末尾。只要三个指针的和大于0，就移动右指针，小于0，就移动做指针，相等就将数组添加进数组.</span><br><span class="hljs-comment">注意这里要分别对三个数进行去重，只要出现过，就要跳过，也就是指针指针移动。</span><br><span class="hljs-comment">只要排完序后的某个位置的数大于0,后面的数也都不可能出现等于0的情况，所以返回之前的结果即可</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs excel">class Solution &#123;<br>    public List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="hljs-built_in">int</span>[] nums) &#123;<br>        /*<br>        思路：<br>        注意，这里不重复的三元组是三个数完全相同，同时还有不能一个位置的元素用两次<br>        先将数组排序，然后使用双指针方，定义三个指针，一个指向开头，用于遍历数组，一个左指针向开头的下一个，而右指针指向数组的末尾。只要三个指针的和大于<span class="hljs-number">0</span>，就移动右指针，小于<span class="hljs-number">0</span>，就移动做指针，相等就将数组添加进数组.<br>        注意这里要分别对三个数进行去重，只要出现过，就要跳过，也就是指针指针移动。<br>        只要排完序后的某个位置的数大于<span class="hljs-number">0</span>,后面的数也都不可能出现等于<span class="hljs-number">0</span>的情况，所以返回之前的结果即可<br>      */<br>        Arrays.sort(nums);  <br>        <br>       <br>        List&lt;List&lt;Integer&gt;&gt; result = new ArrayList&lt;&gt;();<br><br>        for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-built_in">if</span>(nums[i]&gt;<span class="hljs-number">0</span>)&#123;<br>                return result;<br>            &#125;<br>            //对num[i]去重<br>            <span class="hljs-built_in">if</span>(i&gt;<span class="hljs-number">0</span> &amp;&amp; nums[i]==nums[i-<span class="hljs-number">1</span>])&#123;<br>                continue;<br><br>            &#125;<br>            <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=nums.length-<span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=i+<span class="hljs-number">1</span>;<br>            while(<span class="hljs-built_in">left</span>&lt;<span class="hljs-built_in">right</span>)&#123;  <br>                //注意这里的书写,直接写入时要加入上阔号<br>                <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span>=nums[i]+nums[<span class="hljs-built_in">left</span>]+nums[<span class="hljs-built_in">right</span>];<br>                <span class="hljs-built_in">if</span>(<span class="hljs-built_in">sum</span>&gt;<span class="hljs-number">0</span>)&#123;<br>                   <span class="hljs-built_in">right</span>--;<br><br>                &#125;<br>                else <span class="hljs-built_in">if</span>(<span class="hljs-built_in">sum</span>&lt;<span class="hljs-number">0</span>)&#123;<br>                    <span class="hljs-built_in">left</span>++;<br>                &#125;else&#123;<br><br>                    result.add(Arrays.asList(nums[i],nums[<span class="hljs-built_in">left</span>],nums[<span class="hljs-built_in">right</span>]));<br>                    //num[<span class="hljs-built_in">left</span>]和num[<span class="hljs-built_in">right</span>]去重<br>                    while(<span class="hljs-built_in">left</span>&lt;<span class="hljs-built_in">right</span> &amp;&amp; nums[<span class="hljs-built_in">left</span>]==nums[<span class="hljs-built_in">left</span>+<span class="hljs-number">1</span>])&#123;<br>                        <span class="hljs-built_in">left</span>++;<br><br>                    &#125;<br>                    while(<span class="hljs-built_in">left</span>&lt;<span class="hljs-built_in">right</span> &amp;&amp; nums[<span class="hljs-built_in">right</span>]==nums[<span class="hljs-built_in">right</span>-<span class="hljs-number">1</span>])&#123;<br>                        <span class="hljs-built_in">right</span>--;<br>                    &#125;<br>                    <span class="hljs-built_in">left</span>++;<br>                    <span class="hljs-built_in">right</span>--;<br><br><br>                &#125;<br><br>            &#125;<br>        &#125;<br><br><br>        return result;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="18-四数之和"><a href="#18-四数之和" class="headerlink" title="18. 四数之和 -  "></a><a href="https://leetcode.cn/problems/4sum/">18. 四数之和 -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">在三数之和的基础上再嵌套一层循环</span><br><span class="hljs-comment">首先要对数组进行排序Arrays.sort()</span><br><span class="hljs-comment">双指针法：定义两层循环，外层循环从0开始，内层循环在外层循环的下一层开始循环，然后就是左右指针</span><br><span class="hljs-comment">左指针指向内层循环的下一个，右指针指向末尾，只要四个数的和大于目标值，就将左右指针的值向前移动，反之，</span><br><span class="hljs-comment">就移动左指针指向的值，等于就将数组添加进结果集中，然后去重，分别在向中间移动，最后返回结果即可</span><br><span class="hljs-comment">这里依然可以进行剪枝操作，只要前两个数的0且和大于目标值，就意味后面的数没有满足条件地，就直接跳出本次循环</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Solution &#123;<br>    public List&lt;List&lt;Integer&gt;&gt; four<span class="hljs-constructor">Sum(<span class="hljs-params">int</span>[] <span class="hljs-params">nums</span>, <span class="hljs-params">int</span> <span class="hljs-params">target</span>)</span> &#123;<br><br>       <br>        List&lt;List&lt;Integer&gt;&gt; res=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>sort(nums);<br>         <br><br>         <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br><br>             <span class="hljs-comment">//减枝</span><br>             <span class="hljs-keyword">if</span>(nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>&gt;target)&#123;<br>                 break;<br>             &#125;<br><br>             <span class="hljs-comment">//去重</span><br>            <span class="hljs-keyword">if</span>(i&gt;<span class="hljs-number">0</span>&amp;&amp;nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>==nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>-<span class="hljs-number">1</span>]</span>)&#123;<br>                continue;<br>            &#125;<br><br><br><br>             <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j=i+<span class="hljs-number">1</span>;j&lt;nums.length;j++)&#123;<br><br>                 <span class="hljs-comment">//减枝</span><br>                 <span class="hljs-keyword">if</span>(nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>+nums<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>&gt;=<span class="hljs-number">0</span>&amp;&amp;nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>+nums<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>&gt;target)&#123;<br>                     break;<br>                 &#125;<br><br>                 <span class="hljs-comment">//去重</span><br>                 <span class="hljs-keyword">if</span>(j&gt;i+<span class="hljs-number">1</span>&amp;&amp;nums<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>==nums<span class="hljs-literal">[<span class="hljs-identifier">j</span>-<span class="hljs-number">1</span>]</span>)&#123;<br>                     continue;<br>                 &#125;<br>                 <span class="hljs-built_in">int</span> left=j+<span class="hljs-number">1</span>;<br>                 <span class="hljs-built_in">int</span> right=nums.length-<span class="hljs-number">1</span>;<br>                    <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br><br>                        <span class="hljs-built_in">int</span> sum=nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>+nums<span class="hljs-literal">[<span class="hljs-identifier">j</span>]</span>+nums<span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span>+nums<span class="hljs-literal">[<span class="hljs-identifier">right</span>]</span>;<br>                     <span class="hljs-keyword">if</span>(sum&gt;target)&#123;<br>                         right--;<br><br>                     &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(sum&lt;target)&#123;<br>                         left++;<br><br>                     &#125;<span class="hljs-keyword">else</span>&#123;<br>                         res.add(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">nums</span>[<span class="hljs-params">i</span>],<span class="hljs-params">nums</span>[<span class="hljs-params">j</span>],<span class="hljs-params">nums</span>[<span class="hljs-params">left</span>],<span class="hljs-params">nums</span>[<span class="hljs-params">right</span>])</span>);<br><br>                     <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp;nums<span class="hljs-literal">[<span class="hljs-identifier">left</span>]</span>==nums<span class="hljs-literal">[<span class="hljs-identifier">left</span>+<span class="hljs-number">1</span>]</span>)&#123;left++;&#125;<br>                     <span class="hljs-keyword">while</span>(left&lt;right&amp;&amp;nums<span class="hljs-literal">[<span class="hljs-identifier">right</span>]</span>==nums<span class="hljs-literal">[<span class="hljs-identifier">right</span>-<span class="hljs-number">1</span>]</span>)&#123;right--;&#125;<br>                     <br>                     left++;<br>                     right--;<br><br>                 &#125;<br><br>                &#125;<br><br>             &#125;<br>         &#125;<br><br>         return res;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="344-反转字符串"><a href="#344-反转字符串" class="headerlink" title="344. 反转字符串 -  "></a><a href="https://leetcode.cn/problems/reverse-string/submissions/">344. 反转字符串 -  </a></h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs excel">/*<br>      思路：<br>      定义两个指针，左指针指向开头，右指针指向尾部，然后交换这两个位置的数，交换结束后，指针同时向中间靠拢，<br>      只要直到左指针大于右指针就停止循环，然后返回数组即可<br>      <br>       */<br><br>       <span class="hljs-built_in">int</span> l=s.length;<br><br>       <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>       <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=l-<span class="hljs-number">1</span>;<br><br>       while(<span class="hljs-built_in">left</span>&lt;<span class="hljs-built_in">right</span>)&#123;<br>           <span class="hljs-built_in">char</span> temp;<br>          temp=s[<span class="hljs-built_in">left</span>];<br>          s[<span class="hljs-built_in">left</span>]=s[<span class="hljs-built_in">right</span>];<br>          s[<span class="hljs-built_in">right</span>]=temp;<br><br>          <span class="hljs-built_in">left</span>++;<br>          <span class="hljs-built_in">right</span>--;<br>           <br><br>       &#125;<br><br>   <br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs excel">/* <br>位运算交换*/<br><br>   <span class="hljs-built_in">int</span> l=s.length;<br><br>   <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>   <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=l-<span class="hljs-number">1</span>;<br><br>   while(<span class="hljs-built_in">left</span>&lt;<span class="hljs-built_in">right</span>)&#123;<br>      s[<span class="hljs-built_in">left</span>]^=s[<span class="hljs-built_in">right</span>];<br>      s[<span class="hljs-built_in">right</span>]^=s[<span class="hljs-built_in">left</span>];<br>      s[<span class="hljs-built_in">left</span>]^=s[<span class="hljs-built_in">right</span>];<br><br>      <span class="hljs-built_in">left</span>++;<br>      <span class="hljs-built_in">right</span>--;<br>       <br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="541-反转字符串-II"><a href="#541-反转字符串-II" class="headerlink" title="541. 反转字符串 II -  "></a><a href="https://leetcode.cn/problems/reverse-string-ii/submissions/">541. 反转字符串 II -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">     思路：</span><br><span class="hljs-comment">     需注意，这里是每计数2k个字符，所以这里的固定区间就是2k,也就可以使用for循环</span><br><span class="hljs-comment">     这里只需要对每个2k区间的字符进行分析即可，对应的是两种情况</span><br><span class="hljs-comment">     第一种情况是：剩余字符大于k但小于2k,所以一次起始下标加上k就小于l,这里要处理的就是反转前k个字符</span><br><span class="hljs-comment">     第二种情况是：剩余字符小于k，所以最后一次起始下标加上k就大于l,全部交换</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">     */</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>    <span class="hljs-type">int</span> l=s.length();<br>    <span class="hljs-type">char</span>[] c=s.toCharArray();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;l;i=i+<span class="hljs-number">2</span>*k)&#123;<br>        <span class="hljs-keyword">if</span>(i+k&lt;=l)&#123;<br><br>            reverse(c,i,i+k<span class="hljs-number">-1</span>);<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            reverse(c,i,l<span class="hljs-number">-1</span>);<br><br>        &#125;<br><br><br>    &#125;<br>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> String(c);<br><br>&#125;<br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> reverse(<span class="hljs-type">char</span>[] s,<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right)&#123;<br><br>    <br>     <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>         <span class="hljs-type">char</span> <span class="hljs-keyword">temp</span>;<br>        <span class="hljs-keyword">temp</span>=s[left];<br>        s[left]=s[right];<br>        s[right]=<span class="hljs-keyword">temp</span>;<br><br>        left++;<br>        right<span class="hljs-comment">--;</span><br>         <br><br>     &#125;<br></code></pre></td></tr></table></figure><h3 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格 -  "></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/submissions/">剑指 Offer 05. 替换空格 -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">一个空格变成三个字符的过程中，增加了两个字符的长度，所以在进行字符替换前，先要对空格进行计数，</span><br><span class="hljs-comment">计算出要增加的长度</span><br><span class="hljs-comment">难点：将字符串变成增加长度的字符数组，</span><br><span class="hljs-comment">方法：先定义一个数组，长度为计算后的新增加长度，然后再把值赋给新数组</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">双指针法：定义两个指针，一个左指针，一个右指针，左指针指向新数组中源字符长度的位置，</span><br><span class="hljs-comment">而右指针指向新数组的末尾，</span><br><span class="hljs-comment">只要左指针遇到的不是空格，就将该值传递给右指针，遇到空格后，右指针给前面的位置一次赋值0,2,%,</span><br><span class="hljs-comment">然后左指针向前移动，</span><br><span class="hljs-comment">由此循环，直到，右边指针遇到左指针</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs haxe">char[] c=s.toCharArray();<br>int l=s.length();<br>int count=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span>(s == <span class="hljs-literal">null</span> || s.length() == <span class="hljs-number">0</span>)&#123;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;l;i++)&#123;<br>    <span class="hljs-keyword">if</span>(s.charAt(i)==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>        count++;<br>    &#125;<br>&#125;<br>int len=l+count*<span class="hljs-number">2</span>;<br><br>char[] <span class="hljs-keyword">new</span><span class="hljs-type">s</span>=<span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[len];<br><span class="hljs-keyword">for</span>(int j=<span class="hljs-number">0</span>;j&lt;l;j++)&#123;<br>    <span class="hljs-keyword">new</span><span class="hljs-type">s</span>[j]=c[j];<br>&#125;<br>int left=l<span class="hljs-number">-1</span>;<br>int right=len<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(left&lt;right)&#123;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">new</span><span class="hljs-type">s</span>[left]!=<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br>        <span class="hljs-keyword">new</span><span class="hljs-type">s</span>[right]=<span class="hljs-keyword">new</span><span class="hljs-type">s</span>[left];<br>        <br><br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><br>        <span class="hljs-keyword">new</span><span class="hljs-type">s</span>[right]=<span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">new</span><span class="hljs-type">s</span>[right<span class="hljs-number">-1</span>]=<span class="hljs-string">&#x27;2&#x27;</span>;<br>        <span class="hljs-keyword">new</span><span class="hljs-type">s</span>[right<span class="hljs-number">-2</span>]=<span class="hljs-string">&#x27;%&#x27;</span>;<br>        right-=<span class="hljs-number">2</span>;<br>    &#125;<br>    left--;<br>    right--;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-type">String</span>(<span class="hljs-keyword">new</span><span class="hljs-type">s</span>);<br><br><br></code></pre></td></tr></table></figure><h3 id="151-反转字符串中的单词"><a href="#151-反转字符串中的单词" class="headerlink" title="**151. 反转字符串中的单词 -  "></a>**<a href="https://leetcode.cn/problems/reverse-words-in-a-string/submissions/">151. 反转字符串中的单词 -  </a></h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/* 思路一：</span><br><span class="hljs-comment">        将单词以空格分割，然后再倒序连接字符串即可</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-comment">//去除字符串开头和末尾的空白字符</span><br>        s=s.trim<span class="hljs-literal">()</span>;<br><br>        <span class="hljs-comment">//分割字符串，连续匹配多个空白字</span><br>        List&lt;String&gt; lists=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">s</span>.<span class="hljs-params">split</span>(<span class="hljs-string">&quot;\\s+&quot;</span>)</span>);<br><br>        <span class="hljs-comment">//反转字符</span><br>        <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collections</span>.</span></span>reverse(lists);<br><br>        <span class="hljs-comment">//拼接字符</span><br>        return <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">String</span>.</span></span>join(<span class="hljs-string">&quot; &quot;</span>,lists);<br></code></pre></td></tr></table></figure><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">      一共分为三个步奏：先将多余的空格给移除，然后反转整个字符串，最后反转每个单词。</span><br><span class="hljs-comment">      空格的移除可以使用快慢指针，快指针用于寻找不是空格的，慢指针指向空格，然后将快指针的值赋值给慢指针的值</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      */</span><br></code></pre></td></tr></table></figure><h3 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串 -  "></a><a href="https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/submissions/">剑指 Offer 58 - II. 左旋转字符串 -  </a></h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> <span class="hljs-title">reverseLeftWords</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br><br>        <span class="hljs-comment">/* </span><br><span class="hljs-comment">        思路一：利用额外开辟空间，先去除两个要旋转的字串，然后倒序追加到容器中即可</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">int</span> l=s.<span class="hljs-built_in">length</span>();<br>        <span class="hljs-keyword">String</span> s1=s.<span class="hljs-built_in">substring</span>(<span class="hljs-number">0</span>,n);<br>        <span class="hljs-keyword">String</span> s2=s.<span class="hljs-built_in">substring</span>(n,l);<br><br>        StringBuffer buf=<span class="hljs-keyword">new</span> <span class="hljs-built_in">StringBuffer</span>();<br><br>        buf.<span class="hljs-built_in">append</span>(s2);<br>        buf.<span class="hljs-built_in">append</span>(s1);<br><br>        <span class="hljs-keyword">return</span> buf.<span class="hljs-built_in">toString</span>();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs excel">public String reverseLeftWords(String s, <span class="hljs-built_in">int</span> <span class="hljs-built_in">n</span>) &#123;<br><br>      /* <br>      思路二：<br>      不适用额外的空间，只是在原字符串上进行操作，<br>      先部分，后整体<br>      先将前后两部分的字符分别反转，然后再将整个字符串反转即可得到  =<br>      <br>      <br>      */<br>      <span class="hljs-built_in">int</span> l=s.length();<br>      <span class="hljs-built_in">char</span>[] c=s.toCharArray();<br>      reverses(c,<span class="hljs-number">0</span>,<span class="hljs-built_in">n</span>-<span class="hljs-number">1</span>);<br>      reverses(c,<span class="hljs-built_in">n</span>,l-<span class="hljs-number">1</span>);<br>      reverses(c,<span class="hljs-number">0</span>,l-<span class="hljs-number">1</span>);<br><br>      return new String(c);<br><br><br>      <br>  &#125;<br><br>  public void reverses(<span class="hljs-built_in">char</span>[] s ,<span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>,<span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>)&#123;<br>      <span class="hljs-built_in">char</span> temp;<br>      while(<span class="hljs-built_in">left</span>&lt;=<span class="hljs-built_in">right</span>)&#123;<br>          temp=s[<span class="hljs-built_in">left</span>];<br>          s[<span class="hljs-built_in">left</span>]=s[<span class="hljs-built_in">right</span>];<br>          s[<span class="hljs-built_in">right</span>]=temp;<br>          <span class="hljs-built_in">left</span>++;<br>          <span class="hljs-built_in">right</span>--;<br>        <br>      &#125;<br><br>  &#125;<br></code></pre></td></tr></table></figure><h3 id="28-找出字符串中第一个匹配项的下标"><a href="#28-找出字符串中第一个匹配项的下标" class="headerlink" title="28. 找出字符串中第一个匹配项的下标 -  "></a><a href="https://leetcode.cn/problems/find-the-index-of-the-first-occurrence-in-a-string/">28. 找出字符串中第一个匹配项的下标 -  </a></h3><p>解法一：</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路一：利用语言特性indexOf</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-function"><span class="hljs-keyword">return</span> haystack.<span class="hljs-title">indexOf</span><span class="hljs-params">(needle)</span></span>;<br></code></pre></td></tr></table></figure><p>解法二：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/*思路二：</span><br><span class="hljs-comment">       取长字符串中长度和段字符相等的进行计较，相等，就返回下标</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-type">int</span> h=haystack.length();<br>        <span class="hljs-type">int</span> n=needle.length();<br>        <span class="hljs-keyword">if</span>(haystack.equals(needle))&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(h&lt;n)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;=h-n;i++)&#123;<br>            String s=haystack.substring(i,i+n);<br>            <span class="hljs-keyword">if</span>(s.equals(needle))&#123;<br>                <span class="hljs-keyword">return</span> i;<br>            &#125;<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br><br></code></pre></td></tr></table></figure><p>解法三：</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-built_in">int</span> str<span class="hljs-constructor">Str(String <span class="hljs-params">haystack</span>, String <span class="hljs-params">needle</span>)</span> &#123;<br>    <br>  <span class="hljs-comment">/*KMP思想的实现：</span><br><span class="hljs-comment">  先要用一个next数组用于存储出现不匹配字符时，字符再一次匹配的位置，减少了每次都要从头开始匹配的次数。</span><br><span class="hljs-comment">  思想是。先遍历整个匹配字符串，求出每个字符前的最长匹配前后字符串。定义两个指针，左指针从0开始，右指针从1开始，只要前后指针不相等，就将左指针 的值赋值为next中左指针前一个位置的值，只要左右指针相等，就移动左指针，然后将左指针付给右指针代表的值。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  然后就是利用next素组进行遍字符串，思想与next类似，遍历整个字符串，也定义两个指针，左右指针都从0开始,只要左右指针代表的值不相等，就经左指针的值回滚到next数组中的左指针的前一个位置代表的指针，只要相等，就移动左指针，当左指针指匹配字符串的末尾时，就代表匹配完成，然后返回的起始坐标是左指针减去匹配的字符串的长度</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">   */</span>   <br>  <span class="hljs-keyword">if</span>(needle.length<span class="hljs-literal">()</span>==<span class="hljs-number">0</span>)&#123;<br>      return <span class="hljs-number">0</span>;<br>  &#125;<br>   <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> next=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-identifier">needle</span>.<span class="hljs-identifier">length</span>()]</span>;<br>   next(needle,next);<br>   <span class="hljs-built_in">int</span> left=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> right=<span class="hljs-number">0</span>;right&lt;haystack.length<span class="hljs-literal">()</span>;right++)&#123;<br>       <span class="hljs-keyword">while</span>(left&gt;<span class="hljs-number">0</span>&amp;&amp;haystack.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>!=needle.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>)&#123;<br>           left=next<span class="hljs-literal">[<span class="hljs-identifier">left</span>-<span class="hljs-number">1</span>]</span>;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(haystack.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>==needle.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>)&#123;<br>           left++;<br>       &#125;<br>       <span class="hljs-keyword">if</span>(left==needle.length<span class="hljs-literal">()</span>)&#123;<br>           return (right-needle.length<span class="hljs-literal">()</span>+<span class="hljs-number">1</span>);<br>       &#125;<br><br>   &#125;<br>   return -<span class="hljs-number">1</span>; <br>  &#125;<br><br>  public void next( String needle,<span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr)&#123;<br>      <span class="hljs-built_in">int</span> left=<span class="hljs-number">0</span>;<br>      arr<span class="hljs-literal">[<span class="hljs-number">0</span>]</span>=<span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> right=<span class="hljs-number">1</span>;right&lt;needle.length<span class="hljs-literal">()</span>;right++)&#123;<br>          <span class="hljs-keyword">while</span>(left&gt;<span class="hljs-number">0</span>&amp;&amp;needle.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>!=needle.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>)&#123;<br>              left=arr<span class="hljs-literal">[<span class="hljs-identifier">left</span>-<span class="hljs-number">1</span>]</span>;<br>          &#125;<br>          <span class="hljs-keyword">if</span>(needle.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>==needle.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>)&#123;<br><br>              left++;<br>          &#125;<br>         arr<span class="hljs-literal">[<span class="hljs-identifier">right</span>]</span>=left;<br><br>      &#125;<br><br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/repeated-substring-pattern/submissions/">459. 重复的子字符串 -  </a></p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-comment">/*</span><br><span class="hljs-comment">       移动匹配：将原字符串拼接为原来的两倍长，然后掐头去尾，然后在判断新字符串中是否包含原来的字符串，</span><br><span class="hljs-comment">       如果包含就说明原字符串是多次重复拼接而成的，反之则不是</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>        StringBuffer buf=<span class="hljs-built_in">new</span> StringBuffer();<br>        buf.<span class="hljs-built_in">append</span>(s);<br>        buf.<span class="hljs-built_in">append</span>(s);<br>        buf.<span class="hljs-built_in">delete</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>        buf.<span class="hljs-built_in">delete</span>(buf.<span class="hljs-built_in">length</span>()-<span class="hljs-number">1</span>,buf.<span class="hljs-built_in">length</span>());<br>       <span class="hljs-keyword">if</span>(buf.indexOf(s)&gt;-<span class="hljs-number">1</span>)&#123;<br>           <span class="hljs-built_in">return</span> <span class="hljs-literal">true</span>;<br><br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-built_in">return</span> <span class="hljs-literal">false</span>;<br>       &#125;<br><br></code></pre></td></tr></table></figure><p>方法二</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">/* <br>当一个字符串是由重复字符串构成的，那他的长度一定可以被数组长度与最长前后缀的长度的差整除<br>KMP算法：先要计算出<span class="hljs-keyword">next</span>数组，一样的定义两个指针指针，左指针从<span class="hljs-number">0</span>开始，右指针从<span class="hljs-number">1</span>开始，遍历整个数组，<br>当数组的左右指针的值不相等时，就将<span class="hljs-keyword">next</span>数组中的左指针前一个指针指向的值赋值给左指针，<br>只要左右指针的值相等，就移动左指针，然后将左指针赋值给<span class="hljs-keyword">next</span>数组中的右指针的值。<br>只要最后<span class="hljs-keyword">next</span>数组长度的前一个值不为<span class="hljs-number">0</span>,且他的长度可以被长度与最长前后缀长度的差整除，就代表它可以是重复的，<br>反之则不是重复的<br><br>*/<br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">  public boolean repeated<span class="hljs-constructor">SubstringPattern(String <span class="hljs-params">s</span>)</span> &#123;<br>  <br>        <span class="hljs-built_in">int</span> len=s.length<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">if</span>(len==<span class="hljs-number">0</span>)&#123;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br><br>        <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> next=<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span><span class="hljs-literal">[<span class="hljs-identifier">len</span>]</span>;<br>        next<span class="hljs-constructor">Int(<span class="hljs-params">s</span>,<span class="hljs-params">next</span>)</span>;<br>        <span class="hljs-keyword">if</span>(next<span class="hljs-literal">[<span class="hljs-identifier">len</span>-<span class="hljs-number">1</span>]</span>!=<span class="hljs-number">0</span><span class="hljs-operator"> &amp;&amp; </span>len%(len-(next<span class="hljs-literal">[<span class="hljs-identifier">len</span>-<span class="hljs-number">1</span>]</span>))==<span class="hljs-number">0</span>)&#123;<br>            return <span class="hljs-literal">true</span>;<br>        &#125;<br><br>        return <span class="hljs-literal">false</span>;<br><br><br>       <br><br>&#125;<br><br>public void next<span class="hljs-constructor">Int(String <span class="hljs-params">s</span>,<span class="hljs-params">int</span>[] <span class="hljs-params">next</span>)</span>&#123;<br><br>    <span class="hljs-built_in">int</span> left=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> right=<span class="hljs-number">1</span>;right&lt;s.length<span class="hljs-literal">()</span>;right++)&#123;<br><br>        <span class="hljs-keyword">while</span>(left&gt;<span class="hljs-number">0</span>&amp;&amp;s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>!=s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>)&#123;<br>            left=next<span class="hljs-literal">[<span class="hljs-identifier">left</span>-<span class="hljs-number">1</span>]</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>==s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>)&#123;<br>            left++;<br>        &#125;<br>        next<span class="hljs-literal">[<span class="hljs-identifier">right</span>]</span>=left;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="双指针-1"><a href="#双指针-1" class="headerlink" title="双指针"></a>双指针</h2><h3 id="27-移除元素"><a href="#27-移除元素" class="headerlink" title="27. 移除元素 -  "></a><a href="https://leetcode.cn/problems/remove-element/submissions/">27. 移除元素 -  </a></h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs excel">/*<br>       快慢指针法：定义两个指针，一个慢指针，一个快指针，快指针用于寻找不是要删除的元素，慢指针用于更新数组。<br>       遍历真个数组，只要快指针指向的值不等于要删除的值，就将快指针指向的值赋值给满指针的值，然后移动慢指针，。<br>       最后返回慢指针即可<br>       <br>       <br>        */<br><br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>        for(<span class="hljs-built_in">int</span> fast=<span class="hljs-number">0</span>;fast&lt;nums.length;fast++)&#123;<br>            <span class="hljs-built_in">if</span>(nums[fast]!=val)&#123;<br>                nums[<span class="hljs-built_in">left</span>]=nums[fast];<br>                <span class="hljs-built_in">left</span>++;<br>            &#125;<br><br>        &#125;<br>        return <span class="hljs-built_in">left</span>;<br></code></pre></td></tr></table></figure><h3 id="26-删除有序数组中的重复项"><a href="#26-删除有序数组中的重复项" class="headerlink" title="26. 删除有序数组中的重复项 -  "></a><a href="https://leetcode.cn/problems/remove-duplicates-from-sorted-array/submissions/">26. 删除有序数组中的重复项 -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">       快慢指针法：定义两个指针，一个慢指针，一个快指针，慢指针用于更新数组，快指针用于找不重复的元素，然后直到快指针遍历到</span><br><span class="hljs-comment">       数组末尾，就返回慢指针的后一个即可，即去重后的数组长度.这里需要注意的是，每次都要先移动后赋值，为了避免多次覆盖同一个元素。</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       */</span><br></code></pre></td></tr></table></figure><h3 id="283-移动零-题解"><a href="#283-移动零-题解" class="headerlink" title="283. 移动零 题解 -  "></a><a href="https://leetcode.cn/problems/move-zeroes/solution/">283. 移动零 题解 -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">       双指针：</span><br><span class="hljs-comment">       快慢指针法：定义两个指针，一个慢指针，一个快指针，慢指针用于更新数组，快指针用于寻找不是0的元素，</span><br><span class="hljs-comment">       然后与慢指针进行</span><br><span class="hljs-comment">       交换，即可，直到快指针达到结尾</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       */</span><br><br></code></pre></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">int <span class="hljs-attribute">slow</span>=0;<br><br><span class="hljs-keyword">for</span>(int <span class="hljs-attribute">fast</span>=0;fast&lt;nums.length;fast++)&#123;<br>    <span class="hljs-keyword">if</span>(nums[fast]!=0)&#123;<br>        int <span class="hljs-attribute">temp</span>=nums[fast];<br>        nums[fast]=nums[slow];<br>        nums[slow]=temp;<br>        slow++;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/backspace-string-compare/">844. 比较含退格的字符串 -  </a></p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs ada">/* <br> 思路：<br> 定义一个大循环，用于整体遍历两个数组，先遍历一个字符串，从后往看看哪些字符不被删除，<br> 遇到不被删除的字符就跳出，然后就去遍历另外一个字符串，也是寻找不删除的字符，<br> 然后比较这两个不被删除的字符，只要指针都大于<span class="hljs-number">0</span>且字符不相等，就直接返回<span class="hljs-literal">false</span>,只有其中一个大于<span class="hljs-number">0</span>，<br> 也返回<span class="hljs-literal">false</span>,然后移动两个指针，大循环借宿结束后，就可以返回<span class="hljs-literal">true</span>.<br>    <br> <br> <br> <br> */<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/squares-of-a-sorted-array/submissions/">977. 有序数组的平方 -  </a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs excel"> /*思路：<br>        定义一个和原数组长度一致的数组，用于记录平方后的排序结果，还有一个指针，这个指针指向末尾，用于存放元素组平方后较大的数。然后就是定义两个指针，一个左指针指向原数组的开头，一个右指针指向数组的结尾，然后进行循环比较这个两个指针平方后的值，只要<br>然后就把大的值赋给新数组，然后在移动这个指针和新数组的指针<br><br>        <br>         */<br><br>         <span class="hljs-built_in">int</span> <span class="hljs-built_in">len</span>=nums.length;<br>         <span class="hljs-built_in">int</span>[] res=new <span class="hljs-built_in">int</span>[<span class="hljs-built_in">len</span>];<br>         <span class="hljs-built_in">int</span> p=<span class="hljs-built_in">len</span>-<span class="hljs-number">1</span>;<br><br>         <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>         <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=<span class="hljs-built_in">len</span>-<span class="hljs-number">1</span>;<br>        <br>         while(<span class="hljs-built_in">left</span>&lt;=<span class="hljs-built_in">right</span>)&#123;<br>            <span class="hljs-built_in">if</span>(nums[<span class="hljs-built_in">left</span>]*nums[<span class="hljs-built_in">left</span>]&gt;nums[<span class="hljs-built_in">right</span>]*nums[<span class="hljs-built_in">right</span>])&#123;<br>                res[p]=nums[<span class="hljs-built_in">left</span>]*nums[<span class="hljs-built_in">left</span>];<br>                p--;<br>                <span class="hljs-built_in">left</span>++;<br>            &#125;else&#123;<br>                res[p]=nums[<span class="hljs-built_in">right</span>]*nums[<span class="hljs-built_in">right</span>];<br>                p--;<br>                <span class="hljs-built_in">right</span>--;<br>            &#125;<br><br><br><br>         &#125;<br><br>         return res; <br></code></pre></td></tr></table></figure><h3 id="344-反转字符串-1"><a href="#344-反转字符串-1" class="headerlink" title="344. 反转字符串 -  "></a><a href="https://leetcode.cn/problems/reverse-string/submissions/">344. 反转字符串 -  </a></h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs excel">/* <br>        思路：使用两个指针，一个指针指向开头，一个指针指向末尾，然后开始交换两个指针代表的元素，<br>        直到右指针的小于左指针就结束循环。<br>        */<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=s.length-<span class="hljs-number">1</span>;<br>        <br>        while(<span class="hljs-built_in">left</span>&lt;<span class="hljs-built_in">right</span>)&#123;<br>            <span class="hljs-built_in">char</span> temp=s[<span class="hljs-built_in">right</span>];<br>            s[<span class="hljs-built_in">right</span>]=s[<span class="hljs-built_in">left</span>];<br>            s[<span class="hljs-built_in">left</span>]=temp;<br><br>            <span class="hljs-built_in">left</span>++;<br>            <span class="hljs-built_in">right</span>--;<br><br>        &#125;<br></code></pre></td></tr></table></figure><h3 id="剑指-Offer-05-替换空格-1"><a href="#剑指-Offer-05-替换空格-1" class="headerlink" title="剑指 Offer 05. 替换空格 -  "></a><a href="https://leetcode.cn/problems/ti-huan-kong-ge-lcof/submissions/">剑指 Offer 05. 替换空格 -  </a></h3><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs excel">/*<br>       思路：先遍历整个数组，计算空格的数量，然后申请一个新长度的数组，用于存储最终的结果。<br>       先将之前的字符串的部分映射到数组中，然后定义两个指针，一个左指针指向字符串的末尾，一个字符串指向新数组的末尾，<br>       然后左指针用于寻找不是空格的字符，然后将左指针的字符赋值给右指针，然后在移动右指针。<br>       如果遇到的是空格，就需要依次给右指针赋值<span class="hljs-number">02%</span>的字符，然后右指针移动三个·<br>       直到左指针指向开头，就结束，返回字符串<br>       <br>        */<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">count</span>=<span class="hljs-number">0</span>;<br>        for(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;s.length();i++)&#123;<br>            <span class="hljs-built_in">if</span>(s.charAt(i)==&#x27; &#x27;)&#123;<br>               <span class="hljs-built_in">count</span>++;<br>            &#125;<br><br>        &#125;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">len</span>=s.length()+<span class="hljs-built_in">count</span>*<span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">char</span>[] res=new <span class="hljs-built_in">char</span>[<span class="hljs-built_in">len</span>];<br>        for(<span class="hljs-built_in">int</span> j=<span class="hljs-number">0</span>;j&lt;s.length();j++)&#123;<br>            res[j]=s.charAt(j);<br><br><br>        &#125;<br><br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">left</span>=s.length()-<span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">right</span>=<span class="hljs-built_in">len</span>-<span class="hljs-number">1</span>;<br><br>        while(<span class="hljs-built_in">left</span>&gt;=<span class="hljs-number">0</span>)&#123;<br><br>            <span class="hljs-built_in">if</span>(res[<span class="hljs-built_in">left</span>]!=&#x27; &#x27;)&#123;<br>                res[<span class="hljs-built_in">right</span>]=res[<span class="hljs-built_in">left</span>];<br>                <span class="hljs-built_in">right</span>--;<br>                <span class="hljs-built_in">left</span>--;<br><br><br>            &#125;else&#123;<br>               res[<span class="hljs-built_in">right</span>]=&#x27;<span class="hljs-number">0</span>&#x27;;<br>               res[<span class="hljs-built_in">right</span>-<span class="hljs-number">1</span>]=&#x27;<span class="hljs-number">2</span>&#x27;;<br>               res[<span class="hljs-built_in">right</span>-<span class="hljs-number">2</span>]=&#x27;%&#x27;;<br><br>               <span class="hljs-built_in">right</span>=<span class="hljs-built_in">right</span>-<span class="hljs-number">3</span>;<br>               <span class="hljs-built_in">left</span>--;<br>            &#125;<br>        &#125;<br>        return new String(res);<br><br></code></pre></td></tr></table></figure><h3 id="151-反转字符串中的单词-1"><a href="#151-反转字符串中的单词-1" class="headerlink" title="151. 反转字符串中的单词 -  "></a><a href="https://leetcode.cn/problems/reverse-words-in-a-string/">151. 反转字符串中的单词 -  </a></h3><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">整体思路：先反转整个字符串，然后反转每个单词。</span><br><span class="hljs-comment">细节问题：空格的去除，分为两边的空格和中间多余的空格。</span><br><span class="hljs-comment">需要一个容器</span><br><span class="hljs-comment">难点：中间多余空格的去除，目的是保留一个空格，只要从原字符中取出的字符不为空，</span><br><span class="hljs-comment">或则容器中的最后一个位置不为空格即可，因为只要两者都为空格时，才不会满足条件，</span><br><span class="hljs-comment">因为新容器中已经有了新的空格。</span><br><span class="hljs-comment">难点二：取出每个单词进行反转，定义两个指针，只要右指针指向空格，就反转左右指针区间的字符，</span><br><span class="hljs-comment">然后更新左指针为右指针的下一个，也就是空格的下一个，然后右指针在更新为左指针的下一个</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span><br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/* </span><br><span class="hljs-comment">   思想：先去除多余空格，然后再反转整个字符串，然后再反转其中的没一个单词</span><br><span class="hljs-comment">     去除空格分为三个步奏：先去除两端多余的空格，然后再去除单词中的多余空格，使得每个单词之间只有一个空格，</span><br><span class="hljs-comment">     具体方法是，建立一个可变容器，用于存放存放去除多余空格的字符串，然后就是建立两个指针，分别指向原字符串</span><br><span class="hljs-comment">     的头部和尾部，然后进行循环，只要头部指针不小于尾部指针，最先是同时移动首位指针，使得首尾指针指有字符的地方，然后就去</span><br><span class="hljs-comment">     去除中间的多余空格，如果源字符串的字符不为空格或则容器中的末尾不为空格，就将该字符添加到容器中，然后移动头指针</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     反转整个字符串，就是使用双指针即可，</span><br><span class="hljs-comment">     反转每个单词则涉及到找到每个单词区间，这几也是涉及用两个指针，只要右指针为空，就移动边的指针，就反转整个区间的单词，然后就更新</span><br><span class="hljs-comment">     左指针为右指针的前一个，右指针为左指针的下一个</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br><br>   <span class="hljs-comment">//去除空格</span><br>   StringBuilder sb=remove<span class="hljs-constructor">Space(<span class="hljs-params">s</span>)</span>;<br><br>   <span class="hljs-comment">//反转整个字符串</span><br>   reverse<span class="hljs-constructor">String(<span class="hljs-params">sb</span>,0,<span class="hljs-params">sb</span>.<span class="hljs-params">length</span>()</span>-<span class="hljs-number">1</span>);<br><br><br>     <span class="hljs-comment">//反转每个字符</span><br>     reverse<span class="hljs-constructor">Words(<span class="hljs-params">sb</span>)</span>;<br><br> return <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">sb</span>)</span>;<br><br> &#125;<br><br> public void reverse<span class="hljs-constructor">Words(StringBuilder <span class="hljs-params">sb</span>)</span>&#123;<br>     <span class="hljs-built_in">int</span> left=<span class="hljs-number">0</span>;<br>     <span class="hljs-built_in">int</span> right=<span class="hljs-number">1</span>;<br>     <span class="hljs-keyword">while</span>(left&lt;sb.length<span class="hljs-literal">()</span>)&#123;<br><br>         <span class="hljs-keyword">while</span>(right&lt;sb.length<span class="hljs-literal">()</span>&amp;&amp;sb.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>!=<span class="hljs-character">&#x27; &#x27;</span>)&#123;<br>             right++;<br><br><br>         &#125;<br>         reverse<span class="hljs-constructor">String(<span class="hljs-params">sb</span>,<span class="hljs-params">left</span>,<span class="hljs-params">right</span>-1)</span>;<br><br>         left=right+<span class="hljs-number">1</span>;<br>         right=left+<span class="hljs-number">1</span>;<br><br><br>     &#125;<br><br><br> &#125;<br><br><br> public  void reverse<span class="hljs-constructor">String(StringBuilder <span class="hljs-params">sb</span>,<span class="hljs-params">int</span> <span class="hljs-params">left</span>,<span class="hljs-params">int</span> <span class="hljs-params">right</span>)</span>&#123;<br><br>     <span class="hljs-keyword">while</span>(left&lt;right)&#123;<br>         <span class="hljs-built_in">char</span> temp=sb.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>;<br>         sb.set<span class="hljs-constructor">CharAt(<span class="hljs-params">right</span>,<span class="hljs-params">sb</span>.<span class="hljs-params">charAt</span>(<span class="hljs-params">left</span>)</span>);<br>         sb.set<span class="hljs-constructor">CharAt(<span class="hljs-params">left</span>,<span class="hljs-params">temp</span>)</span>;<br>         left++;<br>         right--;<br><br>     &#125;<br><br><br><br> &#125;<br><br> public StringBuilder remove<span class="hljs-constructor">Space(String <span class="hljs-params">s</span>)</span>&#123;<br><br>     <span class="hljs-built_in">int</span> left=<span class="hljs-number">0</span>;<br>     <span class="hljs-built_in">int</span> right=s.length<span class="hljs-literal">()</span>-<span class="hljs-number">1</span>;<br>     StringBuilder buf=<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>     <span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>==<span class="hljs-character">&#x27; &#x27;</span>)&#123;left++;&#125;<br>     <span class="hljs-keyword">while</span>(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">right</span>)</span>==<span class="hljs-character">&#x27; &#x27;</span>)&#123;right--;&#125;<br>     <span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>         <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>!=<span class="hljs-character">&#x27; &#x27;</span><span class="hljs-pattern-match"><span class="hljs-operator">||</span>buf.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">buf</span>.<span class="hljs-params">length</span>()</span>-1)!=&#x27; &#x27;)&#123;</span><br><span class="hljs-pattern-match">             buf.append(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">left</span>)</span>);</span><br><span class="hljs-pattern-match">         &#125;</span><br><span class="hljs-pattern-match">         left<span class="hljs-operator">++</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">     &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">     return buf;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"> &#125;</span><br><span class="hljs-pattern-match"></span><br></code></pre></td></tr></table></figure><h3 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206. 反转链表 -  "></a><a href="https://leetcode.cn/problems/reverse-linked-list/">206. 反转链表 -  </a></h3><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs coq">/* <br>      双指针法：定义两个指针，一个左指针，一个右指针，然后进行 循环，只要右指针指向不为空，就交换这个指针，进行反转<br>      <br>      */<br>      ListNode <span class="hljs-built_in">left</span>=null;<br>      ListNode <span class="hljs-built_in">right</span>=head;<br>      while(<span class="hljs-built_in">right</span>!=null)&#123;<br>          ListNode temp=<span class="hljs-built_in">right</span>.next;<br>          <span class="hljs-built_in">right</span>.next=<span class="hljs-built_in">left</span>;<br>          <span class="hljs-built_in">left</span>=<span class="hljs-built_in">right</span>;<br>          <span class="hljs-built_in">right</span>=temp;<br><br>      &#125;<br><br>      <span class="hljs-keyword">return</span> <span class="hljs-built_in">left</span>;<br><br><br></code></pre></td></tr></table></figure><h3 id="24-两两交换链表中的节点"><a href="#24-两两交换链表中的节点" class="headerlink" title="24. 两两交换链表中的节点 -  "></a><a href="https://leetcode.cn/problems/swap-nodes-in-pairs/submissions/">24. 两两交换链表中的节点 -  </a></h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> ListNode swapPairs(ListNode head) &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里需要定义一个虚拟头结点，指向头结点，然后在定义一个指针，指向虚拟头结点。这里将四个看成一组，带上头结点，这四个结点两两交换</span><br><span class="hljs-comment">        涉三个步奏，</span><br><span class="hljs-comment">        第一步让指针指向第二个结点：直接让指针的的下一个指向下下个</span><br><span class="hljs-comment">        第二部让第二个结点指向第一个结点：需要一个中间变量，存储下一个指针，然后将下下个指针指向中间变量</span><br><span class="hljs-comment">        第三步第一个结点指向三个结点：也需要一个中间变量，用于存储下下下个结点，然后将下下下个指向中间变量</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        指针移动到下下个。</span><br><span class="hljs-comment">        返回虚拟头结点的下一个</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br><br>         ListNode base=<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">-1</span>);<br>         base.<span class="hljs-keyword">next</span>=head;<br>         ListNode cur=base;<br><br>         <span class="hljs-keyword">while</span>(cur.<span class="hljs-keyword">next</span>!=<span class="hljs-literal">null</span>&amp;&amp;cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>!=<span class="hljs-literal">null</span>)<br>         &#123;<br>             <span class="hljs-comment">//定义临时指针</span><br>             ListNode temp1=cur.<span class="hljs-keyword">next</span>;<br>             ListNode temp2=cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br><br>             <span class="hljs-comment">//第一步</span><br>             cur.<span class="hljs-keyword">next</span>=cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br>             <span class="hljs-comment">//第二部</span><br>             cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>=temp1;<br>             <span class="hljs-comment">//第三步</span><br>            cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>=temp2;<br><br>            <span class="hljs-comment">//移动指针</span><br>            cur=cur.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br><br>         &#125;<br>         <span class="hljs-keyword">return</span> base.<span class="hljs-keyword">next</span>;<br><br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="19-删除链表的倒数第-N-个结点"><a href="#19-删除链表的倒数第-N-个结点" class="headerlink" title="19. 删除链表的倒数第 N 个结点 "></a><a href="https://leetcode.cn/problems/remove-nth-node-from-end-of-list/submissions/">19. 删除链表的倒数第 N 个结点 </a></h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">/* </span><br><span class="hljs-comment">   思想：双指针，一个左指针，一个右指针，先让右指针走n+1步,</span><br><span class="hljs-comment">   y为了让右节点为空时，左指针刚好指向删除结点的前一。</span><br><span class="hljs-comment">   然后左右指针一起走，直到右指针为空，</span><br><span class="hljs-comment">   此时的左指针位置就是要删除结点的前一个，</span><br><span class="hljs-comment">   然后直接让这个指针指向下下个即可，</span><br><span class="hljs-comment">   为了避免头结点的删除问题，还是设置虚拟头结点</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   */</span><br>   ListNode base=<span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">-1</span>);<br>   base.<span class="hljs-keyword">next</span>=head;<br>   ListNode left=base;<br>   ListNode right=base;<br><br>   <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;=n;i++)&#123;<br>       <span class="hljs-keyword">if</span>(right==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">break</span>;<br>       &#125;<br><br>       right=right.<span class="hljs-keyword">next</span>;<br>   &#125;<br><br>   <span class="hljs-keyword">while</span>(right!=<span class="hljs-literal">null</span>)&#123;<br>       left=left.<span class="hljs-keyword">next</span>;<br>       right=right.<span class="hljs-keyword">next</span>;<br>   &#125;<br><br>   left.<span class="hljs-keyword">next</span>=left.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br><br>   <span class="hljs-keyword">return</span> base.<span class="hljs-keyword">next</span>;<br><br><br></code></pre></td></tr></table></figure><h3 id="面试题-02-07-链表相交-力扣（LeetCode）"><a href="#面试题-02-07-链表相交-力扣（LeetCode）" class="headerlink" title="面试题 02.07. 链表相交 - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/intersection-of-two-linked-lists-lcci/submissions/">面试题 02.07. 链表相交 - 力扣（LeetCode）</a></h3><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">/*</span><br><span class="hljs-comment">    先求出两个链表的长度，然后取出这两个链表长度的差值，求出差值的目的是，让链表长的先走，</span><br><span class="hljs-comment">    使得两个链表的距离交叉结点的距离一致，然后这两个链表的指针一起移动，</span><br><span class="hljs-comment">    当这个两个指针指向同一个结点时就输出该结点，如果等到两个指针都遍历结束了还没有找到，</span><br><span class="hljs-comment">    说明就没有相交的结点</span><br><span class="hljs-comment">     */</span><br>    <br>    <span class="hljs-keyword">int</span> lenA=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> lenB=<span class="hljs-number">0</span>;<br>    ListNode a=headA;<br>    ListNode b=headB;<br><br>    <span class="hljs-keyword">while</span>(a!=<span class="hljs-keyword">null</span>)&#123;<br>        lenA++;<br>        a=a.<span class="hljs-keyword">next</span>;<br><br>    &#125;<br>    <span class="hljs-keyword">while</span>(b!=<span class="hljs-keyword">null</span>)&#123;<br>        lenB++;<br>        b=b.<span class="hljs-keyword">next</span>;<br><br>    &#125;<br><br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">size</span>=lenA&gt;lenB?(lenA-lenB):(lenB-lenA);<br>    ListNode pointA=headA;<br>    ListNode pointB=headB;<br>    <span class="hljs-keyword">if</span>(lenA&gt;lenB)&#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-keyword">size</span>&gt;<span class="hljs-number">0</span>)&#123;<br>            pointA=pointA.<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">size</span>--;<br><br><br>        &#125;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>         <span class="hljs-keyword">while</span>(<span class="hljs-keyword">size</span>&gt;<span class="hljs-number">0</span>)&#123;<br>            pointB=pointB.<span class="hljs-keyword">next</span>;<br>            <span class="hljs-keyword">size</span>--;<br><br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(pointA!=<span class="hljs-keyword">null</span>&amp;&amp;pointB!=<span class="hljs-keyword">null</span>)&#123;<br>        <span class="hljs-keyword">if</span>(pointA==pointB)&#123;<br>            <span class="hljs-keyword">return</span> pointB;<br>        &#125;<br>         pointA=pointA.<span class="hljs-keyword">next</span>;<br>         pointB=pointB.<span class="hljs-keyword">next</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br>   <br><br></code></pre></td></tr></table></figure><h3 id="142-环形链表-II-力扣（LeetCode）"><a href="#142-环形链表-II-力扣（LeetCode）" class="headerlink" title="142. 环形链表 II - 力扣（LeetCode）"></a><a href="https://leetcode.cn/problems/linked-list-cycle-ii/submissions/">142. 环形链表 II - 力扣（LeetCode）</a></h3><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> ListNode detectCycle(ListNode head) &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        使用快慢指针，快指针一次走两步，慢指针一次走一步，只要存在环，快慢指针就会在环中相遇，如果不存存在环，</span><br><span class="hljs-comment">        就一定会指向为空，快指针先移动，慢指针后移动，快慢指针相遇后，然后就是寻找入环结点，这里再定义两个结点，</span><br><span class="hljs-comment">        一个指向开头，一个指向相遇的结点，只要不相等就一直移动。注意：空结点和单个结点无环形成返回空</span><br><span class="hljs-comment">然后返回相遇的结点即可</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br>        ListNode slow=head;<br>        ListNode fast=head;<br><br>        <span class="hljs-comment">//判断有没有环</span><br>        <span class="hljs-keyword">while</span>(fast!=<span class="hljs-literal">null</span>&amp;&amp; fast.<span class="hljs-keyword">next</span>!=<span class="hljs-literal">null</span>)&#123;<br>            fast=fast.<span class="hljs-keyword">next</span>.<span class="hljs-keyword">next</span>;<br>            slow=slow.<span class="hljs-keyword">next</span>;<br><br>            <span class="hljs-keyword">if</span>(fast==slow)&#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <br>        &#125;<br><br>        <span class="hljs-comment">//单独结点和空结点,无环,返回</span><br>        <span class="hljs-keyword">if</span>(fast==<span class="hljs-literal">null</span> || fast.<span class="hljs-keyword">next</span>==<span class="hljs-literal">null</span>)&#123;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//寻找环的入口</span><br>        ListNode index1=head;<br>        ListNode index2=fast;<br><br>        <span class="hljs-keyword">while</span>(index1!=index2)&#123;<br>            index1=index1.<span class="hljs-keyword">next</span>;<br>            index2=index2.<span class="hljs-keyword">next</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> index1;<br><br><br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="栈与队列"><a href="#栈与队列" class="headerlink" title="栈与队列"></a>栈与队列</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>栈是先进后出，添加与删除只能再栈顶进行，也就是说只在一端进行操作</p><p>队列是先进先出，删除只能在队尾进行，添加只能在队首进行</p><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/submissions/">232. 用栈实现队列 - 力扣（LeetCode）</a></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs perl">/*<br>思路：利用两个栈，分别记录队列的入栈操作与出栈记录。<br>因为栈是只在一段进行添加与删除，所以是先进后出，为了实现队列先进先出的规律，<br>需要先将入栈的栈顶弹出记录到出栈记录中，<br>然后出栈从栈顶弹出，相当于经过了一次反转，使得原本先进后出的栈变成了先进先出的队列。<br>每一次只要出栈记录中的元素为空，<br>经要将在入栈记录中的元素全部转移到出栈中，目的是保证队列的出栈顺序。<br><span class="hljs-keyword">push</span>就直接放入即可，<span class="hljs-keyword">pop</span>要判断出栈是否为空，不为空就直接将元素弹出即可，为空就要写入入栈的所有元素。<br>当出栈与入栈同时为空时，就表明队列为空了<br>注意：为空的要单独封装<br> */<br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span> </span>&#123;<br><br><br>        Stack&lt;Integer&gt; stackIn;<br>        Stack&lt;Integer&gt; stackOut;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-title">MyQueue</span>(<span class="hljs-params"></span>)</span> &#123;<br>        stackIn=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        stackOut=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>        <br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">push</span>(<span class="hljs-params">int x</span>)</span> &#123;<br>        stackIn.push(x);<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">pop</span>(<span class="hljs-params"></span>)</span> &#123;<br>        stackpush();<br>        <span class="hljs-keyword">return</span> stackOut.pop();<br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">peek</span>(<span class="hljs-params"></span>)</span> &#123;<br>        <br>        stackpush();<br>        <span class="hljs-keyword">return</span> stackOut.peek();<br><br><br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">empty</span>(<span class="hljs-params"></span>)</span> &#123;<br><br>        <span class="hljs-keyword">return</span> stackIn.isEmpty()&amp;&amp;stackOut.isEmpty();<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">stackpush</span>(<span class="hljs-params"></span>)</span>&#123;<br>         <span class="hljs-keyword">if</span>(!stackOut.isEmpty())&#123;<span class="hljs-keyword">return</span>;&#125;<br>        <span class="hljs-keyword">while</span>(!stackIn.isEmpty())&#123;<br>            stackOut.push(stackIn.pop());<br>        &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/implement-stack-using-queues/submissions/">225. 用队列实现栈 - 力扣（LeetCode）</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">   出栈操作只需要将栈顶的元素弹出即可，而入栈需要反转顺序，为了实现后入先出的效果，</span><br><span class="hljs-comment">   需要用一个队列存储对应的栈顶前面的元素，因为栈顶先出队列，也就是最先压入栈顶的元素最先出栈。</span><br><span class="hljs-comment">   当队列为空的时就将存储的元素赋值给该队列，继续上一次的操作，即保留栈顶，然后出栈。</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">    */</span><br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">Queue&lt;Integer&gt; queue1;<br>Queue&lt;Integer&gt; queue2;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MyStack</span><span class="hljs-params">()</span> </span>&#123;<br>    queue1=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br>    queue2=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-comment">//元素放在辅助存储中</span><br>    queue2.offer(x);<br>    <span class="hljs-keyword">while</span>(!queue1.isEmpty())&#123;<br>        queue2.offer(queue1.poll());<br>    &#125;<br>    <span class="hljs-comment">//将辅助队列赋值给源队列,并且将辅助数组置为空</span><br>    Queue&lt;Integer&gt; queueTemp;<br>    queueTemp=queue1;<br>    queue1=queue2;<br>    queue2=queueTemp;<br><br>    <br><br><br>&#125;<br><span class="hljs-comment">//弹出栈顶</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> queue1.<span class="hljs-title">poll</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><span class="hljs-comment">//返回队尾</span><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> queue1.<span class="hljs-title">peek</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">return</span> queue1.<span class="hljs-title">isEmpty</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/valid-parentheses/submissions/">20. 有效的括号 - 力扣（LeetCode）</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  思想：</span><br><span class="hljs-comment">  使用栈的数据结构；先进后出，</span><br><span class="hljs-comment">  匹配不成功的三种情况：</span><br><span class="hljs-comment">  字符的个数为奇数的一定不能完全匹配。</span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">  遍历最后的字符后，栈中还有元素，代表左边有多余的字符</span><br><span class="hljs-comment">  还没遍历完字符串，栈中就为空了，代表右边就为空了</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  遍历字符串，将字符中的左边部分放入栈中，当后面的右边部分字符与栈顶的元素匹配时，就将栈顶弹出，</span><br><span class="hljs-comment">  不相等就代表匹配失败。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">  </span><br><span class="hljs-comment">   */</span><br><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isValid</span><span class="hljs-params">(<span class="hljs-keyword">String</span> s)</span> </span>&#123;<br><br>  <br>         <span class="hljs-keyword">int</span> size=s.<span class="hljs-built_in">length</span>();<br><br>         <span class="hljs-comment">//字符个数为奇数匹配失败</span><br>         <span class="hljs-keyword">if</span>(size%<span class="hljs-number">2</span>!=<span class="hljs-number">0</span>)&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>         &#125;<br><br>         Stack&lt;Character&gt; stack=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<br><br>         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br><br>             <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">charAt</span>(i)==<span class="hljs-string">&#x27;(&#x27;</span>)&#123;<br>                 stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;)&#x27;</span>);<br><br>             &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">charAt</span>(i)==<span class="hljs-string">&#x27;&#123;&#x27;</span>)&#123;<br>                 stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;&#125;&#x27;</span>);<br><br><br>             &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s.<span class="hljs-built_in">charAt</span>(i)==<span class="hljs-string">&#x27;[&#x27;</span>)&#123;<br>                 stack.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;]&#x27;</span>);<br><br>            <span class="hljs-comment">//匹配左括号不匹配或测栈提前为空</span><br>             &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(stack.<span class="hljs-built_in">empty</span>()||stack.<span class="hljs-built_in">peek</span>()!=s.<span class="hljs-built_in">charAt</span>(i))&#123;<br><br>                     <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>               <br>                 <br>            <span class="hljs-comment">//匹配成功，就将栈顶符号弹出</span><br>             &#125;<span class="hljs-keyword">else</span>&#123;<br>                 stack.<span class="hljs-built_in">pop</span>();<br><br>             &#125;<br><br><br>         &#125;<br><br>         <span class="hljs-comment">//遍历结束栈为空就代表匹配成功，反之则不成功</span><br><br>         <span class="hljs-keyword">return</span> stack.<span class="hljs-built_in">empty</span>();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/submissions/">1047. 删除字符串中的所有相邻重复项 </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">      思路：利用栈的先进后出的思想，和匹配口号的问题相似。先将元素放入栈中，以后后面的字符与栈顶不相等，</span><br><span class="hljs-comment">      就继续将元素放入</span><br><span class="hljs-comment">      栈中，只要相等，就弹出栈顶，且不将该字符插入到栈中，遍历结束后，将栈中元素返回即可</span><br><span class="hljs-comment">      最后注意：栈中弹出的元素时倒序的，需要反序才能得到正确答案</span><br><span class="hljs-comment">       */</span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-keyword">class</span> Solution &#123;<br>    public String remove<span class="hljs-constructor">Duplicates(String <span class="hljs-params">s</span>)</span> &#123;<br><br>      <br><br>         Stack&lt;Character&gt; statck=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Stack()</span>;<br><br>         <span class="hljs-built_in">int</span> size=s.length<span class="hljs-literal">()</span>;<br><br>         <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br><br><br>             <span class="hljs-keyword">if</span>(statck.empty<span class="hljs-literal">()</span><span class="hljs-pattern-match"><span class="hljs-operator">||</span>statck.peek()!=s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>)&#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">                statck.push(s.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>);</span><br><span class="hljs-pattern-match">             &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">                statck.pop();</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">             &#125;</span><br><span class="hljs-pattern-match">         &#125;</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">StringBuilder</span> sb=<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;</span><br><span class="hljs-pattern-match">         <span class="hljs-keyword">while</span>(!statck.empty())&#123;</span><br><span class="hljs-pattern-match">             sb.append(statck.pop());</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">         &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    </span><br><span class="hljs-pattern-match">        sb.reverse();</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">         return <span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">sb</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match">&#125;</span><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/evaluate-reverse-polish-notation/submissions/">150. 逆波兰表达式求值 - 力扣（LeetCode）</a></p><p> /*<br>        定义一个栈：<br>        将字符数组的压入栈中，遇到数字就压入栈顶，遇到运算符号就进把栈尾的两个数进行运算然后压入栈中，<br>        直到循环结束<br>        返回栈顶元素。注意运算的时候的顺序是前面的在前，后面的在后，也就是先出来的在后面</p><p>Integer.valueOf 转换字符为数字</p><p> */</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><br>Stack&lt;Integer&gt; stack=<span class="hljs-built_in">new</span> Stack();<br>int size=<span class="hljs-built_in">tokens</span>.<span class="hljs-built_in">length</span>;<br>int result=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(int i=<span class="hljs-number">0</span>;i&lt;size;i++)&#123;<br><br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">tokens</span>[i].equals(<span class="hljs-string">&quot;+&quot;</span>))&#123;<br>        result=stack.<span class="hljs-built_in">pop</span>();<br>        result+=stack.<span class="hljs-built_in">pop</span>();<br>        stack.<span class="hljs-built_in">push</span>(result);<br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">tokens</span>[i].equals(<span class="hljs-string">&quot;-&quot;</span>))&#123;<br>        result=stack.<span class="hljs-built_in">pop</span>();<br>        result=stack.<span class="hljs-built_in">pop</span>()-result;<br>        stack.<span class="hljs-built_in">push</span>(result);<br><br><br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">tokens</span>[i].equals(<span class="hljs-string">&quot;*&quot;</span>))&#123;<br>        result=stack.<span class="hljs-built_in">pop</span>();<br>        result=stack.<span class="hljs-built_in">pop</span>()*result;<br>        stack.<span class="hljs-built_in">push</span>(result);<br><br>        <br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(<span class="hljs-built_in">tokens</span>[i].equals(<span class="hljs-string">&quot;/&quot;</span>))&#123;<br>        result=stack.<span class="hljs-built_in">pop</span>();<br>        result=stack.<span class="hljs-built_in">pop</span>()/result;<br>        stack.<span class="hljs-built_in">push</span>(result);<br><br>        <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        stack.<span class="hljs-built_in">push</span>(Integer.valueOf(<span class="hljs-built_in">tokens</span>[i]));<br><br>    &#125;<br><br><br>&#125;<br><span class="hljs-built_in">return</span> stack.<span class="hljs-built_in">pop</span>();<br><br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/sliding-window-maximum/submissions/">239. 滑动窗口最大值 - 力扣（LeetCode）</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">     利用队列的用于取出窗口内的最大值，队列内保持从大到小的顺序，这样方便每一移动一次窗口，</span><br><span class="hljs-comment">     就可以从队列中取得窗口中的最大值。</span><br><span class="hljs-comment">     自定义一个队列，实现如下功能：</span><br><span class="hljs-comment">     保持队列从大到小的方法：每次将窗口内的新增的值放入时，判断是否大于队列头部的值，</span><br><span class="hljs-comment">     如果大于，就弹出队列头部的值，直到队列头部大于该值。</span><br><span class="hljs-comment">     如果移动窗口出去的值和队列中的尾部的值相同，就移除尾部。</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">      */</span><br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] <span class="hljs-built_in">maxSlidingWindow</span>(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k) &#123;<br><br>     <br>         <span class="hljs-keyword">if</span>(nums.length==<span class="hljs-number">1</span>)&#123;<br>             <span class="hljs-keyword">return</span> nums;<br>         &#125;<br><br>         <span class="hljs-comment">//定义返回结果的数组长度</span><br>         <span class="hljs-keyword">int</span> len=nums.length-k+<span class="hljs-number">1</span>;<br>         <span class="hljs-keyword">int</span>[] res=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len];<br>         <span class="hljs-keyword">int</span> num=<span class="hljs-number">0</span>;<span class="hljs-comment">//用于记录存放的结果序号</span><br><br>         <span class="hljs-comment">//定义自定义的单调队列</span><br>         MyQueue que=<span class="hljs-keyword">new</span> <span class="hljs-built_in">MyQueue</span>();<br><br>         <span class="hljs-comment">//才开始的时候，先将k个元素放入栈中</span><br>         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>             que.<span class="hljs-built_in">add</span>(nums[i]);<br>         &#125;<br>        res[num++]=que.<span class="hljs-built_in">peek</span>();<br><br>         <span class="hljs-comment">//开始移动窗口，</span><br><br>         <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=k;j&lt;nums.length;j++)&#123;<br>             <span class="hljs-comment">//判断队尾元素是否该移除</span><br>             que.<span class="hljs-built_in">poll</span>(nums[j-k]);<br>             <span class="hljs-comment">//放入新的值</span><br>             que.<span class="hljs-built_in">add</span>(nums[j]);<br><br>             <span class="hljs-comment">//返回队列尾部的最大值</span><br>             res[num++]=que.<span class="hljs-built_in">peek</span>();<br>         &#125;<br><br>         <span class="hljs-keyword">return</span> res;<br>        <br><br><br><br><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyQueue</span>&#123;</span><br>        <span class="hljs-comment">//双端队列，队头和队尾都可以插入和删除</span><br><br>       Deque&lt;Integer&gt; deque=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>       <span class="hljs-comment">//模拟弹出队尾元素，当窗口弹出值和队列尾部值相等时</span><br>       <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">poll</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>           <span class="hljs-keyword">if</span>(!deque.<span class="hljs-built_in">isEmpty</span>()&amp;&amp;val==deque.<span class="hljs-built_in">peek</span>())&#123;<br>               deque.<span class="hljs-built_in">poll</span>();<br>           &#125;<br>       &#125;<br>        <span class="hljs-comment">//模拟实现，添加功能，需要判断添加的元素和队列头部的值，如果大于就移除头部的值，直到头部的值大于等于添加的值,然后添加该值</span><br>        <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>            <span class="hljs-keyword">while</span>(!deque.<span class="hljs-built_in">isEmpty</span>()&amp;&amp;val&gt;deque.<span class="hljs-built_in">getLast</span>())&#123;<br>                deque.<span class="hljs-built_in">removeLast</span>();<br>            &#125;<br>            deque.<span class="hljs-built_in">add</span>(val);<br>        &#125;<br>        <span class="hljs-comment">//取出队尾的最大值</span><br>        <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>&#123;<br>            <span class="hljs-keyword">return</span> deque.<span class="hljs-built_in">peek</span>();<br>        &#125;<br><br>    <br><br>      <br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/top-k-frequent-elements/submissions/">347. 前 K 个高频元素 - 力扣（LeetCode）</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*先利用hashmap去记录数组中字符出现的次数，然后将map的键值关系放入到一个优先级队列中</span><br><span class="hljs-comment">      （按照值从小到到大排序），如果队列中的元素个数大于了K,就直接弹出队尾元素，</span><br><span class="hljs-comment">      最后倒序取出值放入到数组中返回即可</span><br><span class="hljs-comment">       */</span><br></code></pre></td></tr></table></figure><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs lasso">  <br><br>    <span class="hljs-built_in">Map</span>&lt;<span class="hljs-built_in">Integer</span>,<span class="hljs-built_in">Integer</span>&gt; <span class="hljs-built_in">map</span>=<span class="hljs-literal">new</span> HashMap&lt;&gt;();<br>    for(<span class="hljs-built_in">Integer</span> num:nums)&#123;<br>        <span class="hljs-built_in">map</span>.put(num,<span class="hljs-built_in">map</span>.getOrDefault(num,<span class="hljs-number">0</span>)+<span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-comment">//建立优先级队列，并重写比较器</span><br>    PriorityQueue&lt;<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">Integer</span>,<span class="hljs-built_in">Integer</span>&gt;&gt; pq=<span class="hljs-literal">new</span> PriorityQueue&lt;&gt;((entry1,entry2)-&gt;&#123;<br>        <span class="hljs-comment">//按map照键值对中的值进行排序</span><br>        <span class="hljs-keyword">return</span> entry1.getValue().compareTo(entry2.getValue());<br>    &#125;);<br><br>    <span class="hljs-comment">//建立迭代器,entry键值关系</span><br>    for(<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">Integer</span>,<span class="hljs-built_in">Integer</span>&gt; entry:<span class="hljs-built_in">map</span>.entrySet())&#123;<br><br>        pq.add(entry);<br><br>        <span class="hljs-keyword">if</span>(pq.size()&gt;k)&#123;<br>            pq.poll();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">//倒序遍历出结果</span><br>    int<span class="hljs-meta">[</span><span class="hljs-meta">]</span> res=new int<span class="hljs-meta">[</span>k<span class="hljs-meta">]</span>;<br>    for(int i=k-1;i&gt;=0;i--)&#123;<br>        res<span class="hljs-meta">[</span>i<span class="hljs-meta">]</span>=pq.poll().getKey();<br>    &#125;<br><br>    return res;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/sliding-window-maximum/submissions/">239. 滑动窗口最大值 - 力扣（LeetCode）</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> &#123;</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] <span class="hljs-built_in">maxSlidingWindow</span>(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> k) &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里需要自己定义一个队列，用于实现对应的单调队列的操作 add,poll,peek</span><br><span class="hljs-comment">        利用队列的用于取出窗口内的最大值，队列内保持从大到小的顺序，这样方便每一移动一次窗口，</span><br><span class="hljs-comment">        就可以从队列中取得窗口中的最大值。</span><br><span class="hljs-comment">        保持队列从大到小的方法：每次将窗口内的新增的值放入时，判断是否大于队列头部的值，如果大于，</span><br><span class="hljs-comment">        就弹出队列头部的值，直到队列头部大于该值。</span><br><span class="hljs-comment">        如果移动窗口出去的值和队列中的尾部的值相同，就移除尾部。</span><br><span class="hljs-comment">        当数组只有一个元素时，就代表他就是最大值</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br><br>        <span class="hljs-keyword">if</span>(nums.length==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> nums;<br>        &#125;<br><br>         myque que=<span class="hljs-keyword">new</span> <span class="hljs-built_in">myque</span>();<br><br>         <span class="hljs-comment">//定义返回数组</span><br>         <span class="hljs-keyword">int</span> len=nums.length-k+<span class="hljs-number">1</span>;<br>         <span class="hljs-keyword">int</span>[] res=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[len];<br>         <span class="hljs-keyword">int</span> count=<span class="hljs-number">0</span>;<br><br>         <span class="hljs-comment">//先将前k个元素放进队列中</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;k;i++)&#123;<br>            que.<span class="hljs-built_in">add</span>(nums[i]);<br>        &#125;<br>        res[count++]=que.<span class="hljs-built_in">peek</span>();<br><br>        <span class="hljs-comment">//开始移动窗口</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=k;j&lt;nums.length;j++)&#123;<br>            <br>            que.<span class="hljs-built_in">poll</span>(nums[j-k]);<br>            que.<span class="hljs-built_in">add</span>(nums[j]);<br>            <br><br>            res[count++]=que.<span class="hljs-built_in">peek</span>();<br><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br><br><br><br><br>        <br>    &#125;   <br><br>      <br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myque</span>&#123;</span><br>    Deque&lt;Integer&gt; deque=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        <span class="hljs-keyword">while</span>(!deque.<span class="hljs-built_in">isEmpty</span>()&amp;&amp;val&gt;deque.<span class="hljs-built_in">getLast</span>())<br>        &#123;<br><br>            deque.<span class="hljs-built_in">removeLast</span>();<br>        &#125;<br>        deque.<span class="hljs-built_in">add</span>(val);<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span>  <span class="hljs-title">poll</span><span class="hljs-params">(<span class="hljs-keyword">int</span> val)</span></span>&#123;<br>        <span class="hljs-keyword">if</span>(!deque.<span class="hljs-built_in">isEmpty</span>()&amp;&amp;deque.<span class="hljs-built_in">peek</span>()==val)&#123;<br>            deque.<span class="hljs-built_in">poll</span>();<br>        &#125;<br><br><br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">peek</span><span class="hljs-params">()</span></span>&#123;<br><br>        <span class="hljs-keyword">return</span> deque.<span class="hljs-built_in">peek</span>();<br><br><br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/implement-queue-using-stacks/submissions/">232. 用栈实现队列 - 力扣（LeetCode）</a></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">/* </span><br><span class="hljs-comment">   利用两个栈模拟队列的先进先出，只需要用一个栈表示入栈，一个队列表示出栈即可。队列的删除,当出栈不为空时，直接从出栈中弹出即可 ，当出栈为空时，就要将入栈的元素弹出压出出栈。队列的入队，直接压入入栈即可</span><br><span class="hljs-comment">   </span><br><span class="hljs-comment">   */</span><br>    Stack&lt;Integer&gt; stackIn;<br>    Stack&lt;Integer&gt; stackOut;<br><br>   <span class="hljs-keyword">public</span> MyQueue() &#123;<br>       stackIn=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>       stackOut=<span class="hljs-keyword">new</span> Stack&lt;&gt;();<br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-keyword">push</span>(<span class="hljs-keyword">int</span> x) &#123;<br>       stackIn.<span class="hljs-keyword">push</span>(x);<br><br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">pop</span>() &#123;<br>       <span class="hljs-keyword">if</span>(!stackOut.isEmpty())&#123;<br>         <span class="hljs-keyword">return</span> stackOut.<span class="hljs-keyword">pop</span>();<br><br><br>       &#125;<span class="hljs-keyword">else</span>&#123;<br>           <span class="hljs-keyword">while</span>(!stackIn.isEmpty())&#123;<br>           <span class="hljs-keyword">int</span> nums= stackIn.<span class="hljs-keyword">pop</span>();<br>           stackOut.<span class="hljs-keyword">push</span>(nums);<br><br>           &#125;           <br>       &#125;<br><br>       <span class="hljs-keyword">return</span> stackOut.<span class="hljs-keyword">pop</span>();<br><br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> peek() &#123;<br><br>       <span class="hljs-keyword">if</span>(stackOut.isEmpty())&#123;<br>           <span class="hljs-keyword">while</span>(!stackIn.isEmpty())&#123;<br>           <span class="hljs-keyword">int</span> nums= stackIn.<span class="hljs-keyword">pop</span>();<br>           stackOut.<span class="hljs-keyword">push</span>(nums);<br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">return</span> stackOut.peek();<br><br>   &#125;<br>   <br>   <span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> empty() &#123;<br><br>       <span class="hljs-keyword">if</span>(stackIn.isEmpty()&amp;&amp;stackOut.isEmpty())&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>   &#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树-1"><a href="#二叉树-1" class="headerlink" title="二叉树"></a>二叉树</h2><h4 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h4><p>除了最后一层没有填满，其余层都填满了，最后一层的结点优先从左往右排，如果存在左边没有排满就排右边，就不是完全二叉树</p><h4 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h4><p>只有度数为0和2的结点，0度结点都在同一层上，满足深度为k的慢二叉树，一共就有2的k次方-1个节点</p><h4 id="平衡二叉搜索树"><a href="#平衡二叉搜索树" class="headerlink" title="平衡二叉搜索树"></a>平衡二叉搜索树</h4><p>满足左子树的值小于根节点，右子树的值大于根节点的值，且左右子树的高度差不超过一</p><h4 id="深度优先遍历"><a href="#深度优先遍历" class="headerlink" title="深度优先遍历"></a>深度优先遍历</h4><p>先遍历到叶节点，再往回遍历</p><h4 id="广度优先遍历"><a href="#广度优先遍历" class="headerlink" title="广度优先遍历"></a>广度优先遍历</h4><p>先遍历完一层后，才遍历下一层</p><h4 id="二叉树的存储"><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h4><p>链式存储：使用左右指实现</p><p>数组存储：直接根据数组的下标与节点对应，然后将节点的值存储到数组中</p><h3 id="二叉树的构造"><a href="#二叉树的构造" class="headerlink" title="二叉树的构造"></a>二叉树的构造</h3><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br>    int <span class="hljs-keyword">val</span>;<br>  TreeNode left;<br>  TreeNode right;<br>  TreeNode() &#123;&#125;<br>  TreeNode(int <span class="hljs-keyword">val</span>) &#123; <span class="hljs-keyword">this</span>.<span class="hljs-keyword">val</span> = <span class="hljs-keyword">val</span>; &#125;<br>  TreeNode(int <span class="hljs-keyword">val</span>, TreeNode left, TreeNode right) &#123;<br>    <span class="hljs-keyword">this</span>.<span class="hljs-keyword">val</span> = <span class="hljs-keyword">val</span>;<br>    <span class="hljs-keyword">this</span>.left = left;<br>    <span class="hljs-keyword">this</span>.right = right;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="递归写法-1"><a href="#递归写法-1" class="headerlink" title="递归写法"></a>递归写法</h3><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/submissions/">144. 二叉树的前序遍历 </a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">**<br> * Definition <span class="hljs-keyword">for</span> a binary tree node.<br> * <span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TreeNode</span> </span>&#123;<br> *     int <span class="hljs-keyword">val</span>;<br> *     TreeNode left;<br> *     TreeNode right;<br> *     TreeNode() &#123;&#125;<br> *     TreeNode(int <span class="hljs-keyword">val</span>) &#123; <span class="hljs-keyword">this</span>.<span class="hljs-keyword">val</span> = <span class="hljs-keyword">val</span>; &#125;<br> *     TreeNode(int <span class="hljs-keyword">val</span>, TreeNode left, TreeNode right) &#123;<br> *         <span class="hljs-keyword">this</span>.<span class="hljs-keyword">val</span> = <span class="hljs-keyword">val</span>;<br> *         <span class="hljs-keyword">this</span>.left = left;<br> *         <span class="hljs-keyword">this</span>.right = right;<br> *     &#125;<br> * &#125;<br> */<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; preorderTraversal(TreeNode root) &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        递归法</span><br><span class="hljs-comment">        1.确定传入参数和返回值类型</span><br><span class="hljs-comment">        2.确定终止条件</span><br><span class="hljs-comment">        3.确定单层出来逻辑</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br><br>        List&lt;Integer&gt; res=new ArrayList&lt;Integer&gt;(); <br>        qianxv(root,res);<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">public</span> void qianxv(TreeNode node,List&lt;Integer&gt; res)&#123;<br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        res.add(node.<span class="hljs-keyword">val</span>);<br>        qianxv(node.left,res);<br>        qianxv(node.right,res);<br><br><br>    &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/submissions/">145. 二叉树的后序遍历 </a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> List&lt;<span class="hljs-type">Integer</span>&gt; postorderTraversal(TreeNode root) &#123;<br>        List&lt;<span class="hljs-type">Integer</span>&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;();<br>        houxv(root,res);<br>        <span class="hljs-keyword">return</span> res;<br><br><br><br>    &#125;<br><br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> houxv(TreeNode node,List&lt;<span class="hljs-type">Integer</span>&gt; res)&#123;<br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        houxv(node.left,res);<br>        houxv(node.right,res);<br>        res.<span class="hljs-keyword">add</span>(node.val);<br><br><br><br>    &#125;<br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/submissions/">94. 二叉树的中序遍历</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Definition for a binary tree node.</span><br><span class="hljs-comment"> * public class TreeNode &#123;</span><br><span class="hljs-comment"> *     int val;</span><br><span class="hljs-comment"> *     TreeNode left;</span><br><span class="hljs-comment"> *     TreeNode right;</span><br><span class="hljs-comment"> *     TreeNode() &#123;&#125;</span><br><span class="hljs-comment"> *     TreeNode(int val) &#123; this.val = val; &#125;</span><br><span class="hljs-comment"> *     TreeNode(int val, TreeNode left, TreeNode right) &#123;</span><br><span class="hljs-comment"> *         this.val = val;</span><br><span class="hljs-comment"> *         this.left = left;</span><br><span class="hljs-comment"> *         this.right = right;</span><br><span class="hljs-comment"> *     &#125;</span><br><span class="hljs-comment"> * &#125;</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">class</span> Solution &#123;<br>    <span class="hljs-built_in">public</span> List&lt;<span class="hljs-type">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;<br><br>        List&lt;<span class="hljs-type">Integer</span>&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;();<br>        zhongxv(root,res);<br>        <span class="hljs-keyword">return</span> res;<br><br><br><br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> zhongxv(TreeNode node,List&lt;<span class="hljs-type">Integer</span>&gt; res)&#123;<br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        zhongxv(node.left,res);<br>        res.<span class="hljs-keyword">add</span>(node.val);<br>        zhongxv(node.right,res);<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="迭代写法"><a href="#迭代写法" class="headerlink" title="迭代写法"></a>迭代写法</h3><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/submissions/">144. 二叉树的前序遍历 </a></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; preorderTraversal(TreeNode root) &#123;<br><br>      <span class="hljs-comment">/* </span><br><span class="hljs-comment">      使用栈进行中间存储转换：顺序为中，右，左，出栈之后的顺序就变成了中左右</span><br><span class="hljs-comment">      只要左右结点不为空，就放入 栈中，然后依次弹出栈顶即可,注意空二叉树的情况</span><br><span class="hljs-comment">      */</span><br><br>      <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br>      <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; res=<span class="hljs-literal">new</span> ArrayList&lt;&gt;();<br>      <span class="hljs-keyword">if</span>(root==<span class="hljs-built_in">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> res;<br>      &#125;<br>      <span class="hljs-built_in">stack</span>.push(root);<br><br>      <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">stack</span>.isEmpty())&#123;<br>          <span class="hljs-comment">//弹出栈</span><br>          TreeNode node=<span class="hljs-built_in">stack</span>.pop();<br>          res.add(node.val);<br><br><br>          <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-built_in">null</span>)&#123;<br>              <span class="hljs-built_in">stack</span>.push(node.right);<br>              <br>          &#125;<br>          <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-built_in">null</span>)&#123;<br>               <span class="hljs-built_in">stack</span>.push(node.left);<br><br>          &#125;<br><br>      &#125;<br><br>      <span class="hljs-keyword">return</span> res;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/">94. 二叉树的中序遍历</a></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;<br><br>   <span class="hljs-comment">/*</span><br><span class="hljs-comment">   迭代法：</span><br><span class="hljs-comment">   与前序遍历不同的是，中序遍历访问的节点与处理的节点不是同一个，需要单独进行处理，定义一个指针，</span><br><span class="hljs-comment">   用于判断是否到了叶子节点，</span><br><span class="hljs-comment">   当到了叶子节点时，就需要将栈顶弹出，存放到结果集合中，然后改变指针的指向为右边    </span><br><span class="hljs-comment">    */</span><br><br>    <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; res=<span class="hljs-literal">new</span> ArrayList&lt;&gt;();<br> <span class="hljs-keyword">if</span>(root==<span class="hljs-built_in">null</span>)&#123;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br><br>    TreeNode cur=root;<br><br>    <span class="hljs-keyword">while</span>(cur!=<span class="hljs-built_in">null</span> || !<span class="hljs-built_in">stack</span>.isEmpty())&#123;<br>        <span class="hljs-keyword">if</span>(cur!=<span class="hljs-built_in">null</span>)&#123;<br>            <span class="hljs-built_in">stack</span>.push(cur);<span class="hljs-comment">//左</span><br>            cur=cur.left;<br><br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            cur=<span class="hljs-built_in">stack</span>.pop();<span class="hljs-comment">//要处理的节点</span><br>            res.add(cur.val);<span class="hljs-comment">//中</span><br>            cur=cur.right;<span class="hljs-comment">//右边</span><br><br><br><br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-postorder-traversal/submissions/">145. 二叉树的后序遍历 </a></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; postorderTraversal(TreeNode root) &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       在前序遍历的基础上，修改进入栈的顺序，先左后右，出栈得到中右左，然后再将结果数组反转得到左右中</span><br><span class="hljs-comment">       注意判断数组为空的情况</span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; res=<span class="hljs-literal">new</span> ArrayList&lt;<span class="hljs-built_in">Integer</span>&gt;();<br><br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-built_in">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br><br>        <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br>        <span class="hljs-built_in">stack</span>.push(root);<br>        <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">stack</span>.isEmpty())&#123;<br>           TreeNode node=<span class="hljs-built_in">stack</span>.pop();<span class="hljs-comment">//中</span><br>           res.add(node.val);<br>           <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-built_in">null</span>)&#123;<br>             <span class="hljs-built_in">stack</span>.push(node.left);<span class="hljs-comment">//左</span><br><br>           &#125;<br>           <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-built_in">null</span>)&#123;<br><br>            <span class="hljs-built_in">stack</span>.push(node.right);<span class="hljs-comment">//右</span><br>           &#125;<br>        &#125;<br><br>       Collections.reverse(res);<br><br>        <span class="hljs-keyword">return</span> res;<br><br>   &#125;<br></code></pre></td></tr></table></figure><h3 id="统一写法"><a href="#统一写法" class="headerlink" title="统一写法"></a>统一写法</h3><p><a href="https://www.programmercarl.com/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E7%BB%9F%E4%B8%80%E8%BF%AD%E4%BB%A3%E6%B3%95.html#%E8%BF%AD%E4%BB%A3%E6%B3%95%E5%89%8D%E5%BA%8F%E9%81%8D%E5%8E%86">代码随想录 (programmercarl.com)</a></p><p>有空细看看</p><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal/submissions/">102. 二叉树的层序遍历 - 力扣（LeetCode）</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; levelOrder(TreeNode root) &#123;<br><br>       <span class="hljs-comment">/* </span><br><span class="hljs-comment">       思路:</span><br><span class="hljs-comment">       迭代法：使用队列进行处理遍历得到的元素，先将一层中元素放入到队列中，并计算了该层次结点的元素的个数，</span><br><span class="hljs-comment">       然后 开始遍历，先将队列首部的元素弹出放入到提前定好的数组中，然后将该元素结点的左右子节点放入到数组中，依次循环</span><br><span class="hljs-comment">       进而循环完一层后，就将该层的所有元素都放入到一个数组中，而队列中剩余的元素就是下一层的元素，</span><br><span class="hljs-comment">       然后将该数组添加到结果集合中，然后就开始遍历下一层节点，</span><br><span class="hljs-comment">       等到队列为空，就标识遍历结束，然后返回结果集合即可</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       */</span><br><br>        List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt;();<br><br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br><br>        Queue&lt;TreeNode&gt; que=<span class="hljs-built_in">new</span> LinkedList&lt;TreeNode&gt;();<br><br>        que.<span class="hljs-keyword">add</span>(root);<br><br>        <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>            List&lt;<span class="hljs-type">Integer</span>&gt; list=<span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;();//用于存储一层的元素<br>            <br>            <span class="hljs-type">int</span> len=que.size();//一层的元素个数<br><br>            <span class="hljs-keyword">while</span>(len&gt;<span class="hljs-number">0</span>)&#123;<br>                TreeNode <span class="hljs-keyword">temp</span>=que.poll();//记录下一层的根节点<br>                list.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">temp</span>.val);//将本层的节点放入到一个数组中<br>                //将下一层的结点放入到队列中<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">temp</span>.left!=<span class="hljs-keyword">null</span>)&#123;<br>                    que.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">temp</span>.left);<br>                &#125;<br>                <span class="hljs-keyword">if</span>(<span class="hljs-keyword">temp</span>.right!=<span class="hljs-keyword">null</span>)&#123;<br>                    que.<span class="hljs-keyword">add</span>(<span class="hljs-keyword">temp</span>.right);<br>                &#125;<br>                len<span class="hljs-comment">--;</span><br>            &#125;<br><br>            res.<span class="hljs-keyword">add</span>(list);//放入本层结点数组<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res; <br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-level-order-traversal-ii/submissions/">107. 二叉树的层序遍历 II </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">在层次遍历的基础上，进行反转</span><br><span class="hljs-comment">层次遍历的实现：使用队列处理从树中得到的元素，先将根节点放入队列中，只有队列不为空，就表示层次遍历还没有结束，</span><br><span class="hljs-comment">定义一个数组用于存储同一层的元素，然后计算出当前对列中的节点的个数，然后再进行循环，不断将首部的元素去除并且将</span><br><span class="hljs-comment">该元素的字节点放入到队尾中，然后将该该节点放入到之前定义的数组中，等到该队列中的父类节点循环结束后，所有父类的字</span><br><span class="hljs-comment">节点也都加入到了队列中，然后依次循环，并且每一次循环结束后，都将该数组添加到结果集合中，最后返回结果集合即可</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; levelOrderBottom(TreeNode root) &#123;<br><br><br><br>   List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt;();<br>   <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>       <span class="hljs-keyword">return</span> res;<br>   &#125;<br>   Queue&lt;TreeNode&gt; que=<span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>   que.<span class="hljs-keyword">add</span>(root);<br>   <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>       <span class="hljs-type">int</span> len=que.size();<br>       List&lt;<span class="hljs-type">Integer</span>&gt; list=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br><br><br>       <span class="hljs-keyword">while</span>(len&gt;<span class="hljs-number">0</span>)&#123;<br>           TreeNode node= que.poll();<br>           list.<span class="hljs-keyword">add</span>(node.val);<br>           <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-keyword">null</span>)&#123;<br>               que.<span class="hljs-keyword">add</span>(node.left);<br>           &#125;<br>           <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-keyword">null</span>)&#123;<br>               que.<span class="hljs-keyword">add</span>(node.right);<br>           &#125;<br>           len<span class="hljs-comment">--;</span><br><br>       &#125;<br>       res.<span class="hljs-keyword">add</span>(list);<br><br><br>   &#125;<br><br>   Collections.reverse(res);<br><br>   <span class="hljs-keyword">return</span> res;<br><br><br><br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-right-side-view/submissions/">199. 二叉树的右视图 - 力扣（LeetCode）</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> List&lt;<span class="hljs-type">Integer</span>&gt; rightSideView(TreeNode root) &#123;<br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">     在二叉树层次遍历的基础上，修改进入结果 集合的对象，使得每一层只有最后一个元素才能进入结果。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">     层次遍历：定义一个队列，用于处理遍历得到的二叉树结点，先将父结点放入到结果集合中，在不断去除队列头部的结点值，放入到</span><br><span class="hljs-comment">     结果集中，然后把该结点的左右子结点放入到队列的尾部，每一次遍历完一层就计算长度，这个长度就是下一次遍历的循环次数。</span><br><span class="hljs-comment">     等到队列 为空时，就可以把结果集合返回了</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">      */</span><br><br>       List&lt;<span class="hljs-type">Integer</span>&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;<span class="hljs-type">Integer</span>&gt;();<br>       <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> res;<br>       &#125;<br>       Queue&lt;TreeNode&gt; que=<span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>       que.<span class="hljs-keyword">add</span>(root);<br>       <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>           <span class="hljs-type">int</span> len=que.size();<br><br>           <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;len;i++)&#123;<br>               TreeNode node=que.poll();<br>               <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-keyword">null</span>)&#123;<br>                   que.<span class="hljs-keyword">add</span>(node.left);<br>               &#125;<br>                <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-keyword">null</span>)&#123;<br>                   que.<span class="hljs-keyword">add</span>(node.right);<br>               &#125;<br><br>               <span class="hljs-keyword">if</span>(i==len<span class="hljs-number">-1</span>)&#123;<br>                     res.<span class="hljs-keyword">add</span>(node.val);<br><br>               &#125;<br>           &#125;<br>       <br><br>       &#125;<br>     <span class="hljs-keyword">return</span> res;<br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/invert-binary-tree/submissions/">226. 翻转二叉树 - 力扣（LeetCode）</a>  </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-function"><span class="hljs-title">invertTree</span>(<span class="hljs-params">TreeNode root</span>)</span> &#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        思路：使用递归</span><br><span class="hljs-comment">        三要素：返回值类型和传入参数：结点</span><br><span class="hljs-comment">                循环的终止条件：结点为空就退出</span><br><span class="hljs-comment">                单次循环逻辑：交换根结点左右结点，然后递归左右接点</span><br><span class="hljs-comment">         */</span><br><br>         duigui(root);<br>         <span class="hljs-keyword">return</span> root;<br><br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">duigui</span>(<span class="hljs-params">TreeNode node</span>)</span>&#123;<br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        TreeNode temp;<br>        <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-literal">null</span>||node.right!=<span class="hljs-literal">null</span>)&#123;<br>            temp=node.left;<span class="hljs-comment">//中</span><br>            node.left=node.right;<br>            node.right=temp;<br><br>            duigui(node.left);<span class="hljs-comment">//左</span><br>            duigui(node.right);<span class="hljs-comment">//右</span><br>        &#125;<br>       <br><br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/n-ary-tree-preorder-traversal/">589. N 叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">preorder</span>(<span class="hljs-params">Node root</span>)</span> &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        思路：</span><br><span class="hljs-comment">        递归：</span><br><span class="hljs-comment">        传入参数和返回值类型:结点和结果集</span><br><span class="hljs-comment">        终止条件：结点为空</span><br><span class="hljs-comment">        单次循环逻辑：取出结点的子集，不断进行递归</span><br><span class="hljs-comment">        */</span><br><br>        List&lt;Integer&gt; res=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        res.<span class="hljs-keyword">add</span>(root.val);<span class="hljs-comment">//最先添加头结点</span><br>        duigui(root,res);<br>        <span class="hljs-keyword">return</span> res;<br><br>       <br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">duigui</span>(<span class="hljs-params">Node node,List&lt;Integer&gt; res</span>)</span>&#123;<br><br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>        List&lt;Node&gt; children=node.children;<br>        <span class="hljs-keyword">for</span>(Node child:children)&#123;<br>            res.<span class="hljs-keyword">add</span>(child.val);<br>            duigui(child,res);<br><br>        &#125;<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/n-ary-tree-postorder-traversal/">590. N 叉树的后序遍历 - 力扣（LeetCode）</a></p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title">postorder</span>(<span class="hljs-params">Node root</span>)</span> &#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       思路：递归</span><br><span class="hljs-comment">       返回值类型和传入参数：无返回，传入参数一个结点，一个结果集</span><br><span class="hljs-comment">       终止条件，结点为空</span><br><span class="hljs-comment">       单次逻辑：先遍历子节点，后添加中间元素</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>         List&lt;Integer&gt; res=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>         <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>             <span class="hljs-keyword">return</span> res;<br>         &#125;<br>         dg(root,res);<br>         res.<span class="hljs-keyword">add</span>(root.val);<span class="hljs-comment">//最后添加头结点</span><br>         <span class="hljs-keyword">return</span> res;<br><br><br>       <br>   &#125;<br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">dg</span>(<span class="hljs-params">Node node,List&lt;Integer&gt; res</span>)</span>&#123;<br>       <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> ;<br>       &#125;<br>       <br>       List&lt;Node&gt; children=node.children;<br>       <span class="hljs-keyword">for</span>(Node child:children)&#123;<br>           dg(child,res);<br>           res.<span class="hljs-keyword">add</span>(child.val);<br><br><br>       &#125;<br>       <br>   &#125;<br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-preorder-traversal/submissions/">144. 二叉树的前序遍历 - 力扣（LeetCode）</a></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; preorderTraversal(TreeNode root) &#123;<br><br>     <span class="hljs-comment">/*</span><br><span class="hljs-comment">     迭代法：利用栈处理的遍历得到的元素，先中间结点入栈，然后右结点入栈，然后左节点入栈，等到出栈的时候，就成了中左右的顺序。</span><br><span class="hljs-comment">     </span><br><span class="hljs-comment">      */</span><br>  <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; res=<span class="hljs-literal">new</span> ArrayList&lt;&gt;();<br>  <span class="hljs-keyword">if</span>(root==<span class="hljs-built_in">null</span>)&#123;<br>      <span class="hljs-keyword">return</span> res;<br>  &#125;<br><br>  <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br>  <span class="hljs-built_in">stack</span>.push(root);<br>  <span class="hljs-keyword">while</span>(!<span class="hljs-built_in">stack</span>.isEmpty())&#123;<br>      TreeNode node=<span class="hljs-built_in">stack</span>.pop();<br>      res.add(node.val);<span class="hljs-comment">//中</span><br><br>      <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-built_in">null</span>)&#123;<br>          <span class="hljs-built_in">stack</span>.push(node.right);<span class="hljs-comment">//右</span><br><br>      &#125;<br>      <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-built_in">null</span>)&#123;<br>          <span class="hljs-built_in">stack</span>.push(node.left);<span class="hljs-comment">//左</span><br>      &#125;<br><br>  &#125;<br><br>  <span class="hljs-keyword">return</span> res;<br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-inorder-traversal/submissions/">94. 二叉树的中序遍历 - 力扣（LeetCode）</a></p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-keyword">public</span> <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; inorderTraversal(TreeNode root) &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       迭代法：</span><br><span class="hljs-comment">       在前序遍历的基础上进行改进，这里要增加一个指针，用于判断是否到达叶子节点，不是叶子节点，就将他直接放入栈中，是叶子点，就在弹出栈顶，并 放入结果集合中，并将指针指向右边。</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-built_in">List</span>&lt;<span class="hljs-built_in">Integer</span>&gt; res=<span class="hljs-literal">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">if</span>(root==<span class="hljs-built_in">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> res;<br>        &#125;<br>        <span class="hljs-built_in">Stack</span>&lt;TreeNode&gt; <span class="hljs-built_in">stack</span>=<span class="hljs-literal">new</span> <span class="hljs-built_in">Stack</span>&lt;&gt;();<br>        TreeNode node=root;<br><br>        <span class="hljs-keyword">while</span>(node!=<span class="hljs-built_in">null</span>||!<span class="hljs-built_in">stack</span>.isEmpty())&#123;<br>            <span class="hljs-keyword">if</span>(node!=<span class="hljs-built_in">null</span>)&#123;<br>                <span class="hljs-built_in">stack</span>.push(node);<br>                node=node.left;<br><br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                node=<span class="hljs-built_in">stack</span>.pop();<br>                res.add(node.val);<br>                node=node.right;<br><br><br>            &#125;<br><br>        &#125;<br><br><br>        <span class="hljs-keyword">return</span> res;<br><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/average-of-levels-in-binary-tree/submissions/">637. 二叉树的层平均值 - 力扣（LeetCode）</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> List&lt;<span class="hljs-type">Double</span>&gt; averageOfLevels(TreeNode root) &#123;<br>      <span class="hljs-comment">/* </span><br><span class="hljs-comment">      average</span><br><span class="hljs-comment">      层次遍历：</span><br><span class="hljs-comment">      使用一个队列处理每一层的值，将父节点放入数组中后，计算栈的长度，然后循环从队列的队头部弹出值，将该节点的左右字子节点</span><br><span class="hljs-comment">      放入队列尾部，并将该头部放入一个数组中，等到遍历一层结束，数组中都是一层节点的值，队列中都是下一层的节点，最后将数组放入结果集中，左后返回结果集合即可</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">      */</span><br><br>      List&lt;<span class="hljs-type">Double</span>&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br><br>      <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> res;<br>      &#125;<br><br>      Queue&lt;TreeNode&gt; que=<span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>      que.<span class="hljs-keyword">add</span>(root);<br>      <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br><br>          List&lt;<span class="hljs-type">Integer</span>&gt; list=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>          <span class="hljs-type">int</span> len=que.size();<br><br><br>          <span class="hljs-keyword">while</span>(len&gt;<span class="hljs-number">0</span>)&#123;<br>              TreeNode node=que.poll();<br>              list.<span class="hljs-keyword">add</span>(node.val);<br>              <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-keyword">null</span>)&#123;<br>                  que.<span class="hljs-keyword">add</span>(node.left);<br>              &#125;<br>              <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-keyword">null</span>)&#123;<br>                  que.<span class="hljs-keyword">add</span>(node.right);<br>              &#125;<br>              len<span class="hljs-comment">--;</span><br>          &#125;<br><br>          <span class="hljs-type">Double</span> avg=average(list);<br><br>          res.<span class="hljs-keyword">add</span>(avg);<br>      &#125;<br><br>      <span class="hljs-keyword">return</span> res;<br><br><br><br><br>  &#125;<br><br><br>  <span class="hljs-built_in">public</span> <span class="hljs-type">Double</span> average(List&lt;<span class="hljs-type">Integer</span>&gt; list)&#123;<br><br>      <span class="hljs-type">Double</span> avg=<span class="hljs-number">0.0</span>;<br>      <span class="hljs-type">Double</span> sum=<span class="hljs-number">0.0</span>;<br>      <span class="hljs-type">int</span> len=list.size();<br><br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i:list)&#123;<br>          sum+=i;<br>      &#125;<br><br>      avg=sum/len;<br><br>      <span class="hljs-keyword">return</span> avg;<br><br>  &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/symmetric-tree/submissions/">101. 对称二叉树 </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">    递归法：</span><br><span class="hljs-comment">    返回值类型和传入参数：布尔型，左右子树的节点</span><br><span class="hljs-comment">    循环的终止条件：左右节点不对称(左节点为空，右节点不为空。右节点不为空，左节点为空。左右节点不为空</span><br><span class="hljs-comment">    但不相等)</span><br><span class="hljs-comment">    左右节点都为空</span><br><span class="hljs-comment">    单次循环逻辑：判断左右子树是都对称,左树的遍历顺序为左右中，右子树的遍历顺序是右左中（即内测和内测比</span><br><span class="hljs-comment">    外侧和外侧比）</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSymmetric</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br><br> <br>      <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>      &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">duigui</span><span class="hljs-params">(root.left,root.right)</span></span>;<br><br>  &#125;<br><br>  <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">duigui</span><span class="hljs-params">(TreeNode left,TreeNode right)</span></span>&#123;<br><br>      <span class="hljs-keyword">if</span>(left==<span class="hljs-keyword">null</span>&amp;&amp;right==<span class="hljs-keyword">null</span>)&#123;<br>          <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>      &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(left==<span class="hljs-keyword">null</span>&amp;&amp;right!=<span class="hljs-keyword">null</span>)</span></span>&#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(left!=<span class="hljs-keyword">null</span>&amp;&amp;right==<span class="hljs-keyword">null</span>)</span></span>&#123;<br>              <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>      &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(left.val!=right.val)</span></span>&#123;<br>               <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>      &#125;<br><br>     <span class="hljs-keyword">boolean</span> outFlag=duigui(left.left,right.right);<span class="hljs-comment">//树的外侧</span><br>     <span class="hljs-keyword">boolean</span> inFlag=duigui(left.right,right.left);<span class="hljs-comment">//树的内测</span><br><br>     <span class="hljs-keyword">boolean</span> flag=outFlag&amp;inFlag;<br><br>     <span class="hljs-keyword">return</span> flag;<br><br>      <br>  &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/submissions/">104. 二叉树的最大深度 - 力扣（LeetCode）</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    思路一：层次遍历的结果集合的长度就是深度。</span><br><span class="hljs-comment">    思路二：递归计算各个叶结点，然后将长度存放在结果集合中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    递归三要素：</span><br><span class="hljs-comment">            传入参数和返回值类型</span><br><span class="hljs-comment">            递归的终止条件</span><br><span class="hljs-comment">            单次循环的逻辑</span><br><span class="hljs-comment">*/</span><br><br>List&lt;<span class="hljs-type">Integer</span>&gt; list=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>getlen(root,<span class="hljs-number">0</span>,list);<br><br><span class="hljs-keyword">return</span> Collections.max (list);<br><br>&#125;<br><br><span class="hljs-built_in">public</span> <span class="hljs-type">void</span> getlen(TreeNode node,<span class="hljs-type">int</span> len,List&lt;<span class="hljs-type">Integer</span>&gt; list)&#123;<br><br>    <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>)&#123;<br><br>        list.<span class="hljs-keyword">add</span>(len);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    len++;<br>    getlen(node.left,len,list);<br><br>    getlen(node.right,len,list);<br>&#125;<br></code></pre></td></tr></table></figure><p>解法二</p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       递归法：是由后序遍历的方式，</span><br><span class="hljs-comment">       递归计算出左右子树的深度，返回深度大的加上一，作为返回值</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">getlen</span><span class="hljs-params">(root)</span></span>;<br><br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getlen</span><span class="hljs-params">(TreeNode node)</span></span>&#123;<br>       <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>       &#125;<br><br>       <span class="hljs-keyword">int</span> leftlen=getlen(node.left);<span class="hljs-comment">//左</span><br>       <span class="hljs-keyword">int</span> rightlen=getlen(node.right);<span class="hljs-comment">//右</span><br><br>       <span class="hljs-keyword">int</span> maxlen=<span class="hljs-number">1</span>+Math.max(leftlen,rightlen);<span class="hljs-comment">//中</span><br><br>       <span class="hljs-keyword">return</span> maxlen;<br><br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>max(x1,x2)<span class="hljs-comment">//返回两个数中的最大值</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Collections</span>.</span></span>max<span class="hljs-literal">()</span><span class="hljs-comment">//返回数组中的最大数值</span><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/submissions/">559. N 叉树的最大深度 - 力扣（LeetCode）</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxDepth</span><span class="hljs-params">(Node root)</span> </span>&#123;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        递归法：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        传入参数和返回值类型：传入结点和和返回整数</span><br><span class="hljs-comment">        循环的终止条件：结点为空</span><br><span class="hljs-comment">        单次循环逻辑：取出子节点的最大值 </span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">getlen</span>(root);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getlen</span><span class="hljs-params">(Node node)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span>(node==null)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>        List&lt;Integer&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">int</span> max=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(Node child:node.children)&#123;<br>         <br>            max=Math.<span class="hljs-built_in">max</span>(max,<span class="hljs-built_in">getlen</span>(child));<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max+<span class="hljs-number">1</span>;<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-depth-of-binary-tree/submissions/">111. 二叉树的最小深度 - 力扣（LeetCode）</a></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"> <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">minDepth</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">递归法：</span><br><span class="hljs-comment">这里采用的遍历顺序是，左右中</span><br><span class="hljs-comment">与求最大长度不同，最小深度需要判断左右子树为空的情况，</span><br><span class="hljs-comment">否则就会误以为没有左子树的结点就是叶节点，当一个结点只有右子树，</span><br><span class="hljs-comment">那么长度就等于右子树的深度加上1，如果只有左子树，就左子树的长度加1，</span><br><span class="hljs-comment">然后就是左右子树都不为空的情况，便可以开始递归</span><br><span class="hljs-comment">寻找左右子树中的最小长度，然后加上1，。</span><br><span class="hljs-comment">*/</span><br><br>       <br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">getlen</span><span class="hljs-params">(root)</span></span>;<br><br><br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getlen</span><span class="hljs-params">(TreeNode node)</span></span>&#123;<br>        <span class="hljs-comment">//终止条件</span><br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> left=getlen(node.left);<br>        <span class="hljs-keyword">int</span> right=getlen(node.right);<br><br>        <span class="hljs-comment">//左子树为空的情况</span><br>        <span class="hljs-keyword">if</span>(node.left==<span class="hljs-keyword">null</span>&amp;&amp;node.right!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> right+<span class="hljs-number">1</span>;<br><br>        &#125;<br>        <span class="hljs-comment">//右子树为空的情况</span><br>        <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-keyword">null</span>&amp;&amp;node.right==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> left+<span class="hljs-number">1</span>;<br><br>        &#125;<br><br>      <br><br>        <span class="hljs-comment">//取深度小的</span><br>          <span class="hljs-keyword">int</span> min=<span class="hljs-number">1</span>+Math.min(left,right);<br>        <br>        <span class="hljs-keyword">return</span> min;<br>        <br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/count-complete-tree-nodes/submissions/">222. 完全二叉树的节点个数 - 力扣（LeetCode）</a></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">countNodes</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       基于求最大树的最大深度进行修改，递归的思路是，</span><br><span class="hljs-comment">       返回求出左右子树的结点树，递归的结束条件是，结点为空，就返回0，</span><br><span class="hljs-comment">       然后将左右子树相加，然加上一个根节点的数目进行返回即可。</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">getcount</span><span class="hljs-params">(root)</span></span>;<br><br>   &#125;<br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getcount</span><span class="hljs-params">(TreeNode node)</span></span>&#123;<br><br>       <span class="hljs-keyword">if</span>(node==<span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">int</span> left=getcount(node.left);<br>       <span class="hljs-keyword">int</span> right=getcount(node.right);<br><br>       <span class="hljs-keyword">int</span> count= left+right+<span class="hljs-number">1</span>;<br><br>       <span class="hljs-keyword">return</span> count;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/balanced-binary-tree/submissions/">110. 平衡二叉树</a></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isBalanced</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       在求二叉树的最大深度上进行改进，分别计算 左右子树的最大深度,然后计算左右子树的深度的绝对值差</span><br><span class="hljs-comment">       递归三要素：</span><br><span class="hljs-comment">       传入参数：结点，返回值类型：整形</span><br><span class="hljs-comment">       结束条件：结点为空</span><br><span class="hljs-comment">       单次 循环逻辑：不断递归左右子树，直到遍历到根结点</span><br><span class="hljs-comment">       注意：这里要判断的是二叉树的每个结点的左右子树的高度差的绝对值是否超过1，如果在递归的过程中，就已经存在左右子树</span><br><span class="hljs-comment">       的高度绝对值超过1，就直接返回-1，代表失败，就不用继续递归了</span><br><span class="hljs-comment">        */</span><br>      <span class="hljs-keyword">boolean</span> ans= <span class="hljs-built_in">getlen</span>(root)==<span class="hljs-number">-1</span>?<span class="hljs-literal">false</span>:<span class="hljs-literal">true</span>;<br><br>      <span class="hljs-keyword">return</span> ans;<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getlen</span><span class="hljs-params">(TreeNode node)</span></span>&#123;<br><br>       <span class="hljs-keyword">if</span>(node==null)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>       &#125;<br>       <span class="hljs-keyword">int</span> left=<span class="hljs-built_in">getlen</span>(node.left);<br>       <span class="hljs-keyword">if</span>(left==<span class="hljs-number">-1</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">int</span> right=<span class="hljs-built_in">getlen</span>(node.right);<br>        <span class="hljs-keyword">if</span>(right==<span class="hljs-number">-1</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>       &#125;<br><br>      <span class="hljs-keyword">int</span> res= Math.<span class="hljs-built_in">abs</span>(left-right)&gt;<span class="hljs-number">1</span>?<span class="hljs-number">-1</span>:Math.<span class="hljs-built_in">max</span>(left,right)+<span class="hljs-number">1</span>;<br>     <br><br>       <span class="hljs-keyword">return</span> res;<br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/binary-tree-paths/submissions/">257. 二叉树的所有路径</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  思路：</span><br><span class="hljs-comment">  递归与回溯的结合，</span><br><span class="hljs-comment">  递归三三要素：</span><br><span class="hljs-comment">  传入参数 ：结点值，路径集合，最终结果集合</span><br><span class="hljs-comment">  循环的终止条件：左右结点同时时为空，要进行终止逻辑处理，即把结点处理成特定字符串，然后添加</span><br><span class="hljs-comment">  到结果集合中</span><br><span class="hljs-comment">  单次循逻辑：</span><br><span class="hljs-comment">  先判断左右子节点是否为空，然后进行递归，回溯</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">   */</span><br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> List&lt;String&gt; binaryTreePaths(TreeNode root) &#123;<br><br>  <br>         List&lt;String&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>         <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>             <span class="hljs-keyword">return</span> res;<br>         &#125;<br>        List&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-type">path</span>=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>        <br>         getPath(root,<span class="hljs-type">path</span>,res);<br><br>         <span class="hljs-keyword">return</span> res;<br><br>    &#125;<br><br>    <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> getPath(TreeNode node,List&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-type">path</span>,List&lt;String&gt; res)&#123;<br>        <span class="hljs-type">path</span>.<span class="hljs-keyword">add</span>(node.val);<br><br>        <span class="hljs-keyword">if</span>(node.left==<span class="hljs-keyword">null</span>&amp;&amp;node.right==<span class="hljs-keyword">null</span>)&#123;<br>            String spath=&quot;&quot;;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-type">path</span>.size()<span class="hljs-number">-1</span>;i++)&#123;<br>                spath=spath+<span class="hljs-type">path</span>.<span class="hljs-keyword">get</span>(i);<br>                spath=spath+&quot;-&gt;&quot;;<br>            &#125;<br>            //最后一个结点的添加<br>             spath=spath+<span class="hljs-type">path</span>.<span class="hljs-keyword">get</span>(<span class="hljs-type">path</span>.size()<span class="hljs-number">-1</span>);<br><br>             res.<span class="hljs-keyword">add</span>(spath);<br><br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-keyword">null</span>)&#123;<br>            getPath(node.left,<span class="hljs-type">path</span>,res);//递归<br>            <span class="hljs-type">path</span>.remove(<span class="hljs-type">path</span>.size()<span class="hljs-number">-1</span>);//回溯<br><br>        &#125;<br>        <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-keyword">null</span>)&#123;<br>            getPath(node.right,<span class="hljs-type">path</span>,res);<br>            <span class="hljs-type">path</span>.remove(<span class="hljs-type">path</span>.size()<span class="hljs-number">-1</span>);<br>        &#125;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/same-tree/submissions/">100. 相同的树 </a></p><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(TreeNode p, TreeNode q)</span> </span>&#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        对称的数基础上进行改进，对称树是内测与内测进行比较，外侧与内侧进行比较，</span><br><span class="hljs-comment">        即左子树的左子树和右子树的右子树比较,即左子树的右子树和右子树的左子树比较。</span><br><span class="hljs-comment">        这里是比较两个相同的树，就是比较对应位置的树是否相等，即左子树的左子树和右子树的左子树进行比较，</span><br><span class="hljs-comment">        左子树的右子树和右子树进行比较。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        递归三要素:</span><br><span class="hljs-comment">        返回值类型和传入参数,传入的两个节点，返回值布尔类型</span><br><span class="hljs-comment">        单次循环逻辑：传入左右子节点</span><br><span class="hljs-comment">        终止条件：对应位置的数不相同</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br><br>         <br><br>         <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">isame</span><span class="hljs-params">(p,q)</span></span>;<br><br><br><br>    &#125;<br><br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isame</span><span class="hljs-params">(TreeNode left,TreeNode right)</span></span>&#123;<br><br>        <span class="hljs-keyword">if</span>(left==<span class="hljs-keyword">null</span>&amp;&amp;right==<span class="hljs-keyword">null</span>)&#123;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(left==<span class="hljs-keyword">null</span>&amp;&amp;right!=<span class="hljs-keyword">null</span>)</span></span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(left!=<span class="hljs-keyword">null</span>&amp;&amp;right==<span class="hljs-keyword">null</span>)</span></span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<span class="hljs-function"><span class="hljs-keyword">else</span> <span class="hljs-title">if</span><span class="hljs-params">(left.val!=right.val)</span></span>&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">boolean</span> leftflag=isame(left.left,right.left);<br>        <span class="hljs-keyword">boolean</span> rightflag=isame(left.right,right.right);<br><br>        <span class="hljs-keyword">boolean</span> flag=leftflag&amp;rightflag;<br><br>        <span class="hljs-keyword">return</span> flag;<br><br>    &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/sum-of-left-leaves/submissions/">404. 左叶子之和 </a></p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> sumOfLeftLeaves(TreeNode root) &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        这里重要是的左叶子的判断，左叶子的判断是通过其父结点的左结点不为空而左结点的左右子节点都为空，</span><br><span class="hljs-comment">        然后就把这个结点的值复制给叶子结点。</span><br><span class="hljs-comment">        终止条件:结点为空</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br><br>         <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>             <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>         &#125;<br><br>         <span class="hljs-built_in">int</span> leftvalue=sumOfLeftLeaves(root.left);<br><br>         <span class="hljs-keyword">if</span>(root.left!=<span class="hljs-literal">null</span>&amp;&amp;root.left.left==<span class="hljs-literal">null</span>&amp;&amp;root.left.right==<span class="hljs-literal">null</span>)&#123;<br>                leftvalue=root.left.val;<br><br>         &#125;<br>         <span class="hljs-built_in">int</span> rightValue=sumOfLeftLeaves(root.right);<br><br>         <span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>=leftvalue+rightValue;<br><br>         <span class="hljs-keyword">return</span> <span class="hljs-keyword">sum</span>;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/find-bottom-left-tree-value/submissions/">513. 找树左下角的值</a></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> findBottomLeftValue(TreeNode root) &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       使用层次遍历，使用一个栈进行处理元素，将节点放入栈中，计算出栈的长度，然后遍历该栈，</span><br><span class="hljs-comment">       将该栈中的节点的字</span><br><span class="hljs-comment">       节点加入到栈中，然后弹出该节点。</span><br><span class="hljs-comment">       每次遍历时，用一个都记录一下每层的最左边的节点，等到最后一层的时候，</span><br><span class="hljs-comment">       该元素也就更新成了最底层的最左边的元素</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br><br>        <span class="hljs-built_in">int</span> res=<span class="hljs-number">0</span>;<br><br>        Queue&lt;TreeNode&gt; que=<span class="hljs-keyword">new</span> LinkedList&lt;&gt;();<br><br>        que.<span class="hljs-built_in">add</span>(root);<br><br>        <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>            <br><br>            <span class="hljs-built_in">int</span> <span class="hljs-built_in">size</span>=que.<span class="hljs-built_in">size</span>();<br><br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">size</span>;i++)&#123;<br><br>                TreeNode head=que.poll();<br><br>                <span class="hljs-keyword">if</span>(i==<span class="hljs-number">0</span>)&#123;<br>                    res=head.val;<br>                &#125;<br><br>                <span class="hljs-keyword">if</span>(head.left!=<span class="hljs-keyword">null</span>)&#123;<br>                    que.<span class="hljs-built_in">add</span>(head.left);<br><br>                &#125;<br>                <span class="hljs-keyword">if</span>(head.right!=<span class="hljs-keyword">null</span>)&#123;<br>                    que.<span class="hljs-built_in">add</span>(head.right);<br><br>                &#125;<br><br>       <br><br>            &#125;<br><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br><br>   &#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">int</span> maxDeep=Integer.MIN_VALUE;<br>   <span class="hljs-keyword">int</span> res=<span class="hljs-number">0</span>;<br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">findBottomLeftValue</span><span class="hljs-params">(TreeNode root)</span> </span>&#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       注意:最左边的值不一定是左叶子节点</span><br><span class="hljs-comment">       定义一个计数器，用于记录达到叶子节点的深度，当深度大于原来的最大深度时，就把新的最大深度赋给它，</span><br><span class="hljs-comment">       还要更新这个值。</span><br><span class="hljs-comment">       递归三要素：传入参数：节点名称，计数器</span><br><span class="hljs-comment">       单次循环逻辑：先后递归左右子节点，递归时计数器就加一，回溯就减一</span><br><span class="hljs-comment">       终止条件：左右字节点都为空</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>        getleft(root,<span class="hljs-number">0</span>);<br><br>        <span class="hljs-keyword">return</span> res;<br>       <br><br>   &#125;<br><br><br>   <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">getleft</span><span class="hljs-params">(TreeNode node,<span class="hljs-keyword">int</span> deep)</span></span>&#123;<br>       <span class="hljs-keyword">if</span>(node.left==<span class="hljs-keyword">null</span>&amp;&amp;node.right==<span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-keyword">if</span>(deep&gt;maxDeep)&#123;<br>               maxDeep=deep;<br>               res=node.val;<br>           &#125;<br><br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br>       <span class="hljs-comment">//左</span><br>       <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-keyword">null</span>)&#123;<br>           deep++;<br>           getleft(node.left,deep);<br>           deep--;<br><br>       &#125;<br><br>       <span class="hljs-comment">//右</span><br>       <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-keyword">null</span>)&#123;<br>           deep++;<br>           getleft(node.right,deep);<br>           deep--;<br><br>       &#125;<br><br>       <span class="hljs-keyword">return</span>;<br><br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/path-sum/submissions/">112. 路径总和</a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/* </span><br><span class="hljs-comment">       递归每一条路径，然后判断该路径的和是否与目标值相等</span><br><span class="hljs-comment">       递归与回溯并存</span><br><span class="hljs-comment">       递归三要素：</span><br><span class="hljs-comment">       终止条件：节点左右孩子都为空，这里需要进行逻辑处理，，判断该路劲的和与目标值是否相等</span><br><span class="hljs-comment">       传入参数：节点和路径集合</span><br><span class="hljs-comment">       返回值：布尔值类型，遇到成功就返回</span><br><span class="hljs-comment">       单次循环逻辑：不断将左右节点进行递归，只要字节点递归的返回结果为真，就返回为真</span><br><span class="hljs-comment">       */</span><br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasPathSum</span><span class="hljs-params">(TreeNode root, <span class="hljs-keyword">int</span> targetSum)</span> </span>&#123;<br><br>       <br>            <span class="hljs-keyword">if</span>(root==<span class="hljs-keyword">null</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            List&lt;Integer&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>            <span class="hljs-function"><span class="hljs-keyword">return</span> <span class="hljs-title">isSum</span><span class="hljs-params">(root,list,targetSum)</span></span>;<br>        <br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">isSum</span><span class="hljs-params">(TreeNode node,List&lt;Integer&gt; list,<span class="hljs-keyword">int</span> targetSum)</span></span>&#123;<br>        list.add(node.val);<br>        <br>        <span class="hljs-keyword">if</span>(node.left==<span class="hljs-keyword">null</span>&amp;&amp;node.right==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">int</span> sum=<span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> val:list)&#123;<br>                sum+=val;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span>(sum==targetSum)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br><br>            &#125;<br><br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br><br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(node.left!=<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">//递归</span><br>            <span class="hljs-keyword">if</span>(isSum(node.left,list,targetSum))&#123;<br>                <span class="hljs-comment">//遇到为符合的就返回</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            list.remove(list.size()<span class="hljs-number">-1</span>);<span class="hljs-comment">//回溯</span><br>        &#125;<br><br>        <span class="hljs-keyword">if</span>(node.right!=<span class="hljs-keyword">null</span>)&#123;<br>           <span class="hljs-comment">//递归</span><br>            <span class="hljs-keyword">if</span>(isSum(node.right,list,targetSum))&#123;<br>                 <span class="hljs-comment">//遇到为符合的就返回</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            &#125;<br>            list.remove(list.size()<span class="hljs-number">-1</span>);<span class="hljs-comment">//回溯</span><br><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-inorder-and-postorder-traversal/submissions/">106. 从中序与后序遍历序列构造二叉树 - 力扣（LeetCode）</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public TreeNode build<span class="hljs-constructor">Tree(<span class="hljs-params">int</span>[] <span class="hljs-params">inorder</span>, <span class="hljs-params">int</span>[] <span class="hljs-params">postorder</span>)</span> &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       利用后序数组的最后一个作为突破口，因为这个元素是根节点，然后再利用这个元素去中序数组去进行切分，</span><br><span class="hljs-comment">       然后得到了</span><br><span class="hljs-comment">       左右子树的长度，然后再利用左右子树的长度，去中序数组中，找左右子树，</span><br><span class="hljs-comment">       此时左子树的最后一个结点就是该左子树的根节点</span><br><span class="hljs-comment">       ，右子树也是，利用这个思路就可不断递归</span><br><span class="hljs-comment">       递归的终止条件就是：中序遍历的子树长度为0。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        */</span><br>        <span class="hljs-keyword">if</span>(inorder.length==<span class="hljs-number">0</span><span class="hljs-pattern-match"><span class="hljs-operator">||</span>postorder.length<span class="hljs-operator">==</span>0)&#123;</span><br><span class="hljs-pattern-match">            return null;</span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match">       return get<span class="hljs-constructor">Tree(<span class="hljs-params">inorder</span>,<span class="hljs-params">postorder</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">   &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">   public <span class="hljs-constructor">TreeNode</span> get<span class="hljs-constructor">Tree(<span class="hljs-params">int</span>[] <span class="hljs-params">inorder</span>, <span class="hljs-params">int</span>[] <span class="hljs-params">postorder</span>)</span>&#123;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       <span class="hljs-keyword">if</span>(postorder.length<span class="hljs-operator">==</span>0)&#123;</span><br><span class="hljs-pattern-match">           return null;</span><br><span class="hljs-pattern-match">       &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>1.找后序遍历的最后一个结点</span><br><span class="hljs-pattern-match">       <span class="hljs-built_in">int</span> rootvalue=postorder[postorder.length-1];</span><br><span class="hljs-pattern-match">       <span class="hljs-constructor">TreeNode</span> root=<span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">rootvalue</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>遍历到叶子结点</span><br><span class="hljs-pattern-match">       <span class="hljs-keyword">if</span>(postorder.length<span class="hljs-operator">==</span>1)&#123;</span><br><span class="hljs-pattern-match">           return root;</span><br><span class="hljs-pattern-match">       &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>2.利用后续遍历的最后一个结点对中序遍历进行切分，找到切割点</span><br><span class="hljs-pattern-match">       <span class="hljs-built_in">int</span> splitindex;</span><br><span class="hljs-pattern-match">       <span class="hljs-keyword">for</span>(splitindex=0;splitindex&lt;inorder.length;splitindex<span class="hljs-operator">++</span>)&#123;</span><br><span class="hljs-pattern-match">           <span class="hljs-keyword">if</span>(inorder[splitindex]<span class="hljs-operator">==</span>rootvalue)&#123;</span><br><span class="hljs-pattern-match">               break;</span><br><span class="hljs-pattern-match">           &#125;</span><br><span class="hljs-pattern-match">       &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>3.求出切分后的中序数组</span><br><span class="hljs-pattern-match">       <span class="hljs-built_in">int</span>[] left<span class="hljs-constructor">Inorder</span>= <span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">inorder</span>,0,0+<span class="hljs-params">splitindex</span>)</span>;</span><br><span class="hljs-pattern-match">       <span class="hljs-built_in">int</span>[] right<span class="hljs-constructor">Inorder</span>=<span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">inorder</span>,<span class="hljs-params">splitindex</span>+1,<span class="hljs-params">inorder</span>.<span class="hljs-params">length</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>4.删除后续遍历的后续数组</span><br><span class="hljs-pattern-match">       </span><br><span class="hljs-pattern-match">       postorder=<span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">postorder</span>,0,<span class="hljs-params">postorder</span>.<span class="hljs-params">length</span>-1)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>5.切割后续数组</span><br><span class="hljs-pattern-match">       <span class="hljs-built_in">int</span>[] left<span class="hljs-constructor">Postorder</span>= <span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">postorder</span>,0,0+<span class="hljs-params">leftInorder</span>.<span class="hljs-params">length</span>)</span>;</span><br><span class="hljs-pattern-match">       <span class="hljs-built_in">int</span>[] right<span class="hljs-constructor">Postorder</span>=<span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">postorder</span>,0+<span class="hljs-params">leftInorder</span>.<span class="hljs-params">length</span>,<span class="hljs-params">postorder</span>.<span class="hljs-params">length</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       <span class="hljs-operator">/</span><span class="hljs-operator">/</span>6.递归左右子树</span><br><span class="hljs-pattern-match">       root.left=get<span class="hljs-constructor">Tree(<span class="hljs-params">leftInorder</span>,<span class="hljs-params">leftPostorder</span>)</span>;</span><br><span class="hljs-pattern-match">       root.right=get<span class="hljs-constructor">Tree(<span class="hljs-params">rightInorder</span>,<span class="hljs-params">rightPostorder</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">       return root;</span><br><span class="hljs-pattern-match"></span><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>copy<span class="hljs-constructor">OfRange(<span class="hljs-params">data</span>,2,7)</span>;截取数组<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/construct-binary-tree-from-preorder-and-inorder-traversal/submissions/">105. 从前序与中序遍历序列构造二叉树 - 力扣（LeetCode）</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public TreeNode build<span class="hljs-constructor">Tree(<span class="hljs-params">int</span>[] <span class="hljs-params">preorder</span>, <span class="hljs-params">int</span>[] <span class="hljs-params">inorder</span>)</span> &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        思路：利用先序遍历的特点，找到先序遍历数组中的头结点，一定就是根节点，然后在利用根节点</span><br><span class="hljs-comment">        去中序数组中找分割点，找到分割点后，就取出中序遍历的左右子树，然后再去掉先序遍历的头结点</span><br><span class="hljs-comment">        ，然后利用中序遍历取出的左右子数组的长度，去先序遍历中取出，左右子数组。</span><br><span class="hljs-comment">        然后就是递归，递归得到的左右子数组，最后返回根节点即可</span><br><span class="hljs-comment">        递归的终止条件就是：先序子数组为空</span><br><span class="hljs-comment">        遇到先序数组长度为1的就返回根节点</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br><br>         <span class="hljs-keyword">if</span>(preorder.length==<span class="hljs-number">0</span><span class="hljs-pattern-match"><span class="hljs-operator">||</span>inorder.length<span class="hljs-operator">==</span>0)&#123;</span><br><span class="hljs-pattern-match">             return null;</span><br><span class="hljs-pattern-match">         &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">         return get<span class="hljs-constructor">Tree(<span class="hljs-params">preorder</span>,<span class="hljs-params">inorder</span>)</span>;</span><br><span class="hljs-pattern-match">    &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">    public <span class="hljs-constructor">TreeNode</span> get<span class="hljs-constructor">Tree(<span class="hljs-params">int</span>[] <span class="hljs-params">preorder</span>, <span class="hljs-params">int</span>[] <span class="hljs-params">inorder</span> )</span>&#123;</span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">if</span>(preorder.length<span class="hljs-operator">==</span>0)&#123;</span><br><span class="hljs-pattern-match">            return null;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match">        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>1.找先序遍历的第一个结点</span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span> head=preorder[0];</span><br><span class="hljs-pattern-match">        <span class="hljs-constructor">TreeNode</span> root=<span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">head</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">if</span>(preorder.length<span class="hljs-operator">==</span>1)&#123;</span><br><span class="hljs-pattern-match">            return root;</span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span> splite<span class="hljs-constructor">Index</span>=0;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>2.找分割点</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-keyword">for</span>(;splite<span class="hljs-constructor">Index</span>&lt;inorder.length;splite<span class="hljs-constructor">Index</span><span class="hljs-operator">++</span>)&#123;</span><br><span class="hljs-pattern-match">            <span class="hljs-keyword">if</span>(inorder[splite<span class="hljs-constructor">Index</span>]<span class="hljs-operator">==</span>head)&#123;</span><br><span class="hljs-pattern-match">                break;</span><br><span class="hljs-pattern-match">            &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        &#125;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        </span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>3.切分中序数组</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span>[] left<span class="hljs-constructor">Inoder</span>=<span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">inorder</span>,0,0+<span class="hljs-params">spliteIndex</span>)</span>;</span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span>[] right<span class="hljs-constructor">Inoder</span>=<span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">inorder</span>,0+<span class="hljs-params">spliteIndex</span>+1,<span class="hljs-params">inorder</span>.<span class="hljs-params">length</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>4.取出先序数组的第一个结点</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        preorder=<span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">preorder</span>,1,<span class="hljs-params">preorder</span>.<span class="hljs-params">length</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>5.切分先序数组</span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span>[] left<span class="hljs-constructor">Preorder</span>=<span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">preorder</span>,0,0+<span class="hljs-params">leftInoder</span>.<span class="hljs-params">length</span>)</span>;</span><br><span class="hljs-pattern-match">        <span class="hljs-built_in">int</span>[] right<span class="hljs-constructor">Preorder</span>=<span class="hljs-constructor">Arrays</span>.copy<span class="hljs-constructor">OfRange(<span class="hljs-params">preorder</span>,0+<span class="hljs-params">leftInoder</span>.<span class="hljs-params">length</span>,<span class="hljs-params">preorder</span>.<span class="hljs-params">length</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        <span class="hljs-operator">/</span><span class="hljs-operator">/</span>6.递归</span><br><span class="hljs-pattern-match">        root.left=get<span class="hljs-constructor">Tree(<span class="hljs-params">leftPreorder</span>,<span class="hljs-params">leftInoder</span>)</span>;</span><br><span class="hljs-pattern-match">        root.right=get<span class="hljs-constructor">Tree(<span class="hljs-params">rightPreorder</span>,<span class="hljs-params">rightInoder</span>)</span>;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match">        return root;</span><br><span class="hljs-pattern-match"></span><br><span class="hljs-pattern-match"></span><br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/maximum-binary-tree/submissions/">654. 最大二叉树 </a></p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">      思路：</span><br><span class="hljs-comment">      首先在数组中找到最大值，然后将最大值作为分割点，切分左右子树，递归返回</span><br><span class="hljs-comment">      递归三要素：</span><br><span class="hljs-comment">      递归的终止条件：结点为空</span><br><span class="hljs-comment">      单次逻辑：找最大值作为根结点，切分数组，然后递归 </span><br><span class="hljs-comment">      返回值类型，结点，传入参数（结点）</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">       */</span><br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public TreeNode construct<span class="hljs-constructor">MaximumBinaryTree(<span class="hljs-params">int</span>[] <span class="hljs-params">nums</span>)</span> &#123;<br><br>     <br>        <span class="hljs-keyword">if</span>(nums.length==<span class="hljs-number">0</span>)&#123;<br>            return null;<br><br>        &#125;<br><br>        return get<span class="hljs-constructor">Maxtree(<span class="hljs-params">nums</span>)</span>;<br>        <br><br>   &#125;<br><br>   public TreeNode get<span class="hljs-constructor">Maxtree(<span class="hljs-params">int</span>[] <span class="hljs-params">nums</span>)</span>&#123;<br>       <span class="hljs-keyword">if</span>(nums.length==<span class="hljs-number">0</span>)&#123;<br>            return null;<br><br>        &#125;<br>        <br><br><br><br>        <span class="hljs-built_in">int</span> max=Integer.MIN_VALUE;<br>        <span class="hljs-built_in">int</span> spliteIndex=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-comment">//找最大值</span><br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;nums.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>&gt;max)&#123;<br>                max=nums<span class="hljs-literal">[<span class="hljs-identifier">i</span>]</span>;<br>                spliteIndex=i;<br><br>            &#125;<br><br>        &#125;<br>        TreeNode root=<span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">max</span>)</span>;<br><br>        <span class="hljs-keyword">if</span>(nums.length==<span class="hljs-number">1</span>)&#123;<br>            return root;<br><br>        &#125;<br><br>        <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> leftNums=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>copy<span class="hljs-constructor">OfRange(<span class="hljs-params">nums</span>,0,0+<span class="hljs-params">spliteIndex</span>)</span>;<br>        <span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> rightNums=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span>copy<span class="hljs-constructor">OfRange(<span class="hljs-params">nums</span>,0+<span class="hljs-params">spliteIndex</span>+1,<span class="hljs-params">nums</span>.<span class="hljs-params">length</span>)</span>;<br><br>       root.left=get<span class="hljs-constructor">Maxtree(<span class="hljs-params">leftNums</span>)</span>;<br>       root.right=get<span class="hljs-constructor">Maxtree(<span class="hljs-params">rightNums</span>)</span>;<br><br><br>       return root;<br><br><br><br></code></pre></td></tr></table></figure><p><a href="https://www.lanqiao.cn/problems/183/learning/">完全二叉树的权值 - 蓝桥云课 (lanqiao.cn)</a></p><p><a href="https://leetcode.cn/problems/merge-two-binary-trees/submissions/">617. 合并二叉树 - 力扣（LeetCode）</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> TreeNode mergeTrees(TreeNode root1, TreeNode root2) &#123;<br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       思路：递归</span><br><span class="hljs-comment">       传入参数和返回值类型：返回值类型：结点，传入左右子树的结点</span><br><span class="hljs-comment">       终止条件：两个结点都为空，</span><br><span class="hljs-comment">       单次循环逻辑：先判断两个子树是否为为空，其中一个子树为空，就返回另外一个子树解答</span><br><span class="hljs-comment">       当两个子树都不为空时，就加上这两个结点的值，然后分别递归两颗树的左子结点和右子结点，</span><br><span class="hljs-comment">       最后返回树1的结点</span><br><span class="hljs-comment">       将树二加在树一上，对树一进行改造</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>       <br>       <span class="hljs-keyword">return</span>  combineTree(root1,root2);<br><br>        <br><br><br><br>   &#125;<br><br>   <span class="hljs-keyword">public</span> TreeNode combineTree(TreeNode root1,TreeNode root2)&#123;<br>      <br><br>        <span class="hljs-keyword">if</span>(root1==<span class="hljs-literal">null</span>&amp;&amp;root2==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">if</span>(root1==<span class="hljs-literal">null</span>&amp;&amp;root2!=<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> root2;<br>       &#125;<br>       <br>       <span class="hljs-keyword">if</span>(root1!=<span class="hljs-literal">null</span>&amp;&amp;root2==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> root1;<br>       &#125;<br><br>       root1.<span class="hljs-keyword">val</span>=root1.<span class="hljs-keyword">val</span>+root2.<span class="hljs-keyword">val</span>;<br><br>       root1.left=combineTree(root1.left,root2.left);<br>       root1.right=combineTree(root1.right,root2.right);<br><br><br>       <span class="hljs-keyword">return</span> root1;<br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/search-in-a-binary-search-tree/submissions/">700. 二叉搜索树中的搜索 - 力扣（LeetCode）</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> TreeNode searchBST(TreeNode root, int <span class="hljs-keyword">val</span>) &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        递归：</span><br><span class="hljs-comment">        返回值：TreeNode,传入参数结点和val</span><br><span class="hljs-comment">        终止条件：结点为空或则等于val</span><br><span class="hljs-comment">        单次逻辑：大于val,且右子树不为空就递归右子树</span><br><span class="hljs-comment">                小于val，且左子树不为空就递左子树 </span><br><span class="hljs-comment">         */</span><br>        <span class="hljs-keyword">return</span> search(root,<span class="hljs-keyword">val</span>);<br>      <br>    &#125;<br><br>    <span class="hljs-keyword">public</span> TreeNode search(TreeNode root, int <span class="hljs-keyword">val</span>)&#123;<br><br>         <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>||root.<span class="hljs-keyword">val</span>==<span class="hljs-keyword">val</span>)&#123;<br><br>             <span class="hljs-keyword">return</span> root;<br><br><br>        &#125;<br>       TreeNode res=<span class="hljs-literal">null</span>;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">val</span>&lt;root.<span class="hljs-keyword">val</span>&amp;&amp;root.left!=<span class="hljs-literal">null</span>)&#123;<br>             res=search(root.left,<span class="hljs-keyword">val</span>);<br>            <br><br><br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">val</span>&gt;root.<span class="hljs-keyword">val</span>&amp;&amp;root.right!=<span class="hljs-literal">null</span>)&#123;<br>              res=search(root.right,<span class="hljs-keyword">val</span>);<br><br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> res;<br><br><br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/validate-binary-search-tree/submissions/">98. 验证二叉搜索树 </a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public boolean is<span class="hljs-constructor">ValidBST(TreeNode <span class="hljs-params">root</span>)</span> &#123;<br>    <span class="hljs-comment">/* </span><br><span class="hljs-comment">    递归：中途遇到不满二叉搜索树的就返回false,如果返回为true,就继续遍历子树结点</span><br><span class="hljs-comment">    注意：并不是简单判断左子结点小于根结点，右子结点大于根节点就能判断它是否是二叉搜索树</span><br><span class="hljs-comment">    而是左子树都小于根节点，右子树都大于根节点</span><br><span class="hljs-comment">    第一种思路：按照中序遍历把所有的结点都放入数组中，然后判断该数组的所有元素是否从小到达排列即可</span><br><span class="hljs-comment">    第二种思路：在中序遍历的递归过程中就进行判断，判断后面的值是否大于前面的最大值，小于就返回false</span><br><span class="hljs-comment">    </span><br><span class="hljs-comment">    */</span><br>    List&lt;Integer&gt; <span class="hljs-built_in">list</span>=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>    <span class="hljs-keyword">in</span><span class="hljs-constructor">Order(<span class="hljs-params">root</span>,<span class="hljs-params">list</span>)</span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;<span class="hljs-built_in">list</span>.size<span class="hljs-literal">()</span>;i++)&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">list</span>.get(i)&lt;=<span class="hljs-built_in">list</span>.get(i-<span class="hljs-number">1</span>))&#123;<br>            return <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br><br>    return <span class="hljs-literal">true</span>;<br>&#125;<br><br>public void <span class="hljs-keyword">in</span><span class="hljs-constructor">Order(TreeNode <span class="hljs-params">root</span>,List&lt;Integer&gt; <span class="hljs-params">list</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>(root==null)&#123;<br>        return;<br>    &#125;<br><br>    <span class="hljs-keyword">in</span><span class="hljs-constructor">Order(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>,<span class="hljs-params">list</span>)</span>;<br>    <span class="hljs-built_in">list</span>.add(root.<span class="hljs-keyword">val</span>);<br>    <span class="hljs-keyword">in</span><span class="hljs-constructor">Order(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>,<span class="hljs-params">list</span>)</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/minimum-absolute-difference-in-bst/submissions/">530. 二叉搜索树的最小绝对差 - 力扣（LeetCode）</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public <span class="hljs-built_in">int</span> get<span class="hljs-constructor">MinimumDifference(TreeNode <span class="hljs-params">root</span>)</span> &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       利用中序遍历的方式将树中的结点都放入到数组中，这时数组中的元素都是</span><br><span class="hljs-comment">       从小到大排序的，那么差值最小的两个结点，肯定是靠在一起的，所以只需要</span><br><span class="hljs-comment">       寻找出数组中前后两个差值最小的即可</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>        List&lt;Integer&gt; res=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;<span class="hljs-literal">()</span>;<br>        <span class="hljs-keyword">in</span><span class="hljs-constructor">Order(<span class="hljs-params">root</span>,<span class="hljs-params">res</span>)</span>;<br>        <span class="hljs-built_in">int</span> min=Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">1</span>;i&lt;res.size<span class="hljs-literal">()</span>;i++)&#123;<br>            <span class="hljs-keyword">if</span>(res.get(i)-res.get(i-<span class="hljs-number">1</span>)&lt;min)&#123;<br>                min=res.get(i)-res.get(i-<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        return min;<br><br>   &#125;<br><br>   public void <span class="hljs-keyword">in</span><span class="hljs-constructor">Order(TreeNode <span class="hljs-params">root</span>,List&lt;Integer&gt; <span class="hljs-params">res</span>)</span>&#123;<br><br>       <span class="hljs-keyword">if</span>(root==null)&#123;<br>           return ;<br>       &#125;<br><br>       <span class="hljs-keyword">in</span><span class="hljs-constructor">Order(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>,<span class="hljs-params">res</span>)</span>;<br>       res.add(root.<span class="hljs-keyword">val</span>);<br>       <span class="hljs-keyword">in</span><span class="hljs-constructor">Order(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>,<span class="hljs-params">res</span>)</span>;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/find-mode-in-binary-search-tree/submissions/">501. 二叉搜索树中的众数 - 力扣（LeetCode）</a></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> Solution &#123;<br><br>    List&lt;Integer&gt; res=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    <span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">int</span> maxcount=<span class="hljs-number">0</span>;<br>    TreeNode pre=<span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] findMode(TreeNode root) &#123;<br><br>        <span class="hljs-comment">/* </span><br><span class="hljs-comment">        先进行左子树遍历</span><br><span class="hljs-comment">        递归二叉树的过程中，进行计数，利用前后指针，不断对比前后指针</span><br><span class="hljs-comment">        只要相等就将计时器加一，反之则将计时器重置为1，然后判断计时器与最大计时器的</span><br><span class="hljs-comment">        大小，相等就重新将该数字放进结果集合，大于就清空结果集合，为了清空之前放进去的哪些</span><br><span class="hljs-comment">        元素，清空之后，在将该数组放进去，然后更新前指针为后指针，然后进行右结点的遍历</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        */</span><br><br>        inOrder(root);<br><br>        <span class="hljs-keyword">int</span>[] ans=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[res.<span class="hljs-keyword">size</span>()];<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;res.<span class="hljs-keyword">size</span>();i++)&#123;<br>            ans[i]=res.get(i);<br><br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br><br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> inOrder(TreeNode cur)&#123;<br>        <br><br>        <span class="hljs-keyword">if</span>(cur==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">return</span> ;<br><br><br>        &#125;<br><br>        inOrder(cur.left);<br>        <br>        <span class="hljs-comment">//计数器</span><br>        <span class="hljs-keyword">if</span>(pre==<span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">count</span>=<span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pre.val==cur.val)&#123;<br>            <span class="hljs-keyword">count</span>++;<br><br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">count</span>=<span class="hljs-number">1</span>;<br><br>        &#125;<br><br>        <span class="hljs-comment">//比较计数次数</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">count</span>==maxcount)&#123;<br>            res.add(cur.val);<br><br>        &#125;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">count</span>&gt;maxcount)&#123;<br>            maxcount=<span class="hljs-keyword">count</span>;<br>            res.clear();<br>            res.add(cur.val);<br>            <span class="hljs-comment">//注意是放入当前节点的值</span><br>           <br>        &#125;<br><br>        <span class="hljs-comment">//更新后指针</span><br><br>        pre=cur;<br><br><br>        inOrder(cur.right);<br><br>        <span class="hljs-keyword">return</span>;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>**<a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/">236. 二叉树的最近公共祖先</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       思路：</span><br><span class="hljs-comment">       使用回溯，即从下往上递归，即后续遍历，当遇到p,q节点就返回，然后处理中间节点</span><br><span class="hljs-comment">       为了将最后的祖先结点返回去，只要左右节点不为空，就返回。</span><br><span class="hljs-comment">       其中一个节点不为空的情况，就返回这个不为空的结点</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br>       <br><br>       <span class="hljs-keyword">if</span>(root==p||root==q||root==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> root;<br>       &#125;<br><br>       TreeNode left= lowestCommonAncestor(root.left,p,q);<span class="hljs-comment">//左</span><br>       TreeNode right= lowestCommonAncestor(root.right,p,q);<span class="hljs-comment">//右</span><br><br>       <span class="hljs-keyword">if</span>(left!=<span class="hljs-literal">null</span>&amp;&amp;right!=<span class="hljs-literal">null</span>)&#123;<span class="hljs-comment">//中</span><br>           <span class="hljs-keyword">return</span> root;<br>       &#125;<br><br>       <span class="hljs-keyword">if</span>(left==<span class="hljs-literal">null</span>&amp;&amp;right!=<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> right;<br><br>       &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(left!=<span class="hljs-literal">null</span>&amp;&amp;right==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> left;<br><br>       &#125;<span class="hljs-keyword">else</span>&#123;<br><br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br><br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-search-tree/submissions/">235. 二叉搜索树的最近公共祖</a></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">public</span> TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       利用二叉树的顺序特点，祖先结点一定在[p,q]中，只要递归的过程遇到小于该区间的值，就向右递归</span><br><span class="hljs-comment">       反之，则向左边遍历</span><br><span class="hljs-comment">       终止条件：结点为空</span><br><span class="hljs-comment">       单次逻辑：判断结点值与p,q结点值的大小，大于就递归左子树，小于就递归右子树，在区间中，就返回该节点</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>      <span class="hljs-keyword">return</span>   find(root,p,q);<br>       <br>   &#125;<br><br>   <span class="hljs-keyword">public</span> TreeNode find(TreeNode root, TreeNode p, TreeNode q)&#123;<br><br>       <span class="hljs-keyword">if</span>(root==<span class="hljs-literal">null</span>)&#123;<br>           <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>;<br>       &#125;<br>       <span class="hljs-comment">//大于区间</span><br>       <span class="hljs-keyword">if</span>(root.<span class="hljs-keyword">val</span>&gt;p.<span class="hljs-keyword">val</span>&amp;&amp;root.<span class="hljs-keyword">val</span>&gt;q.<span class="hljs-keyword">val</span>)&#123;<br>           TreeNode left=find(root.left,p,q);<br><br>           <span class="hljs-keyword">return</span> left;<br><br>       &#125;<br>       <span class="hljs-comment">//小于区间</span><br>       <span class="hljs-keyword">if</span>(root.<span class="hljs-keyword">val</span>&lt;p.<span class="hljs-keyword">val</span>&amp;&amp;root.<span class="hljs-keyword">val</span>&lt;q.<span class="hljs-keyword">val</span>)&#123;<br>           TreeNode right=find(root.right,p,q);<br><br>           <span class="hljs-keyword">return</span> right;<br><br>       &#125;<br><br>       <span class="hljs-comment">//在区间中</span><br><br>       <span class="hljs-keyword">return</span> root;<br><br>       <br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/insert-into-a-binary-search-tree/submissions/">701. 二叉搜索树中的插入操作 </a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public TreeNode insert<span class="hljs-constructor">IntoBST(TreeNode <span class="hljs-params">root</span>, <span class="hljs-params">int</span> <span class="hljs-params">val</span>)</span> &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        思路:遍历过程中，找到符合条件的空结点，插入即可</span><br><span class="hljs-comment">        递归三要素：</span><br><span class="hljs-comment">        传入参数：根节点和插入值</span><br><span class="hljs-comment">        返回值类型：结点</span><br><span class="hljs-comment">        终止条件：找到为空的结点，将该结点进行插入，然后返回</span><br><span class="hljs-comment">        单次递归逻辑：判断插入节点的值和大小，大于就递归右子树，小于就递归左子树，要改变根节点左右子树的指向</span><br><span class="hljs-comment">        最后返回根节点</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br><br>         <span class="hljs-keyword">if</span>(root==null)<br>         &#123;<br>            TreeNode node=<span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">val</span>)</span>;<br>            return node;<br><br>         &#125;<br><br>         <span class="hljs-keyword">if</span>(root.<span class="hljs-keyword">val</span>&gt;<span class="hljs-keyword">val</span>)&#123;<br>              root.left=insert<span class="hljs-constructor">IntoBST(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>,<span class="hljs-params">val</span>)</span>;<br>         &#125;<br>         <br>        <span class="hljs-keyword">if</span>(root.<span class="hljs-keyword">val</span>&lt;<span class="hljs-keyword">val</span>)&#123;<br>              root.right=insert<span class="hljs-constructor">IntoBST(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>,<span class="hljs-params">val</span>)</span>;<br>         &#125;<br><br>         return root;<br><br>    &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/delete-node-in-a-bst/submissions/">450. 删除二叉搜索树中的节点 - 力扣（LeetCode）</a></p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs xquery">public TreeNode deleteNode(TreeNode<span class="hljs-built_in"> root</span>, int<span class="hljs-built_in"> key</span>) &#123;<br>       /* <br>       注意：这里返回的是可能更新的根节点。<br>       这里更新树结构的方式有五种：<br>       第一种：删除节点的左右子树都为空，直接返回空<br>       第二种：删除节点的左子树为空，右子树不为空，直接让右子树补上，然后返回该柚子结点<br>       第三种：删除节点的左子树不为空，右子树为空，就让左子树补上，然后返回左子结点<br>       第四种：左右子树都不为空，这时候就要将左子树的嫁接到右子树的最下方的左子节点去<br>       第五种：找不到要删除的节点，直接返回跟结点<br><br><br>       这里需要整一颗树，所哟需要递归各自的左右子树，然后返回给上一层，目的是为了更新一整一颗树<br>       小于就递归左子树，大于就递归右子树<br>       <br>       */<br><br>       <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>==null)&#123;<br>           <span class="hljs-keyword">return</span><span class="hljs-built_in"> root</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>.val=<span class="hljs-built_in">=key</span>)&#123;<br><br><br>           <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>.left==null&amp;<span class="hljs-built_in">&amp;root</span>.right==null)&#123;<br>               <span class="hljs-keyword">return</span> null;<br><br>           &#125;<br>    <br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>.left!=null&amp;<span class="hljs-built_in">&amp;root</span>.right==null)&#123;<br>               <span class="hljs-keyword">return</span><span class="hljs-built_in"> root</span>.left;<br><br>           &#125;<br>           <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>.left==null&amp;<span class="hljs-built_in">&amp;root</span>.right!=null)&#123;<br>                <span class="hljs-keyword">return</span><span class="hljs-built_in"> root</span>.right;<br>               <br>           &#125;<br>          <span class="hljs-keyword">else</span>&#123;<br><br>               TreeNode left<span class="hljs-built_in">=root</span>.right;<br><br>               while(left.left!=null)&#123;<br>                   left=left.left;<br>               &#125;<br><br>               left.left<span class="hljs-built_in">=root</span>.left;<br><br>               <span class="hljs-keyword">return</span><span class="hljs-built_in"> root</span>.right;<br>               <br>           &#125;<br>       &#125;<br>       <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>.val<span class="hljs-built_in">&gt;key</span>)&#123;<br>          <span class="hljs-built_in"> root</span>.left=deleteNode<span class="hljs-built_in">(root</span>.left<span class="hljs-built_in">,key</span>); <br>       &#125;<br>       <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span>.val&lt;key)&#123;<br>           <span class="hljs-built_in"> root</span>.right=deleteNode<span class="hljs-built_in">(root</span>.right<span class="hljs-built_in">,key</span>);<br>       &#125;<br><br>       <span class="hljs-keyword">return</span><span class="hljs-built_in"> root</span>;<br>       <br><br><br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/trim-a-binary-search-tree/submissions/">669. 修剪二叉搜索树 - 力扣（LeetCode）</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public TreeNode trim<span class="hljs-constructor">BST(TreeNode <span class="hljs-params">root</span>, <span class="hljs-params">int</span> <span class="hljs-params">low</span>, <span class="hljs-params">int</span> <span class="hljs-params">high</span>)</span> &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       小于最小值的节点保留右子树然后递归，大于最大值的节点保留左子树，然后递归</span><br><span class="hljs-comment">       递归三要素：</span><br><span class="hljs-comment">       终止条件：节点为空</span><br><span class="hljs-comment">       传入值和返回类型：节点名称和最大最小 边界</span><br><span class="hljs-comment">       单次循环逻辑：</span><br><span class="hljs-comment">       节点值小于目标区间，就将去找递归右子树，并且用一个right借助返回值，然后返回</span><br><span class="hljs-comment">        节点值大于目标区间，就将去找递归左子树，并且用一个left借助返回值，然后返回</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">        然后就是递归左右子树，更新数的结构</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br>   <span class="hljs-keyword">if</span>(root==null)&#123;<br>       return null;<br>   &#125;<br><br>   <span class="hljs-keyword">if</span>(root.<span class="hljs-keyword">val</span>&lt;low)&#123;<br>       TreeNode right=trim<span class="hljs-constructor">BST(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>,<span class="hljs-params">low</span>,<span class="hljs-params">high</span>)</span>;<br>       return right;<br>   &#125;<br>   <span class="hljs-keyword">if</span>(root.<span class="hljs-keyword">val</span>&gt;high)&#123;<br>       TreeNode left=trim<span class="hljs-constructor">BST(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>,<span class="hljs-params">low</span>,<span class="hljs-params">high</span>)</span>;<br>       return left;<br>   &#125;<br><br>   root.left=trim<span class="hljs-constructor">BST(<span class="hljs-params">root</span>.<span class="hljs-params">left</span>,<span class="hljs-params">low</span>,<span class="hljs-params">high</span>)</span>;<br>   root.right=trim<span class="hljs-constructor">BST(<span class="hljs-params">root</span>.<span class="hljs-params">right</span>,<span class="hljs-params">low</span>,<span class="hljs-params">high</span>)</span>;<br><br><br>   return root;<br><br><br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/convert-sorted-array-to-binary-search-tree/submissions/">108. 将有序数组转换为二叉搜索树 - 力扣（LeetCode）</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">public TreeNode sorted<span class="hljs-constructor">ArrayToBST(<span class="hljs-params">int</span>[] <span class="hljs-params">nums</span>)</span> &#123;<br>           <span class="hljs-comment">/*</span><br><span class="hljs-comment">           因为这是一个有序数组，所有构建二叉树时，就选择中间节点作为划分结点，这样即保证</span><br><span class="hljs-comment">           了有序又保证了是平衡二叉树。</span><br><span class="hljs-comment">           递归三要素：</span><br><span class="hljs-comment">           传入参数：数组，左右边界，返回值类型：结点</span><br><span class="hljs-comment">           终止条件：左边的大于右边的</span><br><span class="hljs-comment">           单词循环逻辑：</span><br><span class="hljs-comment">           每次将中间结点作为根节点，然后使用左子节点存取作半边的结果，是由右子节点存取右半边的部分</span><br><span class="hljs-comment">           最后返回根节点</span><br><span class="hljs-comment">           注释:中间取值的方式不唯一，所以答案不唯一，这里中间取值都是靠左边的</span><br><span class="hljs-comment">            */</span><br><br>            <span class="hljs-built_in">int</span> left=<span class="hljs-number">0</span>;<br>            <span class="hljs-built_in">int</span> right=nums.length-<span class="hljs-number">1</span>;<br>            return build<span class="hljs-constructor">Tree(<span class="hljs-params">nums</span>,<span class="hljs-params">left</span>,<span class="hljs-params">right</span>)</span>;<br><br>   &#125;<br><br>   public TreeNode build<span class="hljs-constructor">Tree(<span class="hljs-params">int</span>[] <span class="hljs-params">nums</span>,<span class="hljs-params">int</span> <span class="hljs-params">left</span>,<span class="hljs-params">int</span> <span class="hljs-params">right</span>)</span>&#123;<br>       <span class="hljs-keyword">if</span>(left&gt;right)&#123;<br>           return null;<br>       &#125;<br><br>       <span class="hljs-built_in">int</span> mid=left+((right-left)/<span class="hljs-number">2</span>);<br><br>       TreeNode root=<span class="hljs-keyword">new</span> <span class="hljs-constructor">TreeNode(<span class="hljs-params">nums</span>[<span class="hljs-params">mid</span>])</span>;<br><br>       root.left=build<span class="hljs-constructor">Tree(<span class="hljs-params">nums</span>,<span class="hljs-params">left</span>,<span class="hljs-params">mid</span>-1)</span>;<br>       root.right=build<span class="hljs-constructor">Tree(<span class="hljs-params">nums</span>,<span class="hljs-params">mid</span>+1,<span class="hljs-params">right</span>)</span>;<br><br>       return root;<br><br><br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/convert-bst-to-greater-tree/submissions/">538. 把二叉搜索树转换为累加树 - 力扣（LeetCode）</a></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs typescript">int  pre=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> TreeNode <span class="hljs-function"><span class="hljs-title">convertBST</span>(<span class="hljs-params">TreeNode root</span>)</span> &#123;<br><br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        观察可得：每次的加法运算的顺序都是先右中左，</span><br><span class="hljs-comment">       每个根节点的值，就是根节点的值就是右子树的和与节点值得和     </span><br><span class="hljs-comment">       这里要使用 前后指针，方便 进行运算，因为当前节点得值就是前一个</span><br><span class="hljs-comment">       结点得值和当前接结点值的和</span><br><span class="hljs-comment">       递归：</span><br><span class="hljs-comment">       传入参数：当前结点，无参返回</span><br><span class="hljs-comment">       终止条件：遇到为空</span><br><span class="hljs-comment">       单次循环逻辑：按照右中左的顺序进行遍历，</span><br><span class="hljs-comment">       中间结点需要处理，即求和</span><br><span class="hljs-comment">       然后把前一个结点的值更新为当前结点的值</span><br><span class="hljs-comment">        </span><br><span class="hljs-comment">         */</span><br><br>        <br>         getSum(root);<br><br>         <span class="hljs-keyword">return</span> root;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">getSum</span>(<span class="hljs-params">TreeNode node</span>)</span>&#123;<br><br>        <span class="hljs-keyword">if</span>(node==<span class="hljs-literal">null</span>)&#123;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-comment">//右</span><br>        getSum(node.right);<br>        <span class="hljs-comment">//中</span><br>        node.val+=pre;<br>        pre=node.val;<br>        <span class="hljs-comment">//左</span><br>        getSum(node.left);<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h2><p>回溯的本质就是穷举，也是递归</p><p>回溯法常用于解决集合中查找子集，排序方式，解数独</p><p>回溯的三要素：</p><p>终止条件：满足什么条件就返回</p><p>返回值和传入参数类型：没有返回值，参数类型依据单次 循环逻辑而定</p><p>但次循环逻辑：一个foe循环，表示遍历的宽度，对应数的宽度，然后就是递归，对应的就是数的深度</p><p><a href="https://leetcode.cn/problems/combinations/">77. 组合 - 力扣（LeetCode）</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">LinkedList&lt;<span class="hljs-type">Integer</span>&gt; nums=<span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>   List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br><br>   <span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; combine(<span class="hljs-type">int</span> n, <span class="hljs-type">int</span> k) &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       for循环用于控制递归的宽度n，递归用于递归的深度，也就是k</span><br><span class="hljs-comment">       回溯三要素：</span><br><span class="hljs-comment">       终止条件：子集的长度等于k,就将子集添加进最终得结果集合</span><br><span class="hljs-comment">       传入参数：遍历的宽度n,递归的深度，还有下一次的起始递归位置</span><br><span class="hljs-comment">       单次逻辑：先判断子集的长度是否满足条件，不满足就进行for循环，开始的位置就是传入的递归位置，</span><br><span class="hljs-comment">       然后将该结点添加进结果集合终，然后递归，起始的位置加一，然后再将添加 的元素移除结果集合</span><br><span class="hljs-comment">       注意：这里的范围时[1,n];</span><br><span class="hljs-comment">       减值优化：当进行递归的时候，发现后面元素的个数已经不能满足需要的元素个数，就不需要进行递归了。</span><br><span class="hljs-comment">       所有范围可以优化至[startindex,n-(k-nums.size)+1]</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br><br>        backtracking(n,k,<span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">return</span> res;<br><br><br><br>   &#125;<br><br>   <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> backtracking(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k,<span class="hljs-type">int</span> startindex)&#123;<br>       <span class="hljs-keyword">if</span>(nums.size()==k)&#123;<br>           res.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> ArrayList(nums));<br>           <span class="hljs-keyword">return</span> ;<br>       &#125;<br><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=startindex;i&lt;=n-(k-nums.size())+<span class="hljs-number">1</span>;i++)&#123;<br>           nums.<span class="hljs-keyword">add</span>(i);<br>           backtracking(n,k,i+<span class="hljs-number">1</span>);<br>           nums.removeLast();<br><br>       &#125;<br><br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/combination-sum-iii/submissions/">216. 组合总和 III - 力扣（LeetCode）</a></p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs excel">思路：<br>回溯三要素：<br>传入的参数：<span class="hljs-built_in">n</span>,k,<span class="hljs-built_in">sum</span>,startindex<br>终止条件：和<span class="hljs-built_in">sum</span>大于<span class="hljs-built_in">n</span>就直接跳出,当path的长度等于k,且和定于<span class="hljs-built_in">n</span>,就将Path加入到结果集合中<br>单次逻辑：循环遍历，然后进行递归回溯，将遍历到的结点先加入path,然后求和，再递归<br>起始步子从下一个开始，然后从path中取出结点值，然后减去节点值<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>   LinkedList&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-type">path</span>=<span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br><br>   <br>   <span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; combinationSum3(<span class="hljs-type">int</span> k, <span class="hljs-type">int</span> n) &#123;<br><br>       backTraking(n,k,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br><br>       <span class="hljs-keyword">return</span> res;<br>   &#125;<br>   <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> backTraking(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> k ,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> startIndex)&#123;<br><br>       <span class="hljs-keyword">if</span>(sum&gt;n)&#123;<br><br>           <span class="hljs-keyword">return</span>;<br>       &#125;<br><br>       <span class="hljs-keyword">if</span>(<span class="hljs-type">path</span>.size()==k)&#123;<br>       <br>           <span class="hljs-keyword">if</span>(sum==n)&#123;<br>               res.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> ArrayList(<span class="hljs-type">path</span>));<br>           &#125;<br><br>           <span class="hljs-keyword">return</span> ;<br>       &#125;<br><br><br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=startIndex;i&lt;=<span class="hljs-number">9</span>-(k-<span class="hljs-type">path</span>.size())+<span class="hljs-number">1</span>;i++)&#123;<br>           <span class="hljs-type">path</span>.<span class="hljs-keyword">add</span>(i);<br>           sum+=i;<br>           backTraking(n,k,sum,i+<span class="hljs-number">1</span>);<br>           sum-=i;<br>           <span class="hljs-type">path</span>.removeLast();<br>       &#125;<br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/submissions/">17. 电话号码的字母组合 - 力扣（LeetCode）</a></p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">String<span class="hljs-literal">[]</span> s=&#123;<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-string">&quot;abc&quot;</span>,<span class="hljs-string">&quot;def&quot;</span>,<span class="hljs-string">&quot;ghi&quot;</span>,<span class="hljs-string">&quot;jkl&quot;</span>,<span class="hljs-string">&quot;mno&quot;</span>,<span class="hljs-string">&quot;pqrs&quot;</span>,<span class="hljs-string">&quot;tuv&quot;</span>,<span class="hljs-string">&quot;wxyz&quot;</span>&#125;;<br>   StringBuilder path=<span class="hljs-keyword">new</span> <span class="hljs-constructor">StringBuilder()</span>;<br>   List&lt;String&gt; res=<span class="hljs-keyword">new</span> <span class="hljs-constructor">ArrayList()</span>;<br>   public List&lt;String&gt; letter<span class="hljs-constructor">Combinations(String <span class="hljs-params">digits</span>)</span> &#123;<br><br>       <span class="hljs-comment">/*</span><br><span class="hljs-comment">       思路：</span><br><span class="hljs-comment">       这里要 解决的问题，数字与字符串之间的映射：使用一个字符数组，将这个字符串存在对应的位置，使用</span><br><span class="hljs-comment">       下标代表数字</span><br><span class="hljs-comment">       回溯三要素：</span><br><span class="hljs-comment">       终止条件：递归的深度达到了输入数字字符串的长度 </span><br><span class="hljs-comment">       单次循环逻辑：先取出数字中的单个字符，然后用单个数字，取出代表的字符串</span><br><span class="hljs-comment">       然后进行循环，每次都是从0，开始循环的宽度是字符串的长度，每次都将字符串中的一个字符放入到</span><br><span class="hljs-comment">       path中，然后递归，每次递归的深度加一，最后回溯</span><br><span class="hljs-comment">       传入的参数，这里需要一个原先的数字字符串，还有就是递归的深度</span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">       </span><br><span class="hljs-comment">        */</span><br><br>        <span class="hljs-keyword">if</span>(digits.length<span class="hljs-literal">()</span>==<span class="hljs-number">0</span>)&#123;<br>            return res;<br><br>        &#125;<br><br>        back<span class="hljs-constructor">Traking(<span class="hljs-params">digits</span>,0)</span>;<br><br>        return res;<br><br>   &#125;<br>   <br>   public void back<span class="hljs-constructor">Traking(String <span class="hljs-params">digits</span>,<span class="hljs-params">int</span> <span class="hljs-params">index</span>)</span>&#123;<br>       <span class="hljs-keyword">if</span>(index==digits.length<span class="hljs-literal">()</span>)&#123;<br>           res.add(<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">path</span>)</span>);<br>           return;<br><br>       &#125;<br>       <span class="hljs-comment">//取数字字符</span><br>       <span class="hljs-built_in">int</span> num=digits.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">index</span>)</span>-<span class="hljs-character">&#x27;0&#x27;</span>;<br>       String s1=s<span class="hljs-literal">[<span class="hljs-identifier">num</span>]</span>;<br><br>       <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;s1.length<span class="hljs-literal">()</span>;i++)&#123;<br>           <br>           path.append(s1.<span class="hljs-built_in">char</span><span class="hljs-constructor">At(<span class="hljs-params">i</span>)</span>);<br>           back<span class="hljs-constructor">Traking(<span class="hljs-params">digits</span>,<span class="hljs-params">index</span>+1)</span>;<br>           path.delete<span class="hljs-constructor">CharAt(<span class="hljs-params">path</span>.<span class="hljs-params">length</span>()</span>-<span class="hljs-number">1</span>);<br><br>       &#125;<br><br><br><br>   &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/combination-sum/submissions/">39. 组合总和 - 力扣（LeetCode）</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">LinkedList&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-type">path</span>=<span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>   List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>  <span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; combinationSum(<span class="hljs-type">int</span>[] candidates, <span class="hljs-type">int</span> target) &#123;<br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      本问题可以再组合问题三上改进得到，因为这里可以取重复元素，就代表着起始位置就不用加一了。</span><br><span class="hljs-comment">      回溯三要素：</span><br><span class="hljs-comment">      终止条件：元素的和大于目标求和</span><br><span class="hljs-comment">      单次逻辑：只要元素和大于目标和就直接返回，反之如果等于就将集合添加进结果集合中，</span><br><span class="hljs-comment">      然后就是循环回溯，起始位置为上一次的起始位置，递归前先加上这个元素的值，然后添加进结果集中，</span><br><span class="hljs-comment">      递归后再减去这个元素的值，并将其移出集合</span><br><span class="hljs-comment">      传入参数：数组，目标值，和，起始坐标</span><br><span class="hljs-comment">      </span><br><span class="hljs-comment">       */</span><br>       backTracking(candidates,target,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>);<br><br>       <span class="hljs-keyword">return</span> res;<br><br>  &#125;<br><br>  <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> backTracking(<span class="hljs-type">int</span>[] candidates,<span class="hljs-type">int</span> target,<span class="hljs-type">int</span> sum,<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>)&#123;<br>      <span class="hljs-keyword">if</span>(sum&gt;target)&#123;<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">if</span>(sum==target)&#123;<br>          res.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> ArrayList(<span class="hljs-type">path</span>));<br><br>          <span class="hljs-keyword">return</span>;<br><br>      &#125;<br><br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-keyword">index</span>;i&lt;candidates.length;i++)&#123;<br><br>          <span class="hljs-type">path</span>.<span class="hljs-keyword">add</span>(candidates[i]);<br>          sum+=candidates[i];<br>          backTracking(candidates,target,sum,i);<br>          <span class="hljs-type">path</span>.removeLast();<br>          sum-=candidates[i];<br><br>      &#125;<br><br><br><br>  &#125;<br></code></pre></td></tr></table></figure><p><a href="https://leetcode.cn/problems/subsets/submissions/">78. 子集 - 力扣（LeetCode）</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">LinkedList&lt;<span class="hljs-type">Integer</span>&gt; <span class="hljs-type">path</span>=<span class="hljs-built_in">new</span> LinkedList&lt;&gt;();<br>  List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; res=<span class="hljs-built_in">new</span> ArrayList&lt;&gt;();<br>  <span class="hljs-built_in">public</span> List&lt;List&lt;<span class="hljs-type">Integer</span>&gt;&gt; subsets(<span class="hljs-type">int</span>[] nums) &#123;<br><br>  <br>      <span class="hljs-comment">/*</span><br><span class="hljs-comment">      思路：</span><br><span class="hljs-comment">      回溯三要素：</span><br><span class="hljs-comment">      终止条件：起始坐标大于等于数组长度</span><br><span class="hljs-comment">      单次循环逻辑：将递归过程中的结点都加入到结果集中，递归每一次的开始，就是上一次递归的下一个</span><br><span class="hljs-comment">      传入的参数：nums，起始坐标        </span><br><span class="hljs-comment">       */</span><br><br>      backTracking(nums,<span class="hljs-number">0</span>);<br>      <span class="hljs-keyword">return</span> res;<br><br>  &#125;<br>  <span class="hljs-built_in">public</span> <span class="hljs-type">void</span> backTracking(<span class="hljs-type">int</span>[] nums,<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>)&#123;<br><br>      res.<span class="hljs-keyword">add</span>(<span class="hljs-built_in">new</span> ArrayList(<span class="hljs-type">path</span>));<br><br>      <span class="hljs-keyword">if</span>(<span class="hljs-keyword">index</span>&gt;=nums.length)&#123;<br>          <span class="hljs-keyword">return</span>;<br>      &#125;<br><br>      <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-keyword">index</span>;i&lt;nums.length;i++)&#123;<br>          <span class="hljs-type">path</span>.<span class="hljs-keyword">add</span>(nums[i]);<br>          backTracking(nums,i+<span class="hljs-number">1</span>);<br>          <span class="hljs-type">path</span>.removeLast();<br>      &#125;<br><br>  &#125;<br></code></pre></td></tr></table></figure><h2 id="青训笔试"><a href="#青训笔试" class="headerlink" title="青训笔试"></a>青训笔试</h2><p>【编程题】幼儿园有 N 个孩子玩游戏，随机围成了一个圈，老师最终想让所有男生排列到一起，所有女生排列到一起。每次老师可以命令两个孩子交换位置，求最小的命令次数：</p><p>N&lt;=100</p><p>语言限定：C++、Java、Golang</p><p>输入3 FMF</p><p>输出 0</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>【编程题】n 个人一起玩狼人杀，按从 1 到 n 的顺序编号，据说，这群人当中有一个预言家。如果预言家真的存在，那么： 1）预言家不会信任任何人。 2）每个人（除了预言家）都信任预言家。 最多只有一个人同时满足 1 和 2 。 给定一个数组 trust ，其中 trust[i] = [ai, bi] 表示编号为 ai 的人信任编号为 bi 的人。如果预言家存在并且可以确定他的身份，请返回预言家的编号；否则，返回 -1 。 提示： 1 &lt;= n &lt;= 1000；0 &lt;= trust.length &lt;= 100；trust[i].length == 2；trust 中的所有trust[i] = [ai, bi] 互不相同；ai != bi；1 &lt;= ai；bi &lt;= n</p><p>描述</p><p>n 个人一起玩狼人杀，按从 1 到 n 的顺序编号，据说，这群人当中有一个预言家。如果预言家真的存在，那么：</p><p>1）预言家不会信任任何人。</p><p>2）每个人（除了预言家）都信任预言家。</p><p>最多只有一个人同时满足 1 和 2 。</p><p>给定一个数组 trust ，其中 trust[i] = [ai, bi] 表示编号为 ai 的人信任编号为 bi 的人。如果预言家存在并且可以确定他的身份，请返回预言家的编号；否则，返回 -1 。</p><p>提示：</p><p>1 &lt;= n &lt;= 1000；0 &lt;= trust.length &lt;= 100；trust[i].length == 2；trust 中的所有trust[i] = [ai, bi] 互不相同；ai != bi；1 &lt;= ai；bi &lt;= n</p><p>语言限定：C++、Java、Golang</p><p>输入</p><p>n为人数；</p><p>trust数组如题干所述；</p><p>输出</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h2 id="热身赛"><a href="#热身赛" class="headerlink" title="热身赛"></a>热身赛</h2><p>牛牛得到了一个字符串（可能含有空格），他希望在这些字符串中提取出数字。 </p><p>  例如：a1b23c456d007890中可以提取出1, 23, 456, 7890共4个数字。 </p><p>  现在，他得到了一个长度高达1000的字符串，请你帮他提取出所有的数字。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>Alice 和 Bob在玩游戏。一共玩了 nnn局。二者的胜利的概率都是 12\frac{1}{2}21。求 Alice 赢几次的可能性最大。输出最有可能赢几次，如果有多个结果，从小到大输出。</p><p><a href="https://ac.nowcoder.com/acm/contest/51537/A">A-赢的次数_2023成都大学contest 1 (nowcoder.com)</a></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-built_in">public</span> <span class="hljs-keyword">class</span> Main&#123;<br>    <span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args)&#123;<br>        Scanner sc=<span class="hljs-built_in">new</span> Scanner(<span class="hljs-keyword">System</span>.<span class="hljs-keyword">in</span>);<br>        <br>        <span class="hljs-type">int</span> n=sc.nextInt();<br>        <br>        <span class="hljs-keyword">if</span>(n%<span class="hljs-number">2</span>==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(n/<span class="hljs-number">2</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(n/<span class="hljs-number">2</span>+&quot; &quot;);<br>            <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.print(n/<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>        &#125;<br>        <br>        <br>        <br>    &#125;<br>      <br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p>链接：<a href="https://ac.nowcoder.com/acm/contest/51537/C">https://ac.nowcoder.com/acm/contest/51537/C</a><br>来源：牛客网</p><p>法协会有三个主要部门，算法组、项目组和事务组。现在指导老师CD想为大家发福利，给每个组发若干瓶肥宅快乐水，要求各组得到的肥宅快乐水数量相同，并且各组内能够按人数平分(每人至少分一瓶)。现在Reverie统计了三个组的人数，你能帮CD老师算一下至少要准备多少瓶肥宅快乐水吗？</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span>&#123;</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br>        Scanner sc=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Scanner</span>(System.in);<br>        <br>        <br>        List&lt;Integer&gt; res=<span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>            <span class="hljs-keyword">int</span> n=sc.<span class="hljs-built_in">nextInt</span>();<br>            res.<span class="hljs-built_in">add</span>(n);<br>            <br>        &#125;<br>        <span class="hljs-keyword">int</span> a=res.<span class="hljs-built_in">get</span>(<span class="hljs-number">0</span>);<br>        <span class="hljs-keyword">int</span> b=res.<span class="hljs-built_in">get</span>(<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> c=res.<span class="hljs-built_in">get</span>(<span class="hljs-number">2</span>);<br>        <br>        <br>        <span class="hljs-keyword">int</span> max=Collections.<span class="hljs-built_in">max</span>(res);<br>        <span class="hljs-comment">//取最小公倍数</span><br>        <span class="hljs-keyword">int</span> j=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> k=<span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span>(j&gt;<span class="hljs-number">0</span>)&#123;<br>             k=max*j;<br>            <span class="hljs-keyword">if</span>(k%a==<span class="hljs-number">0</span>&amp;&amp;k%b==<span class="hljs-number">0</span>&amp;&amp;k%c==<span class="hljs-number">0</span>)&#123;<br>                <br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            j++;<br>        &#125;<br>        <br>        System.out.<span class="hljs-built_in">println</span>(<span class="hljs-number">3</span>*k);<br>       <br>        <br>        <br>        <br>    &#125;<br>      <br>    <br>    <br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230222225838810.png" alt="image-20230222225838810"></p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>且听风吟</title>
    <link href="/2023/02/22/%E4%B8%94%E5%90%AC%E9%A3%8E%E5%90%9F/"/>
    <url>/2023/02/22/%E4%B8%94%E5%90%AC%E9%A3%8E%E5%90%9F/</url>
    
    <content type="html"><![CDATA[<h4 id="2022"><a href="#2022" class="headerlink" title="2022"></a>2022</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/DSC04663.JPG"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/DSC04813.JPG"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/DSC06624.JPG"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/DSC07265.JPG"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/DSC07322.JPG"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/DSC07441.JPG"></p><hr><h4 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/IMG_20210212_200825__01.jpg"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/IMG_20220404_113310.jpg"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/IMG_20220406_194829.jpg"></p>]]></content>
    
    
    
    <tags>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>zookper的安装</title>
    <link href="/2023/02/21/zookper%E7%9A%84%E5%AE%89%E8%A3%85/"/>
    <url>/2023/02/21/zookper%E7%9A%84%E5%AE%89%E8%A3%85/</url>
    
    <content type="html"><![CDATA[<h3 id="Zookeer的安装"><a href="#Zookeer的安装" class="headerlink" title="Zookeer的安装"></a>Zookeer的安装</h3><p><a href="https://archive.apache.org/dist/zookeeper/zookeeper-3.5.10/">安装包</a></p><h4 id="下载bin-tar-gz"><a href="#下载bin-tar-gz" class="headerlink" title="下载bin.tar.gz"></a>下载bin.tar.gz</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230211105929123.png" alt="image-20230211105929123"></p><h4 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230211110006925.png" alt="image-20230211110006925"></p><h4 id="创建data目录和log目录"><a href="#创建data目录和log目录" class="headerlink" title="创建data目录和log目录"></a>创建data目录和log目录</h4><h4 id="复制zoo-sample-cfg，并重命名为zoo-cfg"><a href="#复制zoo-sample-cfg，并重命名为zoo-cfg" class="headerlink" title="复制zoo_sample.cfg，并重命名为zoo.cfg"></a>复制zoo_sample.cfg，并重命名为zoo.cfg</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230211110206550.png" alt="image-20230211110206550"></p><h4 id="修改zoo-cfg"><a href="#修改zoo-cfg" class="headerlink" title="修改zoo.cfg"></a>修改zoo.cfg</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230211110304014.png" alt="image-20230211110304014"></p><p>添加dataDir和dataLogDir,后面的路径就是之前创建的data和log文件夹得路劲</p><h4 id="启动server"><a href="#启动server" class="headerlink" title="启动server"></a>启动server</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230211110549158.png" alt="image-20230211110549158"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230211110516808.png" alt="image-20230211110516808"></p><h4 id="启动clien"><a href="#启动clien" class="headerlink" title="启动clien"></a>启动clien</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230211110530354.png" alt="image-20230211110530354"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>linux</title>
    <link href="/2023/02/19/linux/"/>
    <url>/2023/02/19/linux/</url>
    
    <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="推荐书目"><a href="#推荐书目" class="headerlink" title="推荐书目"></a>推荐书目</h2><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20220907110309954.png" alt="image-20220907110309954"></p><p>查看版本</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">uname -r<br>cat <span class="hljs-regexp">/proc/</span>version<br></code></pre></td></tr></table></figure><h2 id="Linux的经典图形界面"><a href="#Linux的经典图形界面" class="headerlink" title="Linux的经典图形界面"></a>Linux的经典图形界面</h2><h3 id="Genome"><a href="#Genome" class="headerlink" title="Genome"></a>Genome</h3><h3 id="Unity"><a href="#Unity" class="headerlink" title="Unity"></a>Unity</h3><h2 id="xshell连接问题"><a href="#xshell连接问题" class="headerlink" title="xshell连接问题"></a>xshell连接问题</h2><h4 id=""><a href="#" class="headerlink" title=""></a></h4><h2 id="Telnet"><a href="#Telnet" class="headerlink" title="Telnet"></a>Telnet</h2><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20220914105554423.png" alt="image-20220914105554423"></p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">telnet</span> <span class="hljs-built_in">ip</span> <br></code></pre></td></tr></table></figure><h2 id="Linux命令行基础"><a href="#Linux命令行基础" class="headerlink" title="Linux命令行基础"></a>Linux命令行基础</h2><p><a href="https://www.runoob.com/linux/linux-command-manual.html">linux命令大全</a></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">tab</span>：自动补全<br><br><span class="hljs-keyword">pwd</span>:输出当前的工作目录名称<br><br><span class="hljs-built_in">hostname</span>：显示或者设置系统主机名<br><br><span class="hljs-keyword">l</span><span class="hljs-variable">s:</span>列出目录中的内容<br><br>uname:输出系统信息<br><br><span class="hljs-keyword">cat</span> :查看信息<br><br><span class="hljs-keyword">ls</span> -<span class="hljs-keyword">l</span> 查看当前目录下的详细信息<br><br><span class="hljs-keyword">history</span>:<br><br><span class="hljs-keyword">grep</span>:过滤显示<br><br>### sudo cmd_name<br><br>ifconfig //查看本机ip<br></code></pre></td></tr></table></figure><h2 id="vim常用命令"><a href="#vim常用命令" class="headerlink" title="vim常用命令"></a>vim常用命令</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">:wq 强制保存退出<br><span class="hljs-symbol">i:</span>在光标所在字符前开始插入<br><span class="hljs-symbol">a:</span>在光标所在字符后开始插入<br><span class="hljs-symbol">o:</span>在光标所在行的下面另起一新行插入<br><span class="hljs-symbol">s:</span>删除光标所在的字符并开始插入<br><br></code></pre></td></tr></table></figure><h3 id="文件描述符"><a href="#文件描述符" class="headerlink" title="文件描述符"></a>文件描述符</h3><p>文件描述符0：标准输入设备</p><p>文件描述符1：标准输出设备</p><p>文件描述符2：标准错误输出设备</p><h2 id="高级shell命令"><a href="#高级shell命令" class="headerlink" title="高级shell命令"></a>高级shell命令</h2><h3 id="管道-——“-”"><a href="#管道-——“-”" class="headerlink" title="管道 ——“|”"></a>管道 ——“|”</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">一次性输入多个命令，以竖线分隔<br></code></pre></td></tr></table></figure><h3 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h3><p>覆盖 ：[命令]&gt;[文件]</p><p>追加：[命令]&gt;&gt;[文件]</p><h4 id="输入重定向："><a href="#输入重定向：" class="headerlink" title="输入重定向："></a>输入重定向：</h4><p>[命令]&lt;[文件]</p><p>[命令]&lt;&lt;[分隔符]</p><h3 id="命令的排列："><a href="#命令的排列：" class="headerlink" title="命令的排列："></a>命令的排列：</h3><p>连接字符“;”,”&amp;&amp;”,”||”</p><h3 id="命令续行"><a href="#命令续行" class="headerlink" title="命令续行"></a>命令续行</h3><p>   \</p><h3 id="命令替换"><a href="#命令替换" class="headerlink" title="命令替换"></a>命令替换</h3><h3 id="命令别名"><a href="#命令别名" class="headerlink" title="命令别名"></a>命令别名</h3><p>alias new_name=old_name</p><h3 id="ls命令"><a href="#ls命令" class="headerlink" title="ls命令"></a>ls命令</h3><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">ls</span> <span class="hljs-literal">-s</span><br><span class="hljs-built_in">ls</span> <span class="hljs-literal">-S</span><br><span class="hljs-built_in">ls</span> <span class="hljs-literal">-a</span><br><span class="hljs-built_in">ls</span> <span class="hljs-literal">-t</span><br><span class="hljs-built_in">ls</span> <span class="hljs-operator">-F</span><br><br></code></pre></td></tr></table></figure><p>mkdir</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">mkdir -m 权限 文件名<br>mkdir -p 一次性建立多级目录<br></code></pre></td></tr></table></figure><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p>创建文件</p><figure class="highlight irpf90"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs irpf90"><span class="hljs-keyword">touch</span> java.txt<br></code></pre></td></tr></table></figure><p>输入内容</p><p>vim编辑</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">vim <span class="hljs-built_in">text</span>.txt<br></code></pre></td></tr></table></figure><p>gedit编辑</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">gedit <span class="hljs-built_in">text</span>.txt<br></code></pre></td></tr></table></figure><p>cat重定向</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">cat</span> &gt;&gt; text.txt 追加<br><span class="hljs-keyword">cat</span> &gt; text.txt 覆盖<br><span class="hljs-keyword">more</span> <br></code></pre></td></tr></table></figure><p>合并</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">cat</span> text.txt text<span class="hljs-number">1</span>.txt &gt;&gt;text<span class="hljs-number">2</span>.txt<br></code></pre></td></tr></table></figure><p>组合命令</p><p>例如：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">drwxr-xr-x</span><br></code></pre></td></tr></table></figure><p>第一个字母：d表示目录，I表示链接，b表示设备文件</p><p>后面字母或衡线：三个一组，分别表示文件所有者，文件所有者所在的用户组，其他用户组。</p><p>三个字母中,r表示读，w表示写，-表示没有 权限，x表示执行顺序</p><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">rmdir</span><br><span class="hljs-keyword">rm</span> -f <span class="hljs-comment">//删除文件</span><br><span class="hljs-keyword">rm</span> -r <span class="hljs-comment">//删除非空目录</span><br><span class="hljs-keyword">rm</span> -r -i <span class="hljs-comment">//二次确认删除</span><br></code></pre></td></tr></table></figure><p>文件重命名</p><p><a href="https://www.cnblogs.com/Hackerman/p/16057228.html">参考</a></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">mv</span> 源文件 重命名文件<br><span class="hljs-built_in">cp</span><br>rename 老文件 新文件 需要重命名的老文件<br></code></pre></td></tr></table></figure><p>文件查找</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">find</span> <br></code></pre></td></tr></table></figure><p><a href="https://www.php.cn/linux-475644.html">参考</a></p><p>移动</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-keyword">mv</span><br></code></pre></td></tr></table></figure><p>复制</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-keyword">cp</span><br></code></pre></td></tr></table></figure><p>查看</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">head</span> -n <span class="hljs-number">10</span><br><span class="hljs-attribute">tail</span> -n <span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><h3 id="权限控制chomd"><a href="#权限控制chomd" class="headerlink" title="权限控制chomd"></a>权限控制chomd</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221227220028414.png" alt="image-20221227220028414"></p><p><a href="https://www.php.cn/linux-486287.html">linux怎么修改文件权限-linux运维-PHP中文网</a></p><figure class="highlight pf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs pf">用户：<span class="hljs-keyword">user</span> <span class="hljs-keyword">group</span> other <br>权限：r~<span class="hljs-number">4</span> w~<span class="hljs-number">2</span> x~<span class="hljs-number">1</span><br>mode：标识<span class="hljs-number">3</span>个从范围零道七的八进制，分别代表<span class="hljs-keyword">user</span>,<span class="hljs-keyword">group</span>,other<br>chmod mode 文件名<br>chmod u+r file1 //赋予file1文件名拥有者读的权限<br></code></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-chmod.html">详细</a></p><h3 id="文件处理"><a href="#文件处理" class="headerlink" title="文件处理"></a>文件处理</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">grep 关键字 文件 <span class="hljs-comment">//查找文件含有关键字的行数</span><br>wc 单词统计命令<br>wc -l zp<span class="hljs-selector-class">.txt</span> 行数<br>wc -w zp<span class="hljs-selector-class">.txt</span> 单词数<br>wc -m zp<span class="hljs-selector-class">.txt</span> 字节数<br><br><br></code></pre></td></tr></table></figure><h3 id="压缩与解压缩命令"><a href="#压缩与解压缩命令" class="headerlink" title="压缩与解压缩命令"></a>压缩与解压缩命令</h3><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">bzip2 文件名<br>bunzip2  文件名<br>hadoop@dblab-VirtualBox:~/桌面<span class="hljs-string">/linux/file</span>$ bzip2 zp.txt <br>hadoop@dblab-VirtualBox:~/桌面<span class="hljs-string">/linux/file</span>$ bunzip2 zp.txt.bz2<br>gzip -d 解压<br>gzip -n 压缩 <br><br>unzip 解压<br>unzip file.zip     <br><br><br>查看压缩内容<br>zcat~<span class="hljs-string">.gz</span><br>bzcat<br><br>tar -zxvf 压缩文件名<span class="hljs-string">.tar.gz</span><br>打包不是压缩<br>tar  -cf filename.tar file1 file2 file3 打包<br>tar -tf filename.tar 查看<br>tar -xf filename.tar 抽取，<br><br><span class="hljs-comment"># 打包</span><br>tar -cvf 文件名<span class="hljs-string">.tar</span> 要打包的文件<br><span class="hljs-comment"># 压缩</span><br>tar -zcvf 文件名<span class="hljs-string">.tar.gz</span> 要打包压缩的文件<br><span class="hljs-comment"># 解压</span><br>tar -zxvf 要解压的压缩文件<br></code></pre></td></tr></table></figure><h3 id="挂载与卸载"><a href="#挂载与卸载" class="headerlink" title="挂载与卸载"></a>挂载与卸载</h3><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">mount</span><br><span class="hljs-attribute">umount</span><br></code></pre></td></tr></table></figure><p>创建虚拟硬盘分区并挂载</p><p><a href="https://blog.csdn.net/weixin_46818279/article/details/107007052?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166580861016782390529713%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166580861016782390529713&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-107007052-null-null.142%5Ev56%5Econtrol,201%5Ev3%5Econtrol_2&utm_term=linux%E5%88%86%E5%8C%BA&spm=1018.2226.3001.4187">参考</a></p><p><a href="https://blog.csdn.net/Robin_Pi/article/details/109379603?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522166580917016800180692315%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=166580917016800180692315&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-1-109379603-null-null.142%5Ev56%5Econtrol,201%5Ev3%5Econtrol_2&utm_term=linux%E5%AF%B9%E6%96%B0%E5%A2%9E%E7%A3%81%E7%9B%98%E8%BF%9B%E8%A1%8C%E5%88%86%E5%8C%BA&spm=1018.2226.3001.4187">参考</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>文件系统的挂载与卸载</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h3 id="关机"><a href="#关机" class="headerlink" title="关机"></a>关机</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs arduino">shutdown -h +<span class="hljs-number">2</span> <span class="hljs-comment">//两分钟后关机</span><br>shutdown -h <span class="hljs-number">22</span>:<span class="hljs-number">00</span> <span class="hljs-comment">//时间点关机</span><br></code></pre></td></tr></table></figure><h3 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">cal <span class="hljs-number">2022</span><span class="hljs-regexp">//</span>查看日历<br>date <span class="hljs-regexp">//</span>查看时间<br></code></pre></td></tr></table></figure><h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20220929113210711.png" alt="image-20220929113210711"></p><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">sudo useradd <span class="hljs-keyword">user</span> <br><span class="hljs-title">cat</span> /etc/passwd<br>sudo cat /etc/shadow<br>sudo passwd <span class="hljs-keyword">user</span> <span class="hljs-title"></span><br></code></pre></td></tr></table></figure><h3 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><h1 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h1><h3 id="进程与程序"><a href="#进程与程序" class="headerlink" title="进程与程序"></a>进程与程序</h3><p>进程是动态的，程序是静态的</p><h3 id="进程特征"><a href="#进程特征" class="headerlink" title="进程特征"></a>进程特征</h3><p>动态性，并发性，独立性，异步性，机构性</p><p>启动终端</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs excel">ctrl+alt+<span class="hljs-built_in">T</span><br></code></pre></td></tr></table></figure><p>查看进程相关信息</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs excel">ps<br>ps -l  查看进程优先级<br>nice -<span class="hljs-built_in">n</span> vi&amp; <span class="hljs-built_in">n</span>表示优先级，范围为-<span class="hljs-number">20</span>~<span class="hljs-number">19</span>，<span class="hljs-built_in">n</span>越小，优先级越高 <br></code></pre></td></tr></table></figure><p>后台启动歌曲</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">vi</span> song 前台<br><span class="hljs-keyword">vi</span> song&amp; 后台<br></code></pre></td></tr></table></figure><p>挂起与激活进程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">ctrl+z 挂起<br><span class="hljs-built_in">fg</span> 挂起<br><span class="hljs-built_in">bg</span> 激活，然后在后台运行<br></code></pre></td></tr></table></figure><p>终止进程</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">fg  <span class="hljs-regexp">//</span>调用后台进程到前台<br>ctrl+c <span class="hljs-regexp">//</span>终止前台进程<br><br><br>kill [信号码] pid<br>kill -l<br></code></pre></td></tr></table></figure><p>进程的监视</p><figure class="highlight coq"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coq"><span class="hljs-built_in">top</span> <br></code></pre></td></tr></table></figure><p>日志</p><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs maxima">/<span class="hljs-built_in">var</span>/<span class="hljs-built_in">log</span><br>/<span class="hljs-built_in">var</span>/<span class="hljs-built_in">log</span>/wtmp<br><span class="hljs-built_in">last</span> -a   <br><br></code></pre></td></tr></table></figure><p>系统监视器</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs clean">gnome-<span class="hljs-keyword">system</span>-monintor<br></code></pre></td></tr></table></figure><h3 id="用户与用户组"><a href="#用户与用户组" class="headerlink" title="用户与用户组"></a>用户与用户组</h3><h4 id="用户的创建，修改，删除"><a href="#用户的创建，修改，删除" class="headerlink" title="用户的创建，修改，删除"></a>用户的创建，修改，删除</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs css">sudo useradd username<br>sudo useradd -g groupname username<br>sudo usename -d filepath username<br>sudo passwd username <br>sudo usermod username<br><span class="hljs-selector-tag">del</span> <br></code></pre></td></tr></table></figure><h4 id="用户组的-创建，修改，删除"><a href="#用户组的-创建，修改，删除" class="headerlink" title="用户组的 创建，修改，删除"></a>用户组的 创建，修改，删除</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">sudo groupaad groupname</span><br><br></code></pre></td></tr></table></figure><h3 id="软件的安装"><a href="#软件的安装" class="headerlink" title="软件的安装"></a>软件的安装</h3><p>APT</p><p>修改软件源</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo mv <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/sources.list  /</span>home<span class="hljs-regexp">/desktop/</span>beifen_source.list<br>sudo gedit <span class="hljs-regexp">/etc/</span>apt/sources.list<br><br><span class="hljs-comment"># 20.04 LTS</span><br><span class="hljs-comment"># 默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> focal main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> focal-updates main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> focal-backports main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br>deb https:<span class="hljs-regexp">//mi</span>rrors.tuna.tsinghua.edu.cn<span class="hljs-regexp">/ubuntu/</span> focal-security main restricted universe multiverse<br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><br><span class="hljs-comment"># 预发布软件源，不建议启用</span><br><span class="hljs-comment"># deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-proposed main restricted universe multiverse</span><br><br>sudo apt update<br>sudo apt upgrade<br></code></pre></td></tr></table></figure><h3 id="硬盘的创建与挂载"><a href="#硬盘的创建与挂载" class="headerlink" title="硬盘的创建与挂载"></a>硬盘的创建与挂载</h3><h3 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">ps  <span class="hljs-regexp">//</span>查看进程<br>ps -aux <span class="hljs-regexp">//</span>查看所有进程<br><br> kill -kill <span class="hljs-number">12130</span><br><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java基础</title>
    <link href="/2023/02/19/java%E5%9F%BA%E7%A1%80%E6%AF%95%E5%90%91%E4%B8%9C/"/>
    <url>/2023/02/19/java%E5%9F%BA%E7%A1%80%E6%AF%95%E5%90%91%E4%B8%9C/</url>
    
    <content type="html"><![CDATA[<p>【快速掌握java基础，向经典致敬！】 <a href="https://www.bilibili.com/video/BV1ZA4y1Z7AG/?share_source=copy_web&amp;vd_source=70cc6cc4d914ab47d314c582870ab8e7">https://www.bilibili.com/video/BV1ZA4y1Z7AG/?share_source=copy_web&amp;vd_source=70cc6cc4d914ab47d314c582870ab8e7</a></p><h2 id="导论"><a href="#导论" class="headerlink" title="导论"></a>导论</h2><h2 id="dos命令"><a href="#dos命令" class="headerlink" title="dos命令"></a>dos命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs powershell"><span class="hljs-built_in">dir</span><br><span class="hljs-built_in">cd</span>\  进入根目录<br><span class="hljs-built_in">cd</span> d:<br>d:<br><span class="hljs-built_in">cd</span> d:/Desktop/ <br><span class="hljs-built_in">md</span> file 创建目录<br><span class="hljs-built_in">rd</span> file 删除目录<br><span class="hljs-built_in">cd</span> .. 退一级目录<br><span class="hljs-built_in">echo</span> hahha&gt;<span class="hljs-number">1</span>.txt<br><span class="hljs-built_in">del</span> <span class="hljs-number">1</span>.txt<br><span class="hljs-built_in">del</span> *.txt<br><span class="hljs-built_in">set</span>  设置环境命令<br><span class="hljs-built_in">copy</span> con java.java 创建文件<br>notepad java.java 记事本打开<br><span class="hljs-built_in">cls</span> 清屏<br><span class="hljs-built_in">start</span> 开启新的cmd<br><br></code></pre></td></tr></table></figure><p>环境的安装</p><figure class="highlight clean"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs clean">##### JDK：含有JRE和运行的虚拟机<br><br>###### JRE：运行程序的包<br><br>###### 虚拟机：运行环境<br></code></pre></td></tr></table></figure><h3 id="cmd运行Java"><a href="#cmd运行Java" class="headerlink" title="cmd运行Java"></a>cmd运行Java</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">javac </span>demo.<span class="hljs-keyword">java</span><br><span class="hljs-keyword"></span><br><span class="hljs-keyword">java </span>demo<br></code></pre></td></tr></table></figure><p>设置环境变量</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-builtin-name">set</span> <span class="hljs-attribute">classpath</span>=D:\Desktop\code\Dos\day1;加分号可以在这目录找不到，可以在当前目录下找一次<br><br></code></pre></td></tr></table></figure><p>类</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>注释</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">//</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">这是程序的入口</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>编程前的准备工作</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">步骤：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>字符串与字符</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs scheme"><span class="hljs-symbol">&#x27;a</span>&#x27;<br><span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p>进制</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">二进制 <br>十进制<br>八进制：三位二进制<br>十六进制：四位二进制表示<span class="hljs-comment">(0x)</span><br>一个字节八位数<br><br>整数变负数：取反，然后加一，负数的二级制都是<span class="hljs-number">1</span><br></code></pre></td></tr></table></figure><p>变量</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20220926210901297.png" alt="image-20220926210901297"></p><p>命名格式</p><p>数据类型 变量名=变量</p><p>小东西能装进大口袋，大东西不能装进小口袋，需要进行标识（l,f)</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">int <span class="hljs-attribute">a</span>=12;<br>short <span class="hljs-attribute">c</span>=2000;<br>long <span class="hljs-attribute">d</span>=4l;<br>float <span class="hljs-attribute">e</span>=2f;<br>      double <span class="hljs-attribute">g</span>=3;<br>      char <span class="hljs-attribute">ch1</span>=<span class="hljs-string">&#x27;1&#x27;</span>;<br></code></pre></td></tr></table></figure><p>类型转换</p><p>当低位运算与高位运算时，低位向高位转换</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">a</span>=(byte)<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>++a 先自加后运算</p><p>a++ 先运算后自加</p><p>字符串数据和任何数据使用+都是相连接，最终都会变成字符串</p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs subunit">&quot;as&quot;<span class="hljs-string">+5</span><span class="hljs-string">+5</span> =as55<br></code></pre></td></tr></table></figure><p>转义字符</p><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs livescript"><span class="hljs-string">\n</span> 换行<br><span class="hljs-string">\b</span> 推格backsapce<br><span class="hljs-string">\r</span> 回车<br><span class="hljs-string">\t</span> tab<br></code></pre></td></tr></table></figure><p><em>tops</em></p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">shot <span class="hljs-keyword">a</span>=<span class="hljs-number">2</span><br><span class="hljs-keyword">a</span>=<span class="hljs-keyword">a</span>+<span class="hljs-number">2</span> <span class="hljs-comment"> //编译不通过</span><br><span class="hljs-keyword">a</span>+=<span class="hljs-number">2</span> <span class="hljs-comment"> //编译通过</span><br></code></pre></td></tr></table></figure><p>逻辑运算符</p><p>连接布尔表达式</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs 1c"><span class="hljs-meta">&amp;  且：x&gt;2&amp;x&lt;3 有假为假的</span><br><span class="hljs-string">|  或：有真为真</span><br>^  异或：两边不一样为真，两边相同为假<br>！ 非<br><span class="hljs-meta">&amp;&amp;  第一个为假就不计算后面的</span><br><span class="hljs-string">||  第一个为真就不计算后面的</span><br></code></pre></td></tr></table></figure><p>位运算</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash">3&lt;&lt;<span class="hljs-string">2 3的2</span>进制向左移2位 <br>6&gt;&gt;2 6的2进制向右移2位<br>&gt;&gt; 最高位补什么由原数据的最高位值而定，<br>&gt;&gt;&gt; 无符号右移，无论最高位是什么，都用零补<br>一个数异或两次还是本身（加密）<br>结论：左移x位，数字乘以2^x^,右移除以2^x^<br></code></pre></td></tr></table></figure><p>交换数值</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs excel">example1<br><span class="hljs-built_in">int</span> temp,<span class="hljs-built_in">n</span>,m<br>temp=<span class="hljs-built_in">n</span><br><span class="hljs-built_in">n</span>=m<br>m=temp<br><br>example2<br>m=m+<span class="hljs-built_in">n</span><br><span class="hljs-built_in">n</span>=m-<span class="hljs-built_in">n</span><br>m=m-<span class="hljs-built_in">n</span><br><br>example3<br><span class="hljs-built_in">n</span>=<span class="hljs-built_in">n</span>^m<br>m=<span class="hljs-built_in">n</span>^m//((<span class="hljs-built_in">n</span>^m)^m)<br><span class="hljs-built_in">n</span>=<span class="hljs-built_in">n</span>^m//(<span class="hljs-built_in">n</span>^(<span class="hljs-built_in">n</span>^m))<br><br></code></pre></td></tr></table></figure><p>进制转换</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs isbl">&amp; 获取最低位<br>&gt;&gt; 右移<br><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">char</span></span>(<span class="hljs-variable">num</span>-<span class="hljs-number">10</span>+<span class="hljs-string">&#x27;A&#x27;</span>)</span><br></code></pre></td></tr></table></figure><p>条件表达式</p><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dns">(x&gt;<span class="hljs-number">1</span>)? <span class="hljs-number">100:200</span><br></code></pre></td></tr></table></figure><p>if else</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">month</span>&gt;<span class="hljs-number">12</span> || <span class="hljs-built_in">month</span>&lt;<span class="hljs-number">1</span>)&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;输入错误&quot;</span>);<br>&#125;<br><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">month</span>&gt;=<span class="hljs-number">3</span>&amp;<span class="hljs-built_in">month</span>&lt;=<span class="hljs-number">5</span>)&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;春天&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">month</span>&gt;=<span class="hljs-number">6</span>&amp;<span class="hljs-built_in">month</span>&lt;=<span class="hljs-number">8</span>)&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;夏日&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">month</span>&gt;=<span class="hljs-number">9</span>&amp;<span class="hljs-built_in">month</span>&lt;=<span class="hljs-number">11</span>)&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;秋天&quot;</span>);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;冬天&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>switch</p><p>特点：</p><p>如果匹配的case或default没有对应的break，那么程序会继续向下执行，运行可执行的语句，直到break或者swithc结尾结束</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(x)&#123;<br><span class="hljs-keyword">default</span>:<br>System.out.println(<span class="hljs-string">&quot;nono&quot;</span>);<br><span class="hljs-comment">// break;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>System.out.println(x+<span class="hljs-string">&quot;春季&quot;</span>);<br><span class="hljs-comment">// break;</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">12</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>System.out.println(x+<span class="hljs-string">&quot;冬季&quot;</span>);<br><span class="hljs-comment">// break;</span><br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">8</span>:<br>System.out.println(x+<span class="hljs-string">&quot;夏季&quot;</span>);<br><span class="hljs-comment">// break;</span><br><br><span class="hljs-keyword">case</span> <span class="hljs-number">9</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">10</span>:<br><span class="hljs-keyword">case</span> <span class="hljs-number">11</span>:<br>System.out.println(x+<span class="hljs-string">&quot;秋季&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="if-与switch语句的应用场景"><a href="#if-与switch语句的应用场景" class="headerlink" title="if 与switch语句的应用场景"></a>if 与switch语句的应用场景</h3><p>if和switch语句很像，具体什么场景下，应用哪个语句呢？<br>如果判断的只体数值不多，而是符合byte short int char:这四种类型.<br>虽然两个语句都可以使用，建议使用swticl语句。因为效率稍高。</p><p>其他情况：对区间判断，对结果为boolean类型判断，使用if,i的使用范围更广，</p><h3 id="while-dowhile-for"><a href="#while-dowhile-for" class="headerlink" title="while dowhile for"></a>while dowhile for</h3><p>whi1e:先判断条件，只有条件满足才执行循环体.<br>do whi1e:先执行循环体，在判断条件，条件满足，再继续执行循环体。<br>简单一句话：do whi1e:无论条件是否满足，循环体至少执行一次.</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span>(i&lt;<span class="hljs-number">3</span>)&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(i);<br>i++;<br>&#125;<br><br><span class="hljs-type">int</span> y=<span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span>&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(y);<br>y++;<br>&#125;<span class="hljs-keyword">while</span>(y&lt;<span class="hljs-number">3</span>);<br><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;<span class="hljs-number">3</span>;j++)&#123;<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(j);<br>&#125;<br><br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">无限循环结构</span><br><span class="hljs-comment">for(;;)&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">while(True)&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>/*1,变量有自己的作用域。对于for来讲：如果将用于控制循环的增量定义在for语句中。那么该变量只for语句内有效for语句执行完毕。该变量在内存中被释放.<br>2,for和while可以进行互换。如果需要定义循环增量。用for更为合适。<br>总结：什么时候使用循环结构？<br>当要对某些语句执行很多次时，就使用循环结构。<br>*/</p><h3 id="累加思想"><a href="#累加思想" class="headerlink" title="累加思想"></a>累加思想</h3><p>通过变量记录每次变化的结果，通过循环完成 累加动作</p><h3 id="计数器思想"><a href="#计数器思想" class="headerlink" title="计数器思想"></a>计数器思想</h3><p>通过变量记录数据的状态变化</p><h3 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h3><blockquote><p>forfortest.java</p></blockquote><h3 id="上三角与下三角"><a href="#上三角与下三角" class="headerlink" title="上三角与下三角"></a>上三角与下三角</h3><p>不是规律的规律：</p><p>尖朝上，可以改变条件。让条件随着外循环变化。</p><p>尖朝下，可以初始化值，让初始化随着外循环变化。</p><h3 id="循环起名"><a href="#循环起名" class="headerlink" title="循环起名"></a>循环起名</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20220930204533788.png" alt="image-20220930204533788"></p><h4 id="continue与break"><a href="#continue与break" class="headerlink" title="continue与break"></a>continue与break</h4><p>break:跳出所有循环</p><p>continue:只能作用于循环结构，继续循环，特点：结束本次循环，继续下一次循环，</p><p>2,break和continue单独存在时，下面可以有任何语句。因为都执行不到.</p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><h4 id="函数格式"><a href="#函数格式" class="headerlink" title="函数格式"></a>函数格式</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">修饰符 返回值类型 函数名（参数类型 形式参数<span class="hljs-number">1</span>，参数类型 形式参数<span class="hljs-number">2</span>，）<br>&#123;<br>执行语句<br><span class="hljs-keyword">return</span>返回值<br>&#125;<br>返回值类型：函数运行后的结果的数据类型。<br>参数类型：是形式参数的数据类型。<br>形式参数：是一个变量，用于存储调用函数时传递给函数的实际参数。<br>实际参数：传递给形式参数的具体数值。<br><span class="hljs-keyword">return</span>::用于结束函数。<br>返回值：该值会返回给调用者。<br></code></pre></td></tr></table></figure><p>无返函数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>当函数运算后，没有具体的返回值时，这是返回值类型用一个特殊的关键字来标识。<br><span class="hljs-regexp">//</span>该关键字就是void,void:代表的是函数没有具体返回值的情况，<br><span class="hljs-regexp">//</span>当函数的返回值类型是void时，函数中的return语句可以省路略不写。<br></code></pre></td></tr></table></figure><p>函数思想</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs">如何定义一个函数呢？<br>1,既然函数是一个独立的功能，那么该功能的运算结果是什么先明确<br>2,在明确在定义该功能的过程中是否需要未知的内容参与运算，<br></code></pre></td></tr></table></figure><p>思想问题：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">这个功能定义思想有问题，为什么呢？<br>因为只为完成加法运算，至于是否要对和进行打印操作，那是调用者的事，不要在该功能中完成。<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> <span class="hljs-keyword">get</span>(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println (a+b);<br><span class="hljs-keyword">return</span><br>&#125;<br>报错：<br><span class="hljs-keyword">function</span>.java:<span class="hljs-number">33</span>: 错误: 不兼容的类型: <span class="hljs-type">void</span>无法转换为<span class="hljs-type">int</span><br>                <span class="hljs-type">int</span> biger=biger(<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>这样的返回值无法直接使用<br></code></pre></td></tr></table></figure><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><p>重载的概念在同一个类中，允许存在一个以上的同名函数，只要它们的参数个数或者参数类型不同即可。<br>重载的特点：与返回值类型无关，只看参数列表。<br>重戴的好处：方便于阅读，优化了程序设计。</p><p>重载与函数的返回类型没有关系</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">overload</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br><br><span class="hljs-keyword">int</span> x=<span class="hljs-built_in">sum</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br><span class="hljs-keyword">int</span> y=<span class="hljs-built_in">sum</span>(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>);<br>System.out.<span class="hljs-built_in">println</span>(x+y);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br><br><span class="hljs-keyword">return</span> a+b;<br><br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sum</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b ,<span class="hljs-keyword">int</span> c)</span></span>&#123;<br><br><br><span class="hljs-keyword">return</span> a+b+c;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>什么时候用重载？<br>当定义的功能相同，但参与运算的未知内容不同。<br>那么，这时就定义一个函数名称以表示起功能，方便阅读，而通过参数列表的不同来区分多个同名函数。</p><h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>概念：同一种类型数据的集合,其实数组就是一容器。<br>数组的好处：可以自动给数组中的元素从0开始编号，方便操作这些元素。<br>格式1：元素类型[] 数组名=new 元素类型[元素个数或数组长度]：</p><p>示例：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">int</span>[] arr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">5</span>];<br></code></pre></td></tr></table></figure><p>格式2：</p><p>元素类型[] 数组名=new 元素类型[]{元素，元素，}</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] arr =new int[]&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>);<br><br><span class="hljs-attribute">int</span>[] arr=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">1</span>,<span class="hljs-number">7</span>&#125;<br><br><br></code></pre></td></tr></table></figure><p>以下代码说明了数组初始化：</p><p>默认情况下，intArray [0]，intArray [1]和intArray [2]初始化为零。</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">int</span>[]  <span class="hljs-built_in">int</span>Array = new <span class="hljs-built_in">int</span>[<span class="hljs-number">3</span>];<br></code></pre></td></tr></table></figure><p>数组变字符串</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">s</span>)</span><br></code></pre></td></tr></table></figure><h3 id="栈与堆"><a href="#栈与堆" class="headerlink" title="栈与堆"></a>栈与堆</h3><p>栈：存放基本数据类型</p><p>堆：存放引用数据类型，内存地址值，都有默认值，存放实体，垃圾回收机制</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221003222917438.png" alt="image-20221003222917438"></p><p>数组是在栈中存放的堆中开辟的数组空间的地址值</p><h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>获取数组中的最大值</p><p>注释：初始max为零的情况应注意，当数组中的元素全为负数时，最大值错误。</p><p>可以初始化角标为零</p><h2 id="排序"><a href="#排序" class="headerlink" title="排序:"></a>排序:</h2><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><h4 id="选择排序："><a href="#选择排序：" class="headerlink" title="选择排序："></a>选择排序：</h4><p>方法:将第一个数与剩下的数依次进行比较，当有比他大的，就交换位置，依次比较剩下的数(比较次数逐渐减少，下三角)</p><h4 id="冒泡排序："><a href="#冒泡排序：" class="headerlink" title="冒泡排序："></a>冒泡排序：</h4><p>从第一个开始，依次比较相邻的两个数，当前者比后者大就交换位置，依次内推，第一轮循环结束就把最大的数排到末尾<br>第二次循环开始，重复上一步骤，将倒数第二大的数排在倒数第二的位置</p><p>希尔排序</p><p>内置函数排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br>Arrays.sort(arr);<span class="hljs-comment">//java中已经定义好的一种排序方式，开发中，对数组排序，要使用该句代码，</span><br></code></pre></td></tr></table></figure><h3 id="查找"><a href="#查找" class="headerlink" title="查找:"></a>查找:</h3><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*</span><br><span class="hljs-comment">二分查找</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">思想：</span><br><span class="hljs-comment">确定查找的数key</span><br><span class="hljs-comment">将数组变成一个有序排序的数组</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">定义一个当型循环(array[mid]!=key)</span><br><span class="hljs-comment">取角标的最大值，最小值，中值</span><br><span class="hljs-comment">mid=(min+max)/2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">当key&gt;array[mid],min=mid+1</span><br><span class="hljs-comment">key&lt;array[mid],max=mid-1;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">max&lt;min return -1</span><br><span class="hljs-comment">*/</span> <br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">chazhao</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br><span class="hljs-keyword">int</span>[] array1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">22</span>,<span class="hljs-number">6</span>&#125;;<br><span class="hljs-keyword">int</span> key=<span class="hljs-number">29</span>;<br><span class="hljs-built_in">bublesort</span>(array1);<br>System.out.<span class="hljs-built_in">println</span>(array1[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">int</span> index=<span class="hljs-built_in">chazhao2</span>(array1,key);<br>System.out.<span class="hljs-built_in">println</span>(index);<br><br><br>&#125;<br><br><span class="hljs-comment">/*二分查找*/</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">chazhao</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> key)</span></span>&#123;<br><span class="hljs-keyword">int</span> min=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> max=array.length<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> mid=(min+max)/<span class="hljs-number">2</span>;<br><br><br><span class="hljs-keyword">while</span>(array[mid]!=key)&#123;<br><br><span class="hljs-keyword">if</span>(array[mid]&lt;key)&#123;<br>min=mid+<span class="hljs-number">1</span>;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(array[mid]&gt;key)&#123;<br><br>max=mid<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(max&lt;min)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br>mid=(min+max)/<span class="hljs-number">2</span>;<br>&#125;<br><span class="hljs-keyword">return</span> mid;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">二分查找的第二种写法</span><br><span class="hljs-comment">更换循环判断条件：只要max不小于min就一直进行二分查找</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span> <br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">chazhao2</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array,<span class="hljs-keyword">int</span> key)</span></span>&#123;<br><span class="hljs-keyword">int</span> min=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> max=array.length<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">int</span> mid=(min+max)/<span class="hljs-number">2</span>;<br><br><br><span class="hljs-keyword">while</span>(max&gt;=min)&#123;<br>mid=(min+max)/<span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">if</span>(array[mid]&lt;key)&#123;<br>min=mid+<span class="hljs-number">1</span>;<br><br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(array[mid]&gt;key)&#123;<br><br>max=mid<span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> mid;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><br><br><span class="hljs-comment">/*冒泡排序*/</span> <br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">bublesort</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] array)</span></span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;array.length<span class="hljs-number">-1</span>;i++)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> j=<span class="hljs-number">0</span>;j&lt;array.length-i<span class="hljs-number">-1</span>;j++)&#123;<br><br><span class="hljs-keyword">if</span>(array[j]&gt;array[j+<span class="hljs-number">1</span>])&#123;<br><span class="hljs-keyword">int</span> temp=array[j];<br>array[j]=array[j+<span class="hljs-number">1</span>];<br>array[j+<span class="hljs-number">1</span>]=temp;<br><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br> <br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="进制转换思想"><a href="#进制转换思想" class="headerlink" title="进制转换思想"></a>进制转换思想</h2><p>十进制转二进制</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart">将十进制数传入<br>对十进制数进行莫<span class="hljs-number">2</span><br>对十进制除<span class="hljs-number">2</span><br>循环遍历，直到 <span class="hljs-built_in">num</span>&lt;=<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><p>十六进制转二进制</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs gcode">无返回类<br>传入十进制参数<br>与<span class="hljs-number">15</span>进行与操作，目的时为了取下第一个四位<br>然后判断与后的数是否大于 <span class="hljs-number">9</span>，是就进行转换<span class="hljs-comment">(char(temp-10+’A‘)</span>)，不是就不进行转换<span class="hljs-comment">(写法二：可以将十六进制放入数组中，而数组的索引就是对应的值，只需要取该索引</span><br><span class="hljs-comment">对应的值即可完成十六进制的字符转换)</span><br>然后进行无符号右移四位，取接下来的四位<br>结束的标志，<span class="hljs-number">32</span>的数最多取<span class="hljs-number">8</span>次四位，循环最多八次<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221006192202671.png" alt="image-20221006192202671"></p><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">int</span>[][] array=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span> array1[][]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br><span class="hljs-keyword">int</span>[] array2[]=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">3</span>][<span class="hljs-number">3</span>];<br><span class="hljs-keyword">int</span>[][] array3=<span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,&#123;<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<br><span class="hljs-comment">// 特列 int[] x,array4[]; x为一维数组，array4[]为二维数组</span><br><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221007200712590.png" alt="image-20221007200712590"></p><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221007204650520.png" alt="image-20221007204650520"></p><p>例子一：开发项目</p><p>面向过程：老板自己学习编程，然后自己一步一步的进行开发</p><p>面向对象：老板招聘一批专业开发的人，然后指挥这些人开发这些项目</p><p>例子二：买电脑</p><p>面向过程：自己学习相关电脑的知识，然后再去买电脑</p><p>面向对象：找一个懂电脑的人一起去买电脑，自己只需要付钱即可</p><p>例子三：炒菜</p><p>面向过程：切菜，洗菜，炒菜完成一盘菜</p><p>面向对象：找一个厨子，然后给他说炒什么菜即可</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">/*人开门：名词提炼法</span><br><span class="xml">人</span><br><span class="xml"></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">开门（门）&#123;</span><br><span class="hljs-template-variable">门.开()</span><br><span class="hljs-template-variable">&#125;</span><span class="xml"></span><br><span class="xml">&#125;</span><br><span class="xml"></span><br><span class="xml">门</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">开()&#123;</span><br><span class="hljs-template-variable">操作门轴等</span><br><span class="hljs-template-variable">&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">&#125;*/</span><br></code></pre></td></tr></table></figure><p>/面可对象：三个特征：封装，继承，多态</p><p>//以后开发：其实就是找对象使用。没有对象，就创建一个对象。<br>//找对象，建立对象，使用对象。维护对象的关系。</p><h3 id="类和对象的关系："><a href="#类和对象的关系：" class="headerlink" title="类和对象的关系："></a>类和对象的关系：</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk">类就是：对现实生活中事物的描述。描述事物其实就是在描述事物的属性和行为。<br>对象：就是这类事物，实实在在存在个体。<br><span class="hljs-regexp">//</span>属性对应是类中变量，行为对应的类中的函数（方法）。<br><span class="hljs-regexp">//</span>其实定义类，就是在描述事物，就是在定义属性和行为。<br>映射到java中，描述就是class定义的类.<br>具体对象就是对应java在堆内存中用new建立实体.<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221008185402640.png" alt="image-20221008185402640"></p><p>card对象</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">car</span>&#123;</span><br><br><span class="hljs-comment">//成员变量</span><br><br><span class="hljs-keyword">String</span> color=<span class="hljs-string">&quot;red&quot;</span>;<br><span class="hljs-keyword">int</span> num=<span class="hljs-number">4</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(color+<span class="hljs-string">&quot;--&quot;</span>+num);<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>多个引用指向同一个对象</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>实例化一个车对象<br>car car1=new car();<br><span class="hljs-regexp">//</span>多个引用指向同一个对象<br>car car2=car1;<br></code></pre></td></tr></table></figure><p>成员变量和局都变量。</p><p>成员变量都有默认的初始化值，不用赋值也可以参与运算。局部变量没有初始化值</p><p>作用范围：成员变量作用于整个类中，局部变量变量作用于函数中，或者语句中，在内存中的位置：成员变量：在堆内存中，因为对象的存在，才在内存中存在。<br>局部变量：存在栈内存中。</p><p>匿名对象</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//匿名对象</span><br><span class="hljs-keyword">new</span> <span class="hljs-type">car</span>().run();<br><br><br>car car3=<span class="hljs-keyword">new</span> <span class="hljs-type">car</span>();<br>showcar(car3);<br>showcar(<span class="hljs-keyword">new</span> <span class="hljs-type">car</span>());<br></code></pre></td></tr></table></figure><p>//匿名对象使用方式一：当对对象的方法只调用一次时，可以用匿名对象来完成，这样写比较简化。<br>//如果对一个对象进行多个成员调用，必须给这个对象起个名字。</p><p>/匿名对象使用方式二；可以将匿名对象作为实际参数进行传递。</p><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装：是指隐藏对象的属性和实现细节，仅对外提供公共访问方式。<br>好处：</p><p>。将变化隔离。<br>。便于使用。<br>。提高重用性。<br>。提高安全性。<br>封装原则：·将不需要对外提供的内容都隐藏起来。<br>把属性都隐藏，提供公共方法（set,get)对其访问</p><p>注意：私有仅仅是封装的一种表现形式。之所以对外提供访问方式，就因为可以在访问方式中加入逻辑判断等语句。<br>对访问的数据进行操作。提高代码键壮性。</p><p>private:私有，权根修饰符：用于修师类中的成员（成员变量，成员函数）私有只在本类中有效。</p><p>一个成员变量通常有两个访问方法</p><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><p>特点：1.函数名与类名相同</p><p>​            2.不用定义返回值类型</p><p>​            3.不可以写return语句作用：给对象进行初始化。<br>注意：1.默认构造函数的特点。<br>​            2.多个构造函数是以重载的形式存在的。</p><p>对象一建立就会调用与之对应的构造函数构造函数的作用：可以用于给对象进行初始化。<br>构造函数的小细节：当一个类中没有定义构造函数时，那么系统会默认给该类加入一个空参数的构造函数。当在类中自定义了构造函数后，默认的构造函数就没有了</p><p>在运行上也有不同。<br>构造函数是在对象一建立就运行。给对象初始化，而一般方法是对象调用才执行，给是对象添加对象具备的功能。<br>一个对象建立，构造函数只运行一次。<br>而一般方法可以被该对象调用多次。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>people(String n,<span class="hljs-type">int</span> a)&#123;<br><span class="hljs-type">name</span>=n;<br>age=a;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">name</span>+age);<br>cry();<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>构造代码块<br>作用：给对象进行初始化：对象一建立就运行，而且优先于构造函数执行。<br>和构造函数的区别：</p><p>构造代码块是给所有对象进行统一初始化，</p><p>而构造函数是给对应的对象初始化，*/</p><figure class="highlight clojure"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs clojure">&#123;<br><br>System.out.println(<span class="hljs-string">&quot;code is run&quot;</span>)<span class="hljs-comment">;</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>this:看上去，是用于区分局部变量和成员变量同名情况</p><p>this为什么可以解决这个间题？<br>this到底代表的是什么呢？<br>this:就代表本类的对象，到底代表哪一个呢？<br>this代表它所在函数所属对象的引用.<br>简单说：哪个对象在调用this所在的函数，this就代表哪个对象.</p><p>this的应用：当定义类中功能时，该函数内部要用到调用该函数的对象时，这时用this来表示这个对象。<br>但凡本类功能内部使用了了本类对象，都用this表示.</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">compare</span>(<span class="hljs-params">people p</span>)</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.age==p.age;<br>&#125; <br></code></pre></td></tr></table></figure><p>this语句：用于构造函数之间进行互相调用。<br>this语句只能定义在构造函数的第一行。初始化要首先执行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">people</span>(<span class="hljs-params">int age</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.age=age;<br><span class="hljs-comment">// System.out.println(name);</span><br><span class="hljs-comment">// cry();</span><br><br>&#125;<br><span class="hljs-function"><span class="hljs-title">people</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name,int age</span>)</span>&#123;<br><span class="hljs-built_in">this</span>(age);<span class="hljs-comment">// this.age=age;</span><br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-comment">// System.out.println(name+age);</span><br>cry();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>用法:是一个修饰符，用于修饰成员（成员变量，成员函数）</p><p>当成员被静态修饰后，就多了一个调用方式，除了可以被对象调用</p><p>还可以直接被类名调用。类名.静态成员</p><p>static特点：</p><p>1,随着类的加载而加载。</p><p>也就是说，静态成员的生命周期短，类对象（静态成员）的生命周期长</p><p>2,优先于的对象存在</p><p>明确一点：静态是先存在，对象是后存在的</p><p>3.被所有对象所共享</p><p>4.可以直接被类名所调用。</p><p>实例变量和类变量的区别：<br> 1,存放位置。<br>         类变量随着类的加载而存在于方法区中，<br>         实例变量随着对象的建立而存在于堆内存中，<br> 2,生命周期：<br>         类变量生命周期最长，随着类的消失而消失。<br>         实例变量生命周期随着对象的消失而消失。</p><p>静态使用注意事项：<br> 1,静态方法只能访问静态成员。<br>     非静态方法既可以访问静态也可以访问非静态。<br> 2,静态方法中不可以定义this,super关键字，<br>     因为静态优先于对象存在，所以静态方法中不可以出现this。</p><p>3.主函数是静态的</p><p>静态有利有弊<br> 利处：对对象的共享数据进行单独空间的存储，节省空间。没有必要每一个对象中都存储一份。<br> 可以直接被类名调用。<br> 弊端：生命周期过长。<br> 访问出现局限性。(静态虽好，只能访问静态，)</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">person</span>&#123;</span><br><br><span class="hljs-keyword">int</span> age=<span class="hljs-number">12</span>;<br><span class="hljs-keyword">static</span>  <span class="hljs-keyword">String</span> contry=<span class="hljs-string">&quot;CN&quot;</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(age+contry);<br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">staticdemo</span> </span><br><span class="hljs-class"></span><br><span class="hljs-class">&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br><br><br>System.out.<span class="hljs-built_in">println</span>(person.contry);<span class="hljs-comment">//静态变量的直接调用</span><br><span class="hljs-comment">//System.out.println(person.age);无法从静态上下文中引用非静态 变量 age</span><br><br><br><br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="mian"><a href="#mian" class="headerlink" title="mian"></a>mian</h2><p>主函数：是一个特殊的函数。作为程序的入口，可以被JVM调用。</p><p>主函数的定义：</p><p>public:代表着该函数访问权限是最大的.<br>static：代表主函数随着类的加载就已经存在了，void:主函数没有具体的返回值。<br>main:不是关键字，但是是一个特殊的单词，可以被JVM识别。<br>(string[] arr):函数的参数，参数类型是一个数组，该数组中的元素是字符串，字符串类型的数组。</p><p>主函数是固定格式的：JVM识别。</p><p>在调用主函数时，传入的是new String[0]:</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">//直接给主函数传入参数的方式<br>D:<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\c</span>ode<span class="hljs-symbol">\D</span>os<span class="hljs-symbol">\d</span>ay16&gt;java main hahah<br>hahah<br></code></pre></td></tr></table></figure><p>调用主函数</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">main</span>&#123;</span><br><br><br><br><span class="hljs-comment">//main函数的传入参数为字符串类型，args可以替换成其他名称</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;args.length;i++)&#123;<br>System.out.<span class="hljs-built_in">println</span>(args[i]);<br><br>&#125;<br><br>&#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">maintest</span>&#123;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] x)</span></span>&#123;<br><span class="hljs-keyword">String</span>[] array=&#123;<span class="hljs-string">&quot;ssa&quot;</span>,<span class="hljs-string">&quot;ss&quot;</span>,<span class="hljs-string">&quot;ee&quot;</span>,<span class="hljs-string">&quot;fff&quot;</span>&#125;;<br>main.<span class="hljs-built_in">main</span>(array);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="java说明书（API文档）"><a href="#java说明书（API文档）" class="headerlink" title="java说明书（API文档）"></a>java说明书（API文档）</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">javadoc -d <span class="hljs-keyword">help</span> -author -version tool.java<br><span class="hljs-string">//-d</span> <span class="hljs-keyword">help</span> 创建名为<span class="hljs-keyword">help</span>的目录<br><span class="hljs-string">//-author</span> -version 带上作者名与版本号<br></code></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs less"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">这是进行说明书注释格式</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//说明书关键字</span><br><span class="hljs-variable">@author</span><br><span class="hljs-variable">@version</span> v1.<span class="hljs-number">0</span><br><span class="hljs-variable">@param</span> num <br><span class="hljs-variable">@return</span><br><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221020231403366.png" alt="image-20221020231403366"></p><h3 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h3><p>用于类的初始化<br>格式：static<br>{静态代码块中的执行语句}</p><p>特点：随着类的加载而执行，只执行一次<br>用于给类进行初始化的，</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="xml">static </span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable"> 给类初始化</span><br><span class="hljs-template-variable">&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml"></span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable"> 给对象初始化</span><br><span class="hljs-template-variable">&#125;</span><span class="xml"></span><br><span class="xml"></span><br><span class="xml">staticcode</span><span class="hljs-template-variable">&#123;</span><br><span class="hljs-template-variable">给对应对象初始化</span><br><span class="hljs-template-variable">&#125;</span><br></code></pre></td></tr></table></figure><h3 id="对象初始化"><a href="#对象初始化" class="headerlink" title="对象初始化"></a>对象初始化</h3><figure class="highlight ocaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs ocaml">/*<br><br><span class="hljs-type">Person</span> p=<span class="hljs-keyword">new</span> <span class="hljs-type">Person</span> (<span class="hljs-string">&quot;zhangsan&quot;</span>,<span class="hljs-number">20</span>);<br> 该句话都做了什么事情？<br> <span class="hljs-number">1</span>,因为<span class="hljs-keyword">new</span>用到了<span class="hljs-type">Person</span>.c1ass,所以会先找到<span class="hljs-type">Person</span>.<span class="hljs-keyword">class</span>文件并加载到内存中，<br> <span class="hljs-number">2</span>, 执行该类中的static代码块，如果有的话，给<span class="hljs-type">Person</span>.<span class="hljs-keyword">class</span>类进行初始化，<br> <span class="hljs-number">3</span>,在堆内存中开辟空间，分配内存地址。<br> <span class="hljs-number">4</span>,在堆内存中建立对象的特有属性。并进行默认初始化。<br> <span class="hljs-number">5</span>,对属性进行显示初始化。<br> <span class="hljs-number">6</span>, 对对象进行构造代码块初始化。<br> <span class="hljs-number">7</span>,对对象进行对应的构造函数初始化，<br> <span class="hljs-number">8</span>,将内存地址付给栈内存中的变量，<br> */<br>静态中无this,只有类名调用<br><br>属性初始化----&gt;构造代码块初始化-----&gt;构造函数初始化<br></code></pre></td></tr></table></figure><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><p>单例设计模式</p><p>设计模式：GOF<br> 单例设计模型<br>对统一对象的操作实现</p><p>单例设计模式：解决一个类在内存只存在一个对象。<br>想要保正对象唯一<br>1,为了避免其他程序过多建立该类对象。先禁止其他程序建立该类对象<br>2,还为了让其他程序可以访问到该类对象，只好在本类中，自定义一个对象，<br>3,为了方便其他程序对自定义对象的访问，可以对外提供一些访问方式<br>这三部怎么用代码体现呢？<br>1,将构造函数私有化，<br>2,在类中创建一个本类对象。<br>3,提供一个方法可以获取到该对象。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">model</span>&#123;</span><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">将对象函数私有化</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span> <br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">model</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">创建本类对象,私有化的静态变量</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> */</span> <br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> model m=<span class="hljs-keyword">new</span> <span class="hljs-built_in">model</span>();<br><span class="hljs-comment">/**</span><br><span class="hljs-comment">创建一个外界可以调用的方法，静态函数，直接采用类名调用</span><br><span class="hljs-comment">@return model类型</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span> <br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> model <span class="hljs-title">Getinstance</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">return</span> m;<br>&#125;<br><br><br><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">modeldemo</span>&#123;</span><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> </span>&#123;<br><br>     <span class="hljs-comment">/**</span><br><span class="hljs-comment">      直接采用类调用，创建对象 </span><br><span class="hljs-comment">      */</span> <br><br>     model m=model.<span class="hljs-built_in">Getinstance</span>();<br><br>&#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>饿汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">singe</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> singe s=<span class="hljs-keyword">new</span> singe;<br><span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">singe</span><span class="hljs-params">()</span></span>&#123;<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> singe <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">return</span> s<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>懒汉式(延迟加载)</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">singe</span></span>&#123;<br> <span class="hljs-keyword">private</span> staticsinge s=<span class="hljs-literal">null</span>;<br> <span class="hljs-keyword">private</span> <span class="hljs-function"><span class="hljs-title">singe</span>(<span class="hljs-params"></span>)</span>&#123;&#125;;<br> <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> singe <span class="hljs-function"><span class="hljs-title">getInstance</span>(<span class="hljs-params"></span>)</span>&#123;<br> <br> <span class="hljs-keyword">if</span> (s==<span class="hljs-literal">null</span>)&#123;<br> s=<span class="hljs-keyword">new</span> singe();<br> <br> &#125;<br> <span class="hljs-keyword">return</span> s;<br> &#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>多线程懒汉式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">singe</span></span>&#123;<br> <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  staticsinge s=<span class="hljs-keyword">null</span>;<br> <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">singe</span><span class="hljs-params">()</span></span>&#123;&#125;;<br> <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> singe <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br> <span class="hljs-keyword">if</span>(s==<span class="hljs-keyword">null</span>)&#123;<br> <span class="hljs-keyword">synchronized</span>(singe.class)&#123;<br>        <span class="hljs-keyword">if</span> (s==<span class="hljs-keyword">null</span>)&#123;<br>            s=<span class="hljs-keyword">new</span> singe();<br>        &#125;<br> &#125;<br>   <span class="hljs-keyword">return</span> s; <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>模板方法设计模式</p><p>什么是模版方法呢？<br>在定义功能时，功能的一部分是确定的，但是有一部分是不确定，而确定的部分在使用不确定的部分，<br>那么这时就将不确定的部分暴露出去，由该类的子类去完成。</p><p>子类不一定时抽象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个获取程序运行时间的小程序 </span><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">coderun</span></span>&#123;<br><br><span class="hljs-comment">//确定的部分</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">void</span> <span class="hljs-title">gettime</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">long</span> start= System.currentTimeMillis();<br><br>code();<span class="hljs-comment">//不确定的部分</span><br><br><span class="hljs-keyword">long</span> end= System.currentTimeMillis();<br><br>System.out.println(<span class="hljs-string">&quot;  &quot;</span>+(end-start)+<span class="hljs-string">&quot;ms&quot;</span>);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">code</span><span class="hljs-params">()</span></span>;<br><br><br><br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gettime</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">coderun</span></span>&#123;<br><span class="hljs-comment">//子类完成</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">code</span><span class="hljs-params">()</span></span>&#123;<br><br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10000</span>;i++)&#123;<br><br>   System.out.print(i);<br>   &#125;<br><br>&#125;<br><br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">gettimedemo</span></span>&#123;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br><span class="hljs-comment">// coderun c=new coderun();//抽象方法不能有主体，抽象方法不能实例化</span><br><span class="hljs-comment">// c.gettime();</span><br><br>gettime g=<span class="hljs-keyword">new</span> gettime();<br>g.gettime();<br><br><br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>其他关系：聚集，聚合，组合</p><p>Java话言中：java只支持单继承，不支持多继承。<br>因为多继承容易带来安全隐患：当多个父类中定义了相同功能，当功能内容不同时，子类对象不确定要运行哪一个。</p><p>java支持多层继承</p><p>Java语言中：java只支持单继承，不支持多继承，但是java保留这种机制，并用另一种体现形式来完成表示，多实现。<br>因为多继承容易带来安全隐患：当多个父类中定义了相同功能，<br>当功能内容不同时，子类对象不确定要运行那一个。</p><p>如何使用一个继承体系中的功能呢？<br>想要使用体系，先查阅体系父类的描述，因为父类中定义的是该体系中共性功能，<br>通过了解共性功能，就可以知道该体系的基本功能，<br>那么这个体系已经可以基本使用了，<br>那么在具体调用时，要创建最子类的对象，为什么呢？<br>一是因为有可能父类不能创建对象，<br>二是创建子类对象可以使用更多的功能，包括基本的也包括特有的，<br>简单一句话：查阅父类功能，创建子类对象使用功能：</p><h2 id="Super"><a href="#Super" class="headerlink" title="Super"></a>Super</h2><p>1,变量如果子类中出现非私有的同名成员变量时，子类要访间本类中的变量，用this子类要访问父类中的同名变量，访问父类的同名变量，用super</p><p>super的使用和this的使用几乎一致，</p><p>this代表的是本类对象的引用.<br>super代表的是父类对象的引用.</p><h3 id="覆盖"><a href="#覆盖" class="headerlink" title="覆盖"></a>覆盖</h3><p>2,子父类中的函数。<br>当子类出现和父类一模一样的函数时，</p><p>当子类对象用该函数，会运行子类函数的内容，如同父类的函数被覆盖一样。<br>这种情况是函数的另一个特性：重写（覆盖）</p><p>当子类继承父类，沿袭了父类的功能，到子类中，但是子类虽具备该功能，但是功能的内容却和父类不一致，这时，没有必要定义新功能，而是使用覆盖特殊，保留父类的功能定义，并重写功能内容。</p><p>覆盖：</p><p>1,子类覆盖父类，必须保证子类权限大于等于父类权限，才可以覆盖，否则编译失败。<br>2,静态只能覆盖静态</p><p>记住大家：重载：只看同名函数的参数列表，</p><p>重写：子父类方法要一模一样。（包含名字，传入参数，返回值类型）</p><h4 id="3-子父类中的构造函数。"><a href="#3-子父类中的构造函数。" class="headerlink" title="3,子父类中的构造函数。"></a>3,子父类中的构造函数。</h4><p>在对子类对象进行初始化时，父类的构造函数也会运行那是因为子类的构造函数默认第一行有一条隐式的语句super():</p><p>super():会访问父类中空参数的构造函数。而且子类中所有的构造函数都含有super</p><p>为什么子类一定要访问父类中的构造函数？</p><p>因为父类中的数据子类可以直接获取。所以子类对象在建立时，需要先查看父类是如何对这些数据进行初始化的。<br>所以子类在对象初始化时，要先访问一下父类中的构造函数。<br>如果要访问父类中指定的构造函数，可以通过手动定义super语句的方式来指定：</p><p>子类的实例化过程。<br>结论：子类的所有的构造函数，默认都会访问父类中空参数的构造函数，因为子类每一个构造函数内的第一行都有一句隐式super():当父类中没有空参数的构造函数时，子类必须手动通过super()语句形式来指定要访问父类中的构造函数。<br>当然：子类的构造函数第一行也可以手动指定this语句来访问本类中的构造函数.<br>子类中至少会有一个构造函数会访问父类中的构造函数。</p><p>this ,super 不能同时出现在同一个构造函数中</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//函数的继承复用，超类应用<br><span class="hljs-keyword">class</span> Fu&#123;<br><br><span class="hljs-type">int</span> num=<span class="hljs-number">4</span>;<br><span class="hljs-type">void</span> speak()&#123;<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;hello&quot;);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-keyword">work</span>()&#123;<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;work....&quot;);<br>&#125;<br><br><br>&#125;<br><span class="hljs-keyword">class</span> zi extends Fu&#123;<br><br><br><span class="hljs-type">void</span> speak()&#123;<br>super.speak();//调用父类的方法<br><br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;hello father&quot;);<br>&#125;<br><br><br><span class="hljs-type">int</span> num=<span class="hljs-number">1</span>;<br><span class="hljs-type">void</span> <span class="hljs-keyword">show</span>()&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(num);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(this.num);<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(super.num);<br><br>&#125;<br><br><br>&#125;<br><span class="hljs-keyword">class</span> extendsdemo&#123;<br><br><br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args)&#123;<br><br>         zi z=<span class="hljs-built_in">new</span> zi();<br>         z.speak();<br>         z.<span class="hljs-keyword">work</span>();<br>         // z.<span class="hljs-keyword">show</span>();<br>         // <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(z.num1) ;<br>         // <span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(z.num);<br>         <br><br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h2><p>final：最终。作为一个修饰符</p><p>1,可以修饰 类，函数，变量<br>2,被final修饰的类不可以被继承。为了避免被继承，被子类复写功能，<br>3,被final修饰的方法不可以被复写。<br>4,被final修饰的变量是一个常量只能赋值一次，既可以修饰成员变量，有可以修饰局部变量。<br>当在描述事物时，一些数据的出现值是固定的，那么这时为了增强阅读性，都给这些值起个名字。方便于阅读。<br>而这个值不需要改变，所以加上ia1修饰.作为常量：常量的书写规范所有字母都大写，如果由多个单词组成。单词间通过__连接</p><p>5.内部类定义在类中的局部位置上是，只能访问该局部被final修饰的局部变量.</p><h2 id="Abstract"><a href="#Abstract" class="headerlink" title="Abstract"></a>Abstract</h2><p>抽象：看不懂。<br>抽象类的特点：<br>1,抽象方法一定在抽象类中。<br>2,抽象方法和抽象类都必须被abstract关键字修饰<br>3,抽象类不可以用new创建对象。因为调用抽象方法没意义.<br>4,抽象类中的抽象方法要被使用，必须由子类复写起所有的抽象方法后，建立子类对象调用，如果子类只覆盖了部分抽象方法，那么该子类还是一个抽象类。</p><p>抽象类和一般类没有太大的不同。<br>该如何描述事物，就如何描述事物，只不过，该事物出现了一些看不懂的东西。<br>这些不确定的部分，也是该事物的功能，斋要明确出现。但是无法定义主体。通过抽象方法表示。</p><p>特殊：抽象类中可以不定义抽象方法，这样做仅仅是不让该类建立对象。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">person</span></span>&#123;<br><br><br><span class="hljs-keyword">abstract</span> void speak();<br>void sleep()&#123;<br><br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;hello&quot;</span>);<br>&#125;<br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">person</span></span>&#123;<br><br>void speak()&#123;<br><br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;students are speak&quot;</span>);<br><br>&#125;<br><br><br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">person</span></span>&#123;<br>void speak()&#123;<br><br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Teacher are speak&quot;</span>);<br><br>&#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="Interface-接口"><a href="#Interface-接口" class="headerlink" title="Interface(接口)"></a>Interface(接口)</h2><p>class用于定义类<br>interface用于定义接口<br>接口定义时，格式特点：<br>1,接口中常见定义：常量，抽象方法。<br>2,接口中的成员都有固定修饰符，<br>常量：public static final<br>方法：public abstract<br>记住：接口中的成员都是public的.<br>接口：是不可以创建对象的，因为有抽象方法<br>需要被子类实现，子类接口中的抽象方法全部被覆盖，子类才可以实例化<br>否则子类是一个抽象类</p><p>接口特点：<br>接口是对外暴露的规则。<br>接口是程序的功能扩展。<br>接口可以用来多实现。<br>类与接口之间是实现关系，而且类可以继承一个类的同时实现多个接口。<br>接口与接口之间可以有继承关系。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//接口的实现</span><br><span class="hljs-comment">//接口中的所有方法都是抽象方法</span><br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">instanceA</span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">int</span> num=<span class="hljs-number">3</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span>  <span class="hljs-keyword">void</span>  <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br><br><br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">instanceB</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">speak</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//接口之间的多继承</span><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">instancec</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">instanceA</span>,<span class="hljs-title">instanceB</span></span>&#123;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">run</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//接口实例化</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">shiLiHua</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">instancec</span></span>&#123;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br><br>     System.out.println(<span class="hljs-string">&quot;show&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span>&#123;<br><br>     System.out.println(<span class="hljs-string">&quot;speak&quot;</span>);<br>     &#125;<br><br>     <span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><br>     System.out.println(<span class="hljs-string">&quot;run&quot;</span>);<br>     &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">interfacedemo</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>shiLiHua s=<span class="hljs-keyword">new</span> shiLiHua();<br>s.speak();<br>System.out.print(shiLiHua.num); <br><br><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>抽象继承：is a</p><p>接口：like a</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义一个功能实现：张三是学生，但额外具备抽烟的功能</span><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">smoke</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">smoke</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">smokestudent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">student</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">smoke</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">smoke</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;smoke&quot;</span>);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sleep</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;sleep&quot;</span>);<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">study</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(<span class="hljs-string">&quot;study&quot;</span>);<br><br><br>&#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">interfaceTest</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>smokestudent zhangsang=<span class="hljs-keyword">new</span> smokestudent();<br>zhangsang.smoke();<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><p>多态：可以理解为事物存在的多种形态</p><p>人：男人，女人</p><p>动物：猫，狗。<br>猫 x=new猫()：</p><p>动物 x=new猫()：</p><p>1,多态的体现<br>    父类的引用指向了自己的子类对象。<br>    父类的引用也可以接收自己的子类对象.<br>2,多态的前提</p><p>3,多态的好处<br>    多态的出现大大的提高程序的扩展性。<br>4,多态的应用</p><p>5.多态的弊端<br>    提高了扩展性，但只能使用父类的引用访问父类中的成员</p><p>6.在多态中成员函数的特点：</p><p>在编译时期：参阅引用型变量所属的类中是否有调用的方法。如果有，编译通过，如果没有编译失败。<br>在运行时期：参阅对象所属的类中是否有调用的方法。<br>简单总结就是：成员函数在多态调用时，编译看左边，运行看右边。</p><p>在多态中，成员变量的特点：无论编译和运行，都参考左边（引用型变量所属的类）。<br>在多态中，静态成员函数的特点：无论编译和运行，都参考做左边。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fu</span>&#123;</span><br><br><span class="hljs-keyword">int</span> num=<span class="hljs-number">3</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Fu_method1&quot;</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method2</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Fu_method2&quot;</span>);<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Fu_method4&quot;</span>);<br><br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zi</span> <span class="hljs-title">extends</span> <span class="hljs-title">fu</span>&#123;</span><br><span class="hljs-keyword">int</span> num=<span class="hljs-number">4</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method1</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;zi_method1&quot;</span>);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method3</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;zi_method3&quot;</span>);<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method4</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;zi_method4&quot;</span>);<br><br>&#125;<br><br><br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span>&#123;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br><br>fu f=<span class="hljs-keyword">new</span> <span class="hljs-built_in">zi</span>();<br>f.<span class="hljs-built_in">method1</span>();<span class="hljs-comment">//调用子类的 </span><br>f.<span class="hljs-built_in">method4</span>();<span class="hljs-comment">//静态的先调用自己的</span><br><br><span class="hljs-comment">//f.method3();//父类引用只能找到父类的方法</span><br>System.out.<span class="hljs-built_in">println</span>(f.num);<br>zi z=<span class="hljs-keyword">new</span> <span class="hljs-built_in">zi</span>();<br>System.out.<span class="hljs-built_in">println</span>(z.num);<br>z.<span class="hljs-built_in">method4</span>();<br>z.<span class="hljs-built_in">method2</span>();<span class="hljs-comment">//子类可以用父类的方法</span><br><span class="hljs-comment">// z.method1();</span><br><span class="hljs-comment">// z.method2();</span><br><span class="hljs-comment">// z.method3();</span><br><br><br>&#125;<br>&#125; <br></code></pre></td></tr></table></figure><p>毕姥爷x=new毕老师()；</p><p>x.讲课()；</p><p>毕老师=（毕老师）x ；</p><p>y.看电影()：</p><h3 id="a-instanceof-pig"><a href="#a-instanceof-pig" class="headerlink" title="a instanceof pig"></a>a instanceof pig</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs awk">class  duotai<br>&#123;<br><br>public static void main(String[] args)&#123;<br><br><br><span class="hljs-regexp">//</span> d.eat();<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span>(d);<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span>(new dog());<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span>(new pig());<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">function</span>(new cat());<br><br><span class="hljs-regexp">//</span>当一个子类想实现自身的特殊功能时，需要将其降低类型<br>animal a=new dog();<span class="hljs-regexp">//</span>类型提升  向上转型<br>dog d=(dog)a; <span class="hljs-regexp">//</span>强制转换<br><span class="hljs-regexp">//</span> d.shut();<br><span class="hljs-keyword">function</span>(d);<br><span class="hljs-keyword">function</span>(new pig());<br><br><span class="hljs-regexp">//</span>千万不要将出现这样的操作，就是将父类对象转换成子类类型<br><span class="hljs-regexp">//</span>我们能转换的是父类应用指向了自己的子类对象时，该应用可以被提升，也可以被强制转换，<br><span class="hljs-regexp">//</span> /多态自始至终都是子类对象在做着变化<br><span class="hljs-regexp">//</span> animal a =new animal();<br><span class="hljs-regexp">//</span> cat c=(cat)a<br><br><br><br><br>&#125;<br><br>/*<br>public static void  <span class="hljs-keyword">function</span>(dog d)&#123;<br><br>d.eat();<br>&#125;<br>public static void  <span class="hljs-keyword">function</span>(cat c)&#123;<br><br>c.eat();<br>&#125;<br>public static void  <span class="hljs-keyword">function</span>(pig p)&#123;<br><br>p.eat();<br>&#125;<br><br>    */<br><br>    <span class="hljs-regexp">//</span> 替换 aninmal p =new pig()<br>    public static void <span class="hljs-keyword">function</span>(animal a)&#123;<br>    a.eat();<br><br>    <span class="hljs-regexp">//</span>类型判断<br><br>    <span class="hljs-keyword">if</span>(a instanceof dog)&#123;<br>    dog d=(dog)a;<br>    d.shut();<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a instanceof pig)&#123;<br>    pig p=(pig)a;<br>    p.sleep();<br>    &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多态，接口的综合体现"><a href="#多态，接口的综合体现" class="headerlink" title="多态，接口的综合体现"></a>多态，接口的综合体现</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221107215117281.png" alt="image-20221107215117281"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">// 实现数据的操作</span><br><span class="hljs-comment">// 连接数据库</span><br><span class="hljs-comment">// 操作数据库</span><br><span class="hljs-comment">// 关闭数据库</span><br><br><br><br><span class="hljs-comment">//增加接口，增加程序拓展性</span><br>interface methods&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">oprator</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">jdbc</span> <span class="hljs-title">implements</span> <span class="hljs-title">methods</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span></span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;jdbc_connect&quot;</span>);<br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">oprator</span><span class="hljs-params">()</span></span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;jdbc_oprator&quot;</span>);<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;jdbc_close&quot;</span>);<br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">sql</span> <span class="hljs-title">implements</span> <span class="hljs-title">methods</span>&#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">connect</span><span class="hljs-params">()</span></span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;sql_connect&quot;</span>);<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">oprator</span><span class="hljs-params">()</span></span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;sql_connect&quot;</span>);<br><br><br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">()</span></span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;sql_connect&quot;</span>);<br><br><br>&#125;<br><br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">dbdemo</span>&#123;</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">jdbc j=new jdbc();</span><br><span class="hljs-comment">j.connect();</span><br><span class="hljs-comment">j.oprator();</span><br><span class="hljs-comment">j.close();</span><br><span class="hljs-comment">*/</span><br><br><br>methods m=<span class="hljs-keyword">new</span> <span class="hljs-built_in">jdbc</span>();<span class="hljs-comment">//多态</span><br>m.<span class="hljs-built_in">connect</span>();<br><br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">obiect:</span>是所有对象的直接后者间接父类，传说中的上帝，<br>该类中定义的肯定是所有对象都具备的功能，<br></code></pre></td></tr></table></figure><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类的访问规则：<br>1,内部类可以直接访问外部类中的成员，包括私有。<br>2,内部类要访间内部类，必须建立内部类对象，</p><p>之所以可以直接访问外部类中的成员，是因为内部类中持有了一个外部类的引用，格式外部类名.this</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs haxe">当内部类在成员位置上，就可以被成员修饰符所修饰<br>比如，<span class="hljs-keyword">private</span>:<span class="hljs-type"></span>将内部类在外部类中进行封装。<br><span class="hljs-keyword">static</span>:<span class="hljs-type"></span>内部类就具备<span class="hljs-keyword">static</span>的特性，当内部类被<span class="hljs-keyword">static</span>修饰后，只能直接访问外部类中的<span class="hljs-keyword">static</span>成员。出现了访问局限。<br>在外部其他类中，如何直接访问<span class="hljs-keyword">static</span>内部类的非静态成员呢？<br><span class="hljs-keyword">new</span> <span class="hljs-type">outer</span>.Inner ().<span class="hljs-keyword">function</span>();<br>在外部其他类中，如何直接访问<span class="hljs-keyword">static</span>内部类的静态成员呢？<br>outer.Inner.<span class="hljs-keyword">function</span> ()<br>注意：当内部类中定义了静态成员，该内部类必须是<span class="hljs-keyword">static</span>的。<br>当外部类中的静态方法访问内部类时，内部类也必须是<span class="hljs-keyword">static</span>的，<br><br>当描述事物时，事物的内部事物，该事务用内部类来描述。<br>因为内部事物在使用外部事物的内容<br></code></pre></td></tr></table></figure><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br><span class="hljs-keyword">class</span> <span class="hljs-keyword">out</span>&#123;<br><br><span class="hljs-type">int</span> x=<span class="hljs-number">18</span>;<br><br><br><span class="hljs-type">void</span> <span class="hljs-keyword">method</span>()&#123;<br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">in</span>=<span class="hljs-built_in">new</span> <span class="hljs-keyword">inner</span>();<br><span class="hljs-keyword">in</span>.<span class="hljs-keyword">show</span>();<br><br>&#125;<br>//内部类<br>  private<span class="hljs-keyword">class</span> <span class="hljs-keyword">inner</span>&#123;<br><br><span class="hljs-type">void</span> <span class="hljs-keyword">show</span>()&#123;<br><br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(x);<br>&#125;<br>&#125;<br><br><br>&#125;<br><br><br><br><br><span class="hljs-keyword">class</span> innnerdemo &#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args)&#123;<br><span class="hljs-keyword">out</span> <span class="hljs-keyword">out</span>=<span class="hljs-built_in">new</span> <span class="hljs-keyword">out</span>();<br><span class="hljs-keyword">out</span>.<span class="hljs-keyword">method</span>();<br><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">// 内部类的使用</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">body</span></span>&#123;<br><br><span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">heart</span></span>&#123;<br><span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">tiao</span>(<span class="hljs-params"></span>)</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;tiao&quot;</span>);<br>&#125;<br><br><br><br>&#125;<br><br><span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">Function</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">new</span> heart().tiao();<br>&#125;<br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">heartdemo</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br>body b=<span class="hljs-keyword">new</span> body();<br>b.Function();<br><br>&#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>内部类定义在局部时<br>1,不可以被成员修饰符修饰(private,static)<br>2,可以直接访问外部类中的成员，因为还持有外部类中的引用<br>但是不可以访问它所在的局部中的变量，只能访问被final修饰的局部变量</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">class</span> <span class="hljs-keyword">out</span>&#123;<br><br><span class="hljs-type">void</span> methods()&#123;<br><span class="hljs-type">int</span> num2=<span class="hljs-number">11</span>;<br><br><span class="hljs-keyword">class</span> <span class="hljs-keyword">inner</span>&#123;<br> final <span class="hljs-type">int</span> num=<span class="hljs-number">9</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-keyword">show</span>()&#123;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;不可以访问它所在的局部中的变量。.只能访问被final修饰的局部变量&quot;+num+num2);<br><br><br>&#125;<br>&#125;<br><br><span class="hljs-built_in">new</span> <span class="hljs-keyword">inner</span>().<span class="hljs-keyword">show</span>();<br><br><br>&#125;<br><br><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-keyword">Class</span> &#123;<br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span>  main(String[] args)&#123;<br><span class="hljs-keyword">out</span> o=<span class="hljs-built_in">new</span> <span class="hljs-keyword">out</span>();<br>o.methods();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="匿名子类对象"><a href="#匿名子类对象" class="headerlink" title="匿名子类对象"></a>匿名子类对象</h3><p>匿名内部类：<br>1,匿名内部类其实就是内部类的简写格式。<br>2,定义匿名内部类的前提：内部类必须是继承一个类或者实现接口。</p><p>3.匿名内部类的格式：new父类或者接口(){定义子类的内容)</p><p>4.其实匿名内部类就是一个匿名子类对象，而且这个对象也点胖，可以理解为带上内容的对象</p><p>5.匿名内部类中定义的方法最好不要超过3个。|</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">//匿名内部类</span><br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Absdemo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">out</span></span>&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">class inner extends Absdemo&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">void show()&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">System.out.println(&quot;这是一个匿名内部类的方法&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">public void methods()&#123;</span><br><span class="hljs-comment">new inner().show();</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">methods</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-keyword">new</span> Absdemo()&#123;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;这是一个匿名内部类的方法&quot;</span>);<br><br><br>&#125;<br>&#125;.show();<br>&#125; <br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Class</span> </span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br>out o=<span class="hljs-keyword">new</span> out();<br>o.methods();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>异常：就是程序在运行时出现不正常情况。<br>异常由来：问题也是现实生活中一个具体的事物，也可以通过java的类的形式进行描述。并封装成对象，<br>        其实就是java对不正常情况进行描述后的对象体现.<br>对于问题的划分：两种：一种是严重的问题，一种非严重的问题。<br>对于严重的，java通过Error类进行描述.<br>    对于Error一般不编写针对性的代码对其进行处理。<br>对与非严重的，java通过Exception类进行描述，<br>    对于Exception可以使用针对性的处理方式进行处理，无论Error或者Exception都具有一些共性内容.<br>    比如：不正常情况的信息，引发原因等。</p><p>–|Exro<br>–|Exception</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-number">2</span>,异常的处理java提供了特有的语句进行处理。<br><span class="hljs-keyword">try</span>&#123;<br>需要被检测的代码：<br>&#125;<br><span class="hljs-keyword">catch</span>(异常类 变量)&#123;<br>处理异常的代码；（处理方式）<br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>一定会执行的语句<br>&#125;<br><br>​<br></code></pre></td></tr></table></figure><p>3,对捕获到的异常对象进行常见方法操作。<br>        String getMessage():获取异常信息.<br>在函数上声明异常。<br>便于提高安全性，让调用出进行处理。不处理编译失败</p><p>对多异常的处理</p><p>1,声明异常时，建议声明更为具体的异常。这样处理的可以更具体</p><p>2.对方声明几个异常，就对应有几个catch块。不要定义多余的catch块如果多个catch块中的异常出现继承关系，父类异常catch块放在最下面.</p><p>建立在进行catch处理时，catch中一定要定义具体处理方式，不要简单定义一句e.printstackTrace(),也不要简单的就书写一条输出语句</p><p>Throwable</p><p>不进行异常处理</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">throw</span>.java:<span class="hljs-number">18</span>: 错误: 未报告的异常错误Exception; 必须对其进行捕获或声明以便抛出<br>                        <span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span>=d.methods(<span class="hljs-number">22</span>,<span class="hljs-number">0</span>);<br>                                         ^<br><span class="hljs-number">1</span> 个错误<br></code></pre></td></tr></table></figure><p>抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">div</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">methods</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">return</span> a/b;<br>&#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">error</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception <span class="hljs-comment">//功能上通过throws的关键字声明了该功能有可能会出现问题。</span></span><br><span class="hljs-function"></span>&#123;<br><br>div d=<span class="hljs-keyword">new</span> div();<br><br><br><span class="hljs-keyword">int</span> num=d.methods(<span class="hljs-number">22</span>,<span class="hljs-number">0</span>);<br>    System.out.println(num);<br><br><br>System.out.println(<span class="hljs-string">&quot;code over&quot;</span>);<br><br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="自定义异常封装"><a href="#自定义异常封装" class="headerlink" title="自定义异常封装"></a>自定义异常封装</h3><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">因为项目中会出现特有的问题，而这些问题并未被<span class="hljs-keyword">java所描述并封装对象。</span><br><span class="hljs-keyword"></span>所以对于这些特有的问题可以按照<span class="hljs-keyword">java的对问题封装的思想，将特有的问题。进行自定义的异常封装。</span><br></code></pre></td></tr></table></figure><p>当在函数内部出现了throw抛出异常对象，那么就必须要给对应的处理动作。<br>要么在内部cry catch处理<br>要么在函数上声明，让调用者处理</p><p>一般情况在，函数内部出现异常，函数上需要声明。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-comment">/*</span><br><span class="hljs-comment">自定义异常</span><br><span class="hljs-comment">需求：不能出现有除数是负数的情况</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span> <br><br><br><span class="hljs-keyword">class</span> fushuException <span class="hljs-keyword">extends</span> Exception&#123;<br><br><br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-keyword">div</span>&#123;<br><br><span class="hljs-keyword">int</span> methods(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b) <span class="hljs-keyword">throws</span> fushuException<br>&#123;<br><span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> fushuException();<span class="hljs-comment">//手动通过throw关键字抛出一个自定义异常对象.</span><br>&#125;<br><span class="hljs-keyword">return</span> a/b;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> diyerrors&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args)&#123;<br><br><span class="hljs-keyword">div</span> d=<span class="hljs-keyword">new</span> <span class="hljs-keyword">div</span>();<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">int</span> num=d.methods(<span class="hljs-number">9</span>,-<span class="hljs-number">2</span>);<br>    System.out.<span class="hljs-keyword">println</span>(num);<br><br><br>&#125;<br><span class="hljs-keyword">catch</span>(fushuException e)&#123;<br>System.out.<span class="hljs-keyword">println</span>(e.toString());<br><br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;出现负数了&quot;</span>);<br><br><br>&#125;<br><br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>自定义的异常信息</p><p>因为父类(throw)中己经把异常信息的操作都完成了。<br>所以字类只要在构造时，将异常信息传递给父类通过super语句.<br>那么就可以直接通过getMessage方法获取自定义的异常</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-title">fushuException</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> msg</span>)</span>&#123;<br><span class="hljs-built_in">super</span>(msg);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>继承Exception原因：异常体系有一个特点：因为异常类和异常对象都被抛出也们都具备可抛性。这个可抛性是throwable这个体系中独有特点，只有这个体系中的类和对象才可以被throws和throw操作，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">div</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">methods</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)</span> <span class="hljs-keyword">throws</span> fushuException</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">if</span>(b&lt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> fushuException(<span class="hljs-string">&quot;出现负数的自定义错误&quot;</span>,b);<span class="hljs-comment">//手动抛出异常</span><br>&#125;<br><span class="hljs-keyword">return</span> a/b;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>throws和throw的区别<br>throws使用在函数上：throw使用在函数内.<br>throws后面跟的异常类。可以跟多个,用逗号隔开。throw后跟的是异常对象，</p><h3 id="RuntimeException"><a href="#RuntimeException" class="headerlink" title="RuntimeException"></a>RuntimeException</h3><p>Exceptoin中有一个特殊的子类异常RuntimeException运行时异常.<br>如果在函数内容抛出该异常，函数上可以不用声明，编译一样通过.</p><p>如果在函数上声明了该异常。调用者可以不用进行处理。编译一样通过；</p><p>之所以不用在函数声明，是因为不需要让调用者处理。<br>当该异常发生，希望程序停止。因为在运行时，出现了无法继续运算的情况，希望停止程序后，对代码进行修正。</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> <span class="hljs-keyword">div</span>&#123;<br><br><br><span class="hljs-keyword">int</span> method(<span class="hljs-keyword">int</span> a,<span class="hljs-keyword">int</span> b)&#123;<br><br><span class="hljs-keyword">if</span>(b==<span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ArithmeticException(<span class="hljs-string">&quot;被零整除了&quot;</span>);<br><br><span class="hljs-keyword">return</span> a/b;<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-keyword">runtime</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args)&#123;<br><br><span class="hljs-keyword">div</span> d=<span class="hljs-keyword">new</span> <span class="hljs-keyword">div</span>();<br><span class="hljs-keyword">int</span> res=d.method(<span class="hljs-number">4</span>,<span class="hljs-number">0</span>);<br>System.out.<span class="hljs-keyword">println</span>(res);<br><br><br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><p>自定义异常时：如果该异常的发生，无法在继续进行运算，就让自定义异常继承RuntimeException.</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span>  <span class="hljs-title">fushuException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span></span>&#123;<br><br>fushuException(<span class="hljs-type">String</span> msg)&#123;<br><br><span class="hljs-keyword">super</span>(msg);<br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于异常分两种：</p><p>1,编泽时被检测的异常。（抛出后必须进行函数声明，然后进行处理）<br>2,编译时不被检测的异常（运行时异常。RuntimeException以及其子类，不必进行函数声明，也就是可以不进行处理）</p><h3 id="throw"><a href="#throw" class="headerlink" title="throw"></a>throw</h3><p>throw 表示结束表示，后面的语句将不会在执行</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：老师用电脑上课和电脑出现异常的处理</span><br><span class="hljs-comment">开始思考上果中出现的问题比如问题是电脑蓝屏。</span><br><span class="hljs-comment">电脑冒烟。</span><br><span class="hljs-comment">要对问题进行描述，封装成对象I</span><br><span class="hljs-comment">可是当冒烟发生后，出现讲课进度</span><br><span class="hljs-comment">出现了讲师的问题：课时计划无法完成。</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">blueScreenEXception</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span><br><br>&#123;<br>blueScreenEXception(<span class="hljs-type">String</span> msg)&#123;<br><span class="hljs-keyword">super</span>(msg);<br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">smokeException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br><br>smokeException(<span class="hljs-type">String</span> msg)&#123;<br><span class="hljs-keyword">super</span>(msg);<br>&#125;<br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">planException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br><br>planException(<span class="hljs-type">String</span> msg)&#123;<br><span class="hljs-keyword">super</span>(msg);<br>&#125;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">teacher</span> </span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">String</span> name;<br>teacher(<span class="hljs-type">String</span> name)&#123;<br><br><span class="hljs-keyword">this</span>.name=name;<br>&#125;<br>void teach(computer com) <span class="hljs-keyword">throws</span> planException<br>&#123;<br><br><br><span class="hljs-keyword">try</span>&#123;<br><br>com.run();<br>&#125;<br><span class="hljs-keyword">catch</span>(blueScreenEXception e)&#123;<br><br><br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;蓝屏处理&quot;</span>);<br>com.reset();<br><br>&#125;<br><span class="hljs-keyword">catch</span>(smokeException e)&#123;<br><span class="hljs-comment">//throw new smokeException(&quot;冒烟&quot;);</span><br>test();<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> planException(<span class="hljs-string">&quot;教学异常&quot;</span>+e.getMessage());<br><br><br>&#125;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;老师讲课&quot;</span>);<br><br>&#125;<br>void test()&#123;<br> <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;练习&quot;</span>);<br><br>&#125;<br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">computer</span></span>&#123;<br><br><span class="hljs-keyword">private</span> int state=<span class="hljs-number">3</span>;<br><br>void run() <span class="hljs-keyword">throws</span> blueScreenEXception,smokeException<br>&#123;<br><span class="hljs-keyword">if</span>(state==<span class="hljs-number">2</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> blueScreenEXception(<span class="hljs-string">&quot;蓝屏了&quot;</span>);<br><span class="hljs-keyword">if</span>(state==<span class="hljs-number">3</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> smokeException(<span class="hljs-string">&quot;冒烟了了&quot;</span>);<br><br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;电脑运行&quot;</span>);<br>&#125;<br><br>void reset()&#123;<br><br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;电脑重启&quot;</span>);<br>state=<span class="hljs-number">1</span>;<br><br>&#125;<br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">test</span></span>&#123;<br><br>public static void main(<span class="hljs-type">String</span>[] args) <span class="hljs-keyword">throws</span> smokeException<br><br>&#123;<br><br><span class="hljs-keyword">try</span>&#123;<br><br>teacher t=<span class="hljs-keyword">new</span> teacher(<span class="hljs-string">&quot;毕老师&quot;</span>);<br>    t.teach(<span class="hljs-keyword">new</span> computer());<br><br><br><br>&#125;<span class="hljs-keyword">catch</span>( planException e)&#123;<br><span class="hljs-comment">//throw new smokeException(&quot;mao&quot;);</span><br><span class="hljs-type">System</span>.out.println(e.toString());<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;换老师&quot;</span>);<br>&#125;<br><br><br><br><br><br><br><br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="finally"><a href="#finally" class="headerlink" title="finally"></a>finally</h3><p>fnally代码块：定义一定执行的代码.<br>通常用于关闭资源。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">NotOk</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span><br>&#123;<br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;数据没存成功&quot;</span>)<br><br>&#125;<br>public void methods() <span class="hljs-keyword">throws</span> <span class="hljs-type">NotOk</span><br>&#123;<br><br><br><span class="hljs-keyword">try</span>&#123;<br><br><br>连接数据库<br>操作数据库<span class="hljs-comment">//throw new SqlException</span><br><br>&#125;<br><span class="hljs-keyword">catch</span>(<span class="hljs-type">SQLException</span> e)&#123;<br><br><br>对数据库进行异常处理<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">NotOk</span>();<br><br>&#125;<br><br><span class="hljs-keyword">finally</span>&#123;<br>断开连接<span class="hljs-comment">//该动作，无论数据库是否成功，一定要关闭资源</span><br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="异常表示的三种格式"><a href="#异常表示的三种格式" class="headerlink" title="异常表示的三种格式"></a>异常表示的三种格式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br><br>&#125;<span class="hljs-keyword">catch</span>()&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br><br>&#125;<span class="hljs-keyword">catch</span>()&#123;<br><br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>/记住一点：catch是用于处理异常。如果没有catch就代表异常没有被处理过，如果该异常是检测时异常。那么必须声明</p><p>异常在子父类覆盖中的体现：1,子类在覆盖父类时，如果父类的方法抛出异常，那么子类的覆盖方法，只能抛出父类的异常或者该异常的子类，</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Aexception</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bexception</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Aexception</span></span>&#123;<br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fu</span></span>&#123;<br><br>void method() <span class="hljs-keyword">throw</span> <span class="hljs-type">Aexception</span><br>&#123;<br><br>&#125;<br><br><br><br>&#125; <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">fu</span></span>&#123;<br><br>void method() <span class="hljs-type">Bexception</span>;<br>&#123;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>2,如果父类方法抛出多个异常，那么子类在覆盖该方法时，只能抛出父类异常的子集</p><p>3,如果父类或者接口的方法中没有异常抛出，那么子类在覆盖方法时，也不可以抛出异常.如果子类方法发生了异常，就必须要进行try处理。绝对不能抛。</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs scala"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fu</span></span>&#123;<br><br>void method() <span class="hljs-keyword">throws</span> <span class="hljs-type">Aexception</span><br>&#123;<br><br>&#125;<br><br><br><br>&#125; <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">zi</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">fu</span></span>&#123;<br><br>void method() <span class="hljs-keyword">throws</span> <span class="hljs-type">Cexception</span>;<br>&#123;<br><span class="hljs-keyword">try</span>&#123;<br>fu f=<span class="hljs-keyword">new</span> fu();<br><br>f.method();<br>&#125;<br><span class="hljs-keyword">catch</span>(<span class="hljs-type">Cexception</span> c)&#123;<br><br><br>&#125;<br><br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="练习"></a>练习</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//计算圆和长方形的面积，并针对负数异常进行处理</span><br><span class="hljs-comment">//有一个圆形和长方形都可以获取面积。对于面积如果出现非法的数值，视为是获取面积出现问题。</span><br><span class="hljs-comment">//问题通过异常来表示，现有对这个程序进行基本设计，</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">valueError</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">RuntimeException</span></span><br><span class="hljs-class"></span>&#123;<br> <br><br> valueError(String msg)&#123;<br><br>  <span class="hljs-keyword">super</span>(msg);<br> &#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">square</span></span>&#123;<br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAreal</span><span class="hljs-params">()</span></span>;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">circle</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">square</span></span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> r;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">double</span> PI=<span class="hljs-number">3.14</span>;<br>circle(<span class="hljs-keyword">int</span> r)&#123;<br><span class="hljs-keyword">if</span>(r&lt;=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> valueError(<span class="hljs-string">&quot;半径异常&quot;</span>);<br><br><span class="hljs-keyword">this</span>.r=r;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAreal</span><span class="hljs-params">()</span></span>&#123;<br>System.out.println(r*r*PI);<br><br>&#125;<br><br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">fangxing</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">square</span></span>&#123;<br><br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> l;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> k;<br><br>fangxing(<span class="hljs-keyword">int</span> l,<span class="hljs-keyword">int</span> k)<br>&#123;<br><br><span class="hljs-keyword">if</span> (l&lt;=<span class="hljs-number">0</span> || k&lt;=<span class="hljs-number">0</span>)<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> valueError(<span class="hljs-string">&quot;出现非法值&quot;</span>);<br><span class="hljs-keyword">this</span>.l=l;<br><span class="hljs-keyword">this</span>.k=k;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getAreal</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.println(l*k);<br><br>&#125;<br><br><br><br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br><span class="hljs-comment">//继承runtimeException,不进行处理，直接停掉程序</span><br>fangxing f=<span class="hljs-keyword">new</span> fangxing(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>f.getAreal();<br><br>System.out.println(<span class="hljs-string">&quot;over&quot;</span>);<br><br><br>circle c =<span class="hljs-keyword">new</span> circle(-<span class="hljs-number">9</span>);<br>c.getAreal();<br><br><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="异常总结"><a href="#异常总结" class="headerlink" title="异常总结"></a>异常总结</h3><p>什么是异常？是对于问题的描述，将问题进行对象的封装。</p><p>异常体系：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs 1c">Throwble<br><span class="hljs-string">|--Error</span><br><span class="hljs-string">|--Exception</span><br><span class="hljs-string">|--RuntimeException</span><br><br></code></pre></td></tr></table></figure><p>异常体系的特点：</p><p>异常体系中所有的类以及建立的对象都具有可抛性</p><p>也就是说可以被throw和throws关键字所操作</p><p>只有异常体系具备特点</p><p>throyw和throws的用法：</p><p>throw定义在函数内，用于抛出异常对象</p><p>throws定义在函数上，用于标识异常类，可以抛出多个异常类</p><p>当函数内容有throw抛出异常对象，并未进行try处理，必须在函数 上进行声明，否则将编译失败。注意，RuntimreException除外，也就是说，函数如果抛出的RuntimeException异常，函数上可以不进行声明，也就是不需要进行处理，函数将直接停止运行，报出异常。</p><p>如果声明了异常,调用者要进行处理，处理方法可以throws可以try</p><p>异常有两种：<br>    编译时被检测的异常<br>        该异常在编译时，如果没有处理（没有抛也没有try）,编译失败<br>        该异常被标识，代表可以被处理<br>    运行时异常（编译时不检测）<br>        在编译时，不需要处理，编译器不检查<br>        该异常的发生，建议不处理，让程序停止，需要对代码进行修正</p><p>异常处理的三种模式</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">try</span>&#123;<br>需要被检测的代码<br><br>&#125;<br><span class="hljs-keyword">catch</span>()&#123;<br>处理异常的代码<br><br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br>一定 会执行的代码<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><p>1.finally中定义的通常是关闭资源代码，因为资源必须释放</p><p>2.finally只有一种情况不会执行，当执行遇到System.exit(0),finally不会执行</p><p>自定义异常：</p><p>​    定义类继承Exception或者RuntimeException</p><p>​    1.为了让该定义类具备可抛性</p><p>​    2。让该类具备操作异常的共性方法</p><p>当要定义自定义异常的信息时，可以使用父类定义好的功能</p><p>异常异常信息传递给父类的构造函数</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br><span class="hljs-type">MyException</span> (<span class="hljs-type">String</span> msg)&#123;<br><span class="hljs-keyword">super</span>(msg);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>自定义异常：按照java的面向对象思想，将程序中出现的特有问题进行封装</p><p>异常的好处：</p><p>​    1.将问题进行封装</p><p>​    2.将正常流程代码和问题处理代码，方便于阅读</p><p>异常的处理原则：</p><p>​    1.处理方式有两种：try或则throws</p><p>​    2.调用到抛出异常的功能，抛出几个，就处理几个</p><p>​    3.多个catch，父类的catch放到最下面</p><p>​    4.catch内，需要定义针对的处理方法，不要简单的定义printStackTrace.输出语句，也不要不写</p><p>当捕获到的异常，本功能处理不了是，可以继续在catch中抛出</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">AException</span>();<br><br>&#125;<br><span class="hljs-keyword">catch</span>(AException e)<br>&#123;<br><span class="hljs-keyword">throw</span> e;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果该异常处理不了，但并属于该该功能出现的异常，可以将该异常进行转换后，在抛出和该功能相关的异常.或者异常可以处理，当需要将异常产生和本功能相关的问题提供出去，当调用者知道，并处理，也可将捕获的异常处理后，转换出新的异常。如银行转账，当转账失败后，要抛出转换后的异常（汇款失败），而且还要将转换前的异常进行处理（将转账失败的钱退给原账户）</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">AException</span>()<br>&#125;<br><span class="hljs-keyword">catch</span>(Aexeption e)&#123;<br><span class="hljs-comment">//对AException 处理</span><br><span class="hljs-keyword">throw</span> BException()<br>&#125;<br></code></pre></td></tr></table></figure><p>  异常的注意事项</p><p>​        在子类覆盖 时</p><p>​        1.子类抛出的异常必须是父类异常的子类或则子集</p><p>​        2.如果父类或则接口没有异常时，子类覆盖出现异常，只能进行try处理，不能抛</p><p>例子:</p><p>day32</p><p> exceptionTest.java  老师用电脑上课</p><p>day33</p><p> exceptionTest.java 图形面积</p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="练习"></a>练习</h3><p>&amp;&amp; 一边为假时，另外一边将不会在计算</p><p>父类引用指向子类对象，调用子类方法，当有static 时先调用父类方法</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122152529747.png" alt="image-20221122152529747"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122153054331.png" alt="image-20221122153054331"></p><p>子类构造函数中隐士含有super语句，访问父类空参数的构造函数</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122153738069.png" alt="image-20221122153738069"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122154809220.png" alt="image-20221122154809220"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-built_in">void</span> methods&#123;<br><br><br>Ineter i=<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Inter</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params">int a,int b</span>)</span>&#123;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">func</span>(<span class="hljs-params"></span>)</span>&#123;<br><br>&#125;;<br>i.show(<span class="hljs-number">3</span>,<span class="hljs-number">4</span>);<br>i.func();<br><br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122161822768.png" alt="image-20221122161822768"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122162650025.png" alt="image-20221122162650025"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122163444177.png" alt="image-20221122163444177"></p><p>throw 代表着结束，后面的与语句将执行不到</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122163514331.png" alt="image-20221122163514331"></p><p>内部类的调用</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122164232745.png" alt="image-20221122164232745"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122165333863.png" alt="image-20221122165333863"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122170102370.png" alt="image-20221122170102370"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122170548014.png" alt="image-20221122170548014"></p><h2 id="package包（文件夹P-34）"><a href="#package包（文件夹P-34）" class="headerlink" title="package包（文件夹P-34）"></a>package包（文件夹P-34）</h2><p>解决java中class文件重名的情况,</p><p>加在代码中的第一行</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">name</span><br></code></pre></td></tr></table></figure><p>进行编译的两种方式</p><p>建立文件夹</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>加上参数-d,后面加上路劲</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">javac -d . <span class="hljs-keyword">package</span>.java<br></code></pre></td></tr></table></figure><p>运行</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran">java <span class="hljs-built_in">pack</span>.pakagedemo<br></code></pre></td></tr></table></figure><p>不同包之间类的访问</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">package</span> pack;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pakagedemo</span></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args)&#123;<br><br>packa.demo  d=<span class="hljs-keyword">new</span> <span class="hljs-type">packa</span>.demo();<br>d.show();<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122210135130.png" alt="image-20221122210135130"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122210604039.png" alt="image-20221122210604039"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221122210959451.png" alt="image-20221122210959451"></p><p>总结：包与包之间进行访问，被访问的包中的类以及类中的成员，需要public修饰。</p><p>不同包之间类的继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-keyword">package</span> packa;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">packb</span>.<span class="hljs-title">demob</span></span><br>&#123;<br><br><br>public void show()&#123;<br><br><span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;package&quot;</span>);<br>method();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>保护权限（protected),只能继承的才能拿来使用，其他类不可以直接访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> packb;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demob</span></span>&#123;<br><br><br><span class="hljs-function"><span class="hljs-keyword">protected</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;demob&quot;</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>不同包中的子类还可以访问父类中被protected权限修饰的成员.</p><p>注意</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">类前面加了公有以后，类名必须与<span class="hljs-keyword">java文件名字保持一致</span><br><span class="hljs-keyword"></span><span class="hljs-keyword">java文件中不能出现两个及以上的公共类和接口</span><br></code></pre></td></tr></table></figure><h3 id="import"><a href="#import" class="headerlink" title="import"></a>import</h3><p>为了简化类名的书写，使用一个关键字，import.<br>import导入的是包中的类。<br>建议，不要写通配符*，需要用到包中的哪个类，就导入哪个类。</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs elm"><span class="hljs-keyword">import</span> package<br><span class="hljs-keyword">import</span> packb.demob<br><span class="hljs-keyword">import</span> pack.* //导入pack所有的包<br></code></pre></td></tr></table></figure><p>当导入的两个包的类同名时，必须加上包名</p><p>建立定包名不要重复，可以使用url来完成定义，url是唯一的.</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">package</span> <span class="hljs-title">cn.itceast.test</span><br></code></pre></td></tr></table></figure><h3 id="Jar包"><a href="#Jar包" class="headerlink" title="Jar包"></a>Jar包</h3><p>类似于将多个类文件包打包压缩成一个包，方便移动</p><p>创建jar包</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jar </span>-cf hah.<span class="hljs-keyword">jar </span>packc pack<br></code></pre></td></tr></table></figure><p>查看jar包文件</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-keyword">jar </span>-tf hah.<span class="hljs-keyword">jar</span><br></code></pre></td></tr></table></figure><p>使用打包后的jar,要将环境变量设置为该jar的路劲才可运行</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">set classpath=D:<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\c</span>ode<span class="hljs-symbol">\D</span>os<span class="hljs-symbol">\d</span>ay34<span class="hljs-symbol">\m</span>yclass<span class="hljs-symbol">\h</span>ah.jar<br></code></pre></td></tr></table></figure><p>数据重定向</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">jar -tf hah.jar &gt;D:<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\c</span>ode<span class="hljs-symbol">\D</span>os<span class="hljs-symbol">\d</span>ay34<span class="hljs-symbol">\m</span>yclass<span class="hljs-symbol">\1</span>.txt<br></code></pre></td></tr></table></figure><h2 id="线程（p36"><a href="#线程（p36" class="headerlink" title="线程（p36)"></a>线程（p36)</h2><p>进程：是一个正在执行中的程序，每一个进程执行都有一个执行顺序。该顺序是一个执行路径，或者叫一个控制单元。</p><p>线程：就是进程中的一个独立的控制 单元，线程在控制着进程的执行</p><p>一个进程中至少有一个线程</p><p>Java VM启动的时候会有一个进程java.exe,该进程至少一个进程负责java程序的执行，而且这个线程运行的代码存在于main方法中，该进程称之为主线程</p><p>扩展：其实更细节说明jm,jvm启动不止一个线程，还有负责垃圾回收机制的线程。</p><p>如何在自定义代码中，自定义 一个线程？</p><p>通过 对Api的查找，java已经提供了对线程这类事物的描述,就是Thread类。</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221123165727976.png" alt="image-20221123165727976"></p><h3 id="创建线程的第一种方式，继承Tread类"><a href="#创建线程的第一种方式，继承Tread类" class="headerlink" title="创建线程的第一种方式，继承Tread类"></a>创建线程的第一种方式，继承Tread类</h3><p>步骤：</p><p>1.定义类继承Thread</p><p>2.复写方法Thread类中的run方法</p><p>​    目的：将要自定义的代码存储在run方法中，让子类运行</p><p>3.调用线程的start 方法，该方法有两个作用，启动线程，调用run方法</p><p>发现运行结果每次都不相同，因为多个线程都获取CPU的执行权，CPU执行到谁，谁就运行，明确一点，在某个时刻，只能有一个程序 执行（多核除外），CPU在做着快速切换时，以达到看上去是同时运行的效果，我们可以形象把多线程的运行行为为互相抢夺CPU执行权。</p><p>这就是多线程的一个 特征，随机性，谁抢到谁就执行，至于执行多长时间，CPU说了算</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demo</span> <span class="hljs-title">extends</span> <span class="hljs-title">Thread</span></span><br><span class="hljs-class">&#123;</span><br><br><span class="hljs-comment">//复写方法run</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;x&lt;<span class="hljs-number">69</span>;x++)&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;run.....&quot;</span>+x);<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">threadDemo</span>&#123;</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br><br>demo d =<span class="hljs-keyword">new</span> <span class="hljs-built_in">demo</span>();<span class="hljs-comment">//创建线程</span><br>d.<span class="hljs-built_in">start</span>();<span class="hljs-comment">//启动线程并执行run方法</span><br>d.<span class="hljs-built_in">run</span>();<span class="hljs-comment">//仅仅是对象 调用的方法，而线程创建了，并没有运行</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> x=<span class="hljs-number">0</span>;x&lt;<span class="hljs-number">69</span>;x++)&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;mainrun.....&quot;</span>+x);<br>&#125;<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221123154746365.png" alt="image-20221123154746365"></p><h3 id="程序运行的五种状态"><a href="#程序运行的五种状态" class="headerlink" title="程序运行的五种状态"></a>程序运行的五种状态</h3><p>运行：有运行资格，有执行权</p><p>阻塞：有运行资格，没执行权</p><p>冻结：没资格，没执行权</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221123170637144.png" alt="image-20221123170637144"></p><p>线程名字</p><p>原来线程都有自己默认的名称Thread-编号该编号从0开始.<br>static Thread currentThread():获取当前线程对象.<br>getName():获取线程名称</p><p>设置线程名称：setName或者构造函数。</p><h3 id="火车站买票问题"><a href="#火车站买票问题" class="headerlink" title="火车站买票问题"></a>火车站买票问题</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求,简单的买票程序</span><br><span class="hljs-comment">多个窗口同时买票</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tikit</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">Thread</span></span></span><br><span class="hljs-class"></span>&#123;<span class="hljs-comment">//多个对象共享一个变量</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span>  int tikit=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">public</span> void run()&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br>System.out.println(currentThread().getName()+<span class="hljs-string">&quot;sell---&quot;</span>+tikit--);<br>&#125;<br><br><br><br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">seller</span></span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args)&#123;<br>tikit t1=<span class="hljs-keyword">new</span> <span class="hljs-type">tikit</span>();<br>tikit t2=<span class="hljs-keyword">new</span> <span class="hljs-type">tikit</span>();<br>tikit t3=<span class="hljs-keyword">new</span> <span class="hljs-type">tikit</span>();<br> tikit t4=<span class="hljs-keyword">new</span> <span class="hljs-type">tikit</span>();<br><br> t1.start();<br> t2.start();<br> t3.start();<br> t4.start();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="创建线程的第二种方式：实现Runble接口（d36"><a href="#创建线程的第二种方式：实现Runble接口（d36" class="headerlink" title="创建线程的第二种方式：实现Runble接口（d36)"></a>创建线程的第二种方式：实现Runble接口（d36)</h3><p>步骤：</p><p>1.定义类实现 Runnable接口</p><p>2.覆盖Runnable 接口总的run方法</p><p>​    将线程要运行的代码存放在run方法中。</p><p>3.通过Tread类rty线程对象</p><p>4.将Runnable接口的子类对象作为实际参数传递给Tread类的构造函数</p><p>​    为什么要将Runnble接口的子类对象传递给Tshread类的构造函数？</p><p>因为，自定义的run方法所属的对象是Runnble接口的子类对象，所以要让线程去指定对象的run方法，就必须明确该run方法所属对象。</p><p>5.调用Tread类的start方法开启线程并调用Runnable接口子类的run方法</p><p>实现方式和继承方式有什么区别呢？<br>实现方式好处：避免了单继承的局限性。<br>在定义线程时，建立使用实现方式。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求,简单的买票程序</span><br><span class="hljs-comment">多个窗口同时买票</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程实现的第二种方式</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> tikit implements Runnable<br>&#123;<span class="hljs-comment">//多个对象共享一个变量</span><br><span class="hljs-keyword">private</span>   <span class="hljs-built_in">int</span> tikit=<span class="hljs-number">100</span>;<br>public void run<span class="hljs-literal">()</span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;sell---&quot;</span>+tikit--);<br>&#125;<br><br><br><br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> seller&#123;<br><br><br>public static void main(String<span class="hljs-literal">[]</span> args)&#123;<br>tikit t=<span class="hljs-keyword">new</span> tikit<span class="hljs-literal">()</span>;<span class="hljs-comment">//创建对象</span><br><br><br>Thread p1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<span class="hljs-comment">//创建线程，并指定对象</span><br>Thread p2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br>Thread p3=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br>Thread p4=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br><br>p1.start<span class="hljs-literal">()</span>;<span class="hljs-comment">//启动线程</span><br>p2.start<span class="hljs-literal">()</span>;<br>p3.start<span class="hljs-literal">()</span>;<br>p4.start<span class="hljs-literal">()</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">tikit t1=new tikit();</span><br><span class="hljs-comment">tikit t2=new tikit();</span><br><span class="hljs-comment">tikit t3=new tikit();</span><br><span class="hljs-comment"> tikit t4=new tikit();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"> t1.start();</span><br><span class="hljs-comment"> t2.start();</span><br><span class="hljs-comment"> t3.start();</span><br><span class="hljs-comment"> t4.start();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="多线程安全问题"><a href="#多线程安全问题" class="headerlink" title="多线程安全问题"></a>多线程安全问题</h3><p>问题的原因：当多条语句在操作同一个线程共享数据时，一个线程对多条语句只执行了一部分，还没有执行完，另一个线程参与进来执行。导致共享数据的错误。</p><p>解决办法：对多条操作共享数据的语句，只能让一个线程都执行完。在执行过程中，其他线程不可以参与执行。</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221124161626185.png" alt="image-20221124161626185"></p><p>Java对于多线程的安全问题提供了专业的解决方式就是</p><p>同步代码：就是涉及共享变量的</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs stylus">同步代码块<br><span class="hljs-function"><span class="hljs-title">synchronized</span><span class="hljs-params">(对象)</span></span>&#123;<br>需要被同步的代码<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求,简单的买票程序</span><br><span class="hljs-comment">多个窗口同时买票</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程实现的第二种方式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程的安全问题的处理</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> tikit implements Runnable<br>&#123;<span class="hljs-comment">//多个对象共享一个变量</span><br><span class="hljs-keyword">private</span>   <span class="hljs-built_in">int</span> tikit=<span class="hljs-number">100</span>;<br>Object o=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Object()</span>;<br><br>public void run<span class="hljs-literal">()</span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>synchronized(o)&#123;<br><br><br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">try</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10</span>);&#125;catch(Exception e)&#123;&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;sell---&quot;</span>+tikit--);<br><br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br>break;<br>&#125;<br><br>&#125;<br><br><br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-keyword">class</span> seller&#123;<br><br><br>public static void main(String<span class="hljs-literal">[]</span> args)&#123;<br>tikit t=<span class="hljs-keyword">new</span> tikit<span class="hljs-literal">()</span>;<span class="hljs-comment">//创建对象</span><br><br><br>Thread p1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<span class="hljs-comment">//创建线程，并指定对象</span><br>Thread p2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br>Thread p3=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br>Thread p4=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br><br>p1.start<span class="hljs-literal">()</span>;<span class="hljs-comment">//启动线程</span><br>p2.start<span class="hljs-literal">()</span>;<br>p3.start<span class="hljs-literal">()</span>;<br>p4.start<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>synchronized上锁原理(监视器)</p><p>当一个线程进入时，就将上锁，离开程序口才解锁。在程序期间，其他线程无法进入</p><p>对象如同锁。持有锁的线程可以在同步中执行。<br>没有持有锁的线程即使获取cpu的执行权，也进不去，因为没有获取锁。<br>火车上的卫生间—经典。</p><p>同步的前提：</p><p>1,必须要有两个或者两个以上的线程<br>2,必须是多个线程使用同一个锁。<br>必须保证同步中只能有一个线程在运行。<br>好处：解决了多线程的安全问题。<br>弊端：多个线程需要判断锁，较为消耗资源，</p><h3 id="银行存钱案列"><a href="#银行存钱案列" class="headerlink" title="银行存钱案列"></a>银行存钱案列</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：</span><br><span class="hljs-comment">银行有一个金库，有两个储户分别存300元，每次存100元，存3次</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">custome</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Runnable</span></span><br><span class="hljs-class"></span>&#123;<br>bank b=<span class="hljs-keyword">new</span> bank();<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">run</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">3</span>;i++)&#123;<br>b.add();<br><br><br>&#125;<br><br><br>&#125;<br><br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bank</span> </span><br><span class="hljs-class"></span>&#123;<br><br><span class="hljs-keyword">int</span> sum;<br>Object o=<span class="hljs-keyword">new</span> Object();<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">写法一</span><br><span class="hljs-comment">public void add()&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">//安全问题</span><br><span class="hljs-comment">synchronized(o)&#123;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">sum+=100;</span><br><span class="hljs-comment">try&#123;Thread.sleep(10);&#125;catch(Exception e)&#123;&#125;</span><br><span class="hljs-comment">System.out.println(Thread.currentThread().getName()+&quot;----&quot;+sum);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//写法二</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-comment">//安全问题</span><br><br><br>sum+=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">try</span>&#123;Thread.sleep(<span class="hljs-number">10</span>);&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;----&quot;</span>+sum);<br><br><br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bankdemo</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br>custome c=<span class="hljs-keyword">new</span> custome();<br><br><br>Thread t1=<span class="hljs-keyword">new</span> Thread(c);<span class="hljs-comment">//两个线程</span><br>Thread t2=<span class="hljs-keyword">new</span> Thread(c);<br><br>t1.start();<br>t2.start();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>如何找问题：</p><p>1,明确哪些代码是多线程运行代码。<br>2,明确共享数据。<br>3,明确多线程运行代码中明哪些语句是操作共享数据的。</p><p>同步函数用的是明一个锁呢？<br>函数需要被对象调用.那么函数都有一个所属对象引用.就是this</p><p>所以函数同步使用的锁是this</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求,简单的买票程序</span><br><span class="hljs-comment">多个窗口同时买票</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程实现的第二种方式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程的安全问题的处理</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> tikit implements Runnable<br>&#123;<span class="hljs-comment">//多个对象共享一个变量</span><br><span class="hljs-keyword">private</span>   <span class="hljs-built_in">int</span> tikit=<span class="hljs-number">1000</span>;<br>Object o=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Object()</span>;<br><br>public void run<span class="hljs-literal">()</span>&#123;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br>this.sell<span class="hljs-literal">()</span>;<br><br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">//改进写法</span><br>public synchronized void sell<span class="hljs-literal">()</span>&#123;<br><br><br><br><br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">try</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10</span>);&#125;catch(Exception e)&#123;&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;sell---&quot;</span>+tikit--);<br><br><br>&#125;<br><br><br>&#125;<br><br><br>&#125;<br><br><br><br><span class="hljs-keyword">class</span> seller&#123;<br><br><br>public static void main(String<span class="hljs-literal">[]</span> args)&#123;<br>tikit t=<span class="hljs-keyword">new</span> tikit<span class="hljs-literal">()</span>;<span class="hljs-comment">//创建对象</span><br><br><br>Thread p1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<span class="hljs-comment">//创建线程，并指定对象</span><br>Thread p2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br>Thread p3=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br>Thread p4=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br><br>p1.start<span class="hljs-literal">()</span>;<span class="hljs-comment">//启动线程</span><br>p2.start<span class="hljs-literal">()</span>;<br>p3.start<span class="hljs-literal">()</span>;<br>p4.start<span class="hljs-literal">()</span>;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>通过该程序进行验证使用两个线程来买票。<br>一个线程在同步代码块中</p><p>一个线程在同步函数中都在执行买票动作</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求,简单的买票程序</span><br><span class="hljs-comment">多个窗口同时买票</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程实现的第二种方式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程的安全问题的处理</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> tikit implements Runnable<br>&#123;<span class="hljs-comment">//多个对象共享一个变量</span><br><span class="hljs-keyword">private</span>   <span class="hljs-built_in">int</span> tikit=<span class="hljs-number">100</span>;<br>Object o=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Object()</span>;<br>boolean flag=<span class="hljs-literal">true</span>;<br><br>public void run<span class="hljs-literal">()</span>&#123;<br><br><span class="hljs-keyword">if</span>(flag)&#123;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br><br>synchronized(o)&#123;<br><br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">try</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10</span>);&#125;catch(Exception e)&#123;&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;sell---&quot;</span>+tikit--);<br><br><br>&#125;<br><br><br>&#125;<br><br><br>&#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><br>this.sell<span class="hljs-literal">()</span>;<br><br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//改进写法</span><br>public synchronized void sell<span class="hljs-literal">()</span>&#123;<br><br><br><br><br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">try</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10</span>);&#125;catch(Exception e)&#123;&#125;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>current<span class="hljs-constructor">Thread()</span>.get<span class="hljs-constructor">Name()</span>+<span class="hljs-string">&quot;----sell---&quot;</span>+tikit--);<br><br><br>&#125;<br><br><br>&#125;<br><br><br>&#125;<br><br><br><br><span class="hljs-keyword">class</span> seller&#123;<br><br><br>public static void main(String<span class="hljs-literal">[]</span> args)&#123;<br>tikit t=<span class="hljs-keyword">new</span> tikit<span class="hljs-literal">()</span>;<span class="hljs-comment">//创建对象</span><br><br><br>Thread p1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<span class="hljs-comment">//创建线程，并指定对象</span><br>Thread p2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Thread(<span class="hljs-params">t</span>)</span>;<br><span class="hljs-comment">// Thread p3=new Thread(t);</span><br><span class="hljs-comment">// Thread p4=new Thread(t);</span><br><br>p1.start<span class="hljs-literal">()</span>;<span class="hljs-comment">//启动线程</span><br><span class="hljs-keyword">try</span>&#123;<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Thread</span>.</span></span>sleep(<span class="hljs-number">10</span>);&#125;catch(Exception e)&#123;&#125;<br>t.flag=<span class="hljs-literal">false</span>;<br>p2.start<span class="hljs-literal">()</span>;<br><span class="hljs-comment">// p3.start();</span><br><span class="hljs-comment">// p4.start();</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>出现零的原因是，两个锁不是同一个锁，上面这个锁的对象是objct,下面这个锁的对象是this。</p><p>static安全问题</p><p>如果同步函数被静态修饰后，使用的锁是什么呢？<br>通过验证，发现不在是this。因为静态方法中也不可以定义this<br>静态进内存是，内存中没有本类对象，但是一定有该类对应的字节码文件对象。<br>类名.class  该对象的类型是c1ass<br>静态的同步方法:使用的锁是该方法所在类的字节码文件对象。类名.c1ass</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求,简单的买票程序</span><br><span class="hljs-comment">多个窗口同时买票</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程实现的第二种方式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程的安全问题的处理</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tikit</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span></span><br><span class="hljs-class"></span>&#123;<span class="hljs-comment">//多个对象共享一个变量</span><br><span class="hljs-keyword">private</span>  <span class="hljs-keyword">static</span> int tikit=<span class="hljs-number">100</span>;<br><span class="hljs-built_in">Object</span> o=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-built_in">boolean</span> flag=<span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">if</span>(flag)&#123;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">tikit.<span class="hljs-keyword">class</span></span>)</span>&#123;<br><br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">try</span>&#123;Thread.sleep(<span class="hljs-number">10</span>);&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br><br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;sell---&quot;</span>+tikit--);<br><br><br>&#125;<br><br><br>&#125;<br><br><br>&#125;<br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><br><span class="hljs-built_in">this</span>.sell();<br><br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//改进写法</span><br><span class="hljs-keyword">public</span> synchronized <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sell</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><br><br><br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">try</span>&#123;Thread.sleep(<span class="hljs-number">10</span>);&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br><br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;----sell---&quot;</span>+tikit--);<br><br><br>&#125;<br><br><br>&#125;<br><br><br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">seller</span></span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br>tikit t=<span class="hljs-keyword">new</span> tikit();<span class="hljs-comment">//创建对象</span><br><br><br>Thread p1=<span class="hljs-keyword">new</span> Thread(t);<span class="hljs-comment">//创建线程，并指定对象</span><br>Thread p2=<span class="hljs-keyword">new</span> Thread(t);<br><span class="hljs-comment">// Thread p3=new Thread(t);</span><br><span class="hljs-comment">// Thread p4=new Thread(t);</span><br><br>p1.start();<span class="hljs-comment">//启动线程</span><br><span class="hljs-keyword">try</span>&#123;Thread.sleep(<span class="hljs-number">10</span>);&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br>t.flag=<span class="hljs-literal">false</span>;<br>p2.start();<br><span class="hljs-comment">// p3.start();</span><br><span class="hljs-comment">// p4.start();</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="死锁产生"><a href="#死锁产生" class="headerlink" title="死锁产生"></a>死锁产生</h3><p>同步中嵌套同步 </p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求,简单的买票程序</span><br><span class="hljs-comment">多个窗口同时买票</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程实现的第二种方式</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">多线程的安全问题的处理</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">形成死锁</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tikit</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span></span><br><span class="hljs-class"></span>&#123;<span class="hljs-comment">//多个对象共享一个变量</span><br><span class="hljs-keyword">private</span>   int tikit=<span class="hljs-number">1000</span>;<br><span class="hljs-built_in">Object</span> o=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Object</span>();<br><span class="hljs-built_in">boolean</span> flag=<span class="hljs-literal">true</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">if</span>(flag)&#123;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">o</span>)</span>&#123;<br><span class="hljs-built_in">this</span>.sell();<br>&#125;<br><br><br>&#125;<br><br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><br><span class="hljs-built_in">this</span>.sell();<br><br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//改进写法</span><br><span class="hljs-keyword">public</span> synchronized  <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">sell</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">o</span>)</span>&#123;<br><br><span class="hljs-keyword">if</span>(tikit&gt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-keyword">try</span>&#123;Thread.sleep(<span class="hljs-number">10</span>);&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br><br>System.out.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;----sell---&quot;</span>+tikit--);<br><br><br>&#125;<br><br><br>&#125;<br><br><br><br><br>&#125;<br><br><br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">seller</span></span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br>tikit t=<span class="hljs-keyword">new</span> tikit();<span class="hljs-comment">//创建对象</span><br><br><br>Thread p1=<span class="hljs-keyword">new</span> Thread(t);<span class="hljs-comment">//创建线程，并指定对象</span><br>Thread p2=<span class="hljs-keyword">new</span> Thread(t);<br><span class="hljs-comment">// Thread p3=new Thread(t);</span><br><span class="hljs-comment">// Thread p4=new Thread(t);</span><br><br>p1.start();<span class="hljs-comment">//启动线程</span><br><span class="hljs-keyword">try</span>&#123;Thread.sleep(<span class="hljs-number">10</span>);&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br>t.flag=<span class="hljs-literal">false</span>;<br>p2.start();<br><span class="hljs-comment">// p3.start();</span><br><span class="hljs-comment">// p4.start();</span><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">进程间的通信</span><br><span class="hljs-comment">解决办法：加上锁住，传入同一个锁对象(g)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">goal</span></span>&#123;<br><br><span class="hljs-built_in">String</span> name;<br><span class="hljs-built_in">String</span> sex;<br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">input</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span></span><br><span class="hljs-class"></span>&#123;<br><br><span class="hljs-keyword">private</span> goal g;<br><span class="hljs-function"><span class="hljs-title">input</span>(<span class="hljs-params">goal g</span>)</span>&#123;<br><br><span class="hljs-built_in">this</span>.g=g;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br>int x=<span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">g</span>)</span>&#123;<br><br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)&#123;<br><br>g.name=<span class="hljs-string">&quot;mike&quot;</span>;<br>g.sex=<span class="hljs-string">&quot;men&quot;</span>;<br><br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br><br>g.name=<span class="hljs-string">&quot;张三&quot;</span>;<br>g.sex=<span class="hljs-string">&quot;女&quot;</span>;<br><br>&#125;<br><br><br><br>&#125;<br><br><br>x=(x+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>;<br><br><br><br><br>&#125;<br><br><br><br><br><br><br>&#125;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">output</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> goal g;<br><span class="hljs-function"><span class="hljs-title">output</span>(<span class="hljs-params">goal g</span>)</span>&#123;<br><br><span class="hljs-built_in">this</span>.g=g;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">g</span>)</span>&#123;<br><br>System.out.println(g.name+<span class="hljs-string">&quot; =====&quot;</span>+g.sex);<br>&#125;<br><br><br>&#125;<br><br><br><br><br>&#125;<br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tongxin</span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br><br>goal g=<span class="hljs-keyword">new</span> goal();<span class="hljs-comment">//一堆媒</span><br><br>input <span class="hljs-keyword">in</span>=<span class="hljs-keyword">new</span> input(g);<span class="hljs-comment">//两个卡车</span><br>output out =<span class="hljs-keyword">new</span> output(g);<br><br>Thread t1=<span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">in</span>);<span class="hljs-comment">//两条路线</span><br><br>Thread t2=<span class="hljs-keyword">new</span> Thread(out);<br>t1.start();<br>t2.start();<br><br><br><br><br><br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="wait-notify-等待与唤醒"><a href="#wait-notify-等待与唤醒" class="headerlink" title="wait,notify(等待与唤醒)"></a>wait,notify(等待与唤醒)</h3><p>写入读出交替进行的多线程程序</p><p>例子：冰棍人</p><p>wait(),notify(),notifyall()</p><p>都在使用同步中，因为要对持有监视器（锁）的线程操作。所以要在同步中使用，因为只有同步才具有锁。</p><p>为什么这些操作线程的这些方法要定义在Object类中？</p><p>因为这些方法在操作同步时，都必须要标识他们所操作线程持有的锁。</p><p>只有同一个锁上的被等待线程，可以被同一个锁上的notify唤醒，也就是说，等待与唤醒必须同一个锁。</p><p>而锁可以是任意对象，所以可以被任意对象调用的方法定义于Object类中。</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-comment">/*</span><br><span class="hljs-comment">进程间的通信</span><br><span class="hljs-comment">解决办法：加上锁住，传入同一个锁对象(g)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">交替执行读写的思想:</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">写入时先进行判断flag,如果flag为false,就行新写入，写入完成后就将flag改为真，然后进行等待，并唤醒读进程</span><br><span class="hljs-comment">读取时先判断flag,当flag为true时，进行读取，读取完成后，就将flag改为假，然后进行等待，并唤醒写进程</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">goal</span></span>&#123;<br><span class="hljs-built_in">boolean</span> flag=<span class="hljs-literal">false</span>;<br><span class="hljs-built_in">String</span> name;<br><span class="hljs-built_in">String</span> sex;<br><br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">input</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span></span><br><span class="hljs-class"></span>&#123;<br><br><span class="hljs-keyword">private</span> goal g;<br><span class="hljs-function"><span class="hljs-title">input</span>(<span class="hljs-params">goal g</span>)</span>&#123;<br><br><span class="hljs-built_in">this</span>.g=g;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br>int x=<span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><br><br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">g</span>)</span>&#123;<br><br><br><br><span class="hljs-keyword">if</span>(g.flag)&#123;<br><span class="hljs-keyword">try</span>&#123;g.wait();&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br>&#125;<br><br><br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">0</span>)&#123;<br><br>g.name=<span class="hljs-string">&quot;mike&quot;</span>;<br>g.sex=<span class="hljs-string">&quot;men&quot;</span>;<br><br><br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br><br>g.name=<span class="hljs-string">&quot;张三&quot;</span>;<br>g.sex=<span class="hljs-string">&quot;女&quot;</span>;<br><br>&#125;<br><br>g.flag=<span class="hljs-literal">true</span>;<br><br>g.notify();<br><br>&#125;<br>x=(x+<span class="hljs-number">1</span>)%<span class="hljs-number">2</span>;<br><br>&#125;<br><br>&#125;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">output</span> <span class="hljs-title">implements</span> <span class="hljs-title">Runnable</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">private</span> goal g;<br><span class="hljs-function"><span class="hljs-title">output</span>(<span class="hljs-params">goal g</span>)</span>&#123;<br><br><span class="hljs-built_in">this</span>.g=g;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">run</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><br><br><span class="hljs-function"><span class="hljs-title">synchronized</span>(<span class="hljs-params">g</span>)</span>&#123;<br><span class="hljs-keyword">if</span>(!g.flag)&#123;<br><br><span class="hljs-keyword">try</span>&#123;g.wait();&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<span class="hljs-comment">//wait方法会抛出一个异常，这里只能try，不能抛</span><br><br>&#125;<br><br>System.out.println(g.name+<span class="hljs-string">&quot; =====&quot;</span>+g.sex);<br><br><br>g.flag=<span class="hljs-literal">false</span>;<br><br>g.notify();<br><br><br>&#125;<br><br>&#125;<br><br>&#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tongxin</span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br><br>goal g=<span class="hljs-keyword">new</span> goal();<span class="hljs-comment">//一堆媒</span><br><br>input <span class="hljs-keyword">in</span>=<span class="hljs-keyword">new</span> input(g);<span class="hljs-comment">//两个卡车</span><br>output out =<span class="hljs-keyword">new</span> output(g);<br><br>Thread t1=<span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">in</span>);<span class="hljs-comment">//两条路线</span><br><br>Thread t2=<span class="hljs-keyword">new</span> Thread(out);<br>t1.start();<br>t2.start();<br><br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="生产者与消费者问题"><a href="#生产者与消费者问题" class="headerlink" title="生产者与消费者问题"></a>生产者与消费者问题</h3><p>day38</p><p>多生产多消费问题</p><p>问题描述：生产一次，消费两次，生产两次消费一次</p><p>解决办法：加上while,notifyAll</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">while</span>(!flag)&#123;<br><br><span class="hljs-keyword">try</span>&#123;<span class="hljs-keyword">this</span>.wait();&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;&#125;<br>&#125;<br><br>System.<span class="hljs-keyword">out</span>.println(Thread.currentThread().getName()+<span class="hljs-string">&quot;...消费者...&quot;</span>+<span class="hljs-keyword">this</span>.name);<br>flag=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">this</span>.notifyAll();<br>&#125;<br><br></code></pre></td></tr></table></figure><p>对于多个生产者和消费者，为什么要定义while判断标记?<br>原因：让被唤醒的线程再一次判断标记。<br>为什么定义notifyAll,因为需要唤醒对方线程.</p><p>因为只用notify,容易出现只唤醒本方线程的情况。导致程序中的所有线程都等待.</p><h3 id="Lock"><a href="#Lock" class="headerlink" title="Lock"></a>Lock</h3><p>day39</p><figure class="highlight erlang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs erlang"><span class="hljs-function"><span class="hljs-title">lock</span><span class="hljs-params">()</span>,<span class="hljs-title">nulock</span><span class="hljs-params">()</span>,<span class="hljs-title">await</span><span class="hljs-params">()</span>,<span class="hljs-title">signal</span><span class="hljs-params">()</span>,<span class="hljs-title">signall</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><p>JDK1.5中提供了多线程升级解决方案。<br>将同步Synchronized替换成现实Iock操作：将object中的wait,notify notifyAll,替换了Condition对象。<br>该对象可以被lock锁进行获取：</p><p>private Lock lock =new ReentrantLock();</p><pre><code class="hljs">//新特性,建立不同的锁对象private Condition conditionPro = lock.newCondition();private Condition conditionCus = lock.newCondition();conditionPro.await()conditionPro.signal()</code></pre><h3 id="Interrupt"><a href="#Interrupt" class="headerlink" title="Interrupt"></a>Interrupt</h3><p>中断线程</p><p>让程序退出冻结状态，回到运行状态</p><p>特殊情况：当线程处于了东结状态就不会读取到标记。那么线程就不会结束。<br>当没有指定的方式让冻结的线程恢复到运行状态是，这时需要对东结进行清除。<br>强制让线程恢复到运行状态中来。这样就可以操作标记让线程结束。<br>Thread类提供该方法interrupt();</p><h3 id="setDaemon-守护线程"><a href="#setDaemon-守护线程" class="headerlink" title="setDaemon(守护线程)"></a>setDaemon(守护线程)</h3><p>前台线程结束后，后台进程结束</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><p>join:当A线程执行到了B线程的.join()方法时，A就会等待,等B线程都执行完，A才会执行。<br>join可以用来临时加入线程执行。</p><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><p>暂停本次线程，让其他线程先执行</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">setPriorrity</span><span class="hljs-params">()</span></span><br></code></pre></td></tr></table></figure><h3 id="多线程的书写方式"><a href="#多线程的书写方式" class="headerlink" title="多线程的书写方式"></a>多线程的书写方式</h3><p>继承</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">custome</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Thread</span></span>&#123;<br><br><span class="hljs-comment">//要进行多线程的代码</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>实现</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-keyword">class</span> <span class="hljs-symbol">custome</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Runnable</span>&#123;<br><span class="hljs-comment">//要进行多线程的代码</span><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>匿名内部类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">Thread</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//要进行多线程的代码</span><br><br>&#125;.start();<br></code></pre></td></tr></table></figure><h2 id="String（API"><a href="#String（API" class="headerlink" title="String（API)"></a>String（API)</h2><p>字符串常量</p><p>有final修饰，不能进行复写</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">String</span> s=<span class="hljs-string">&quot;abc&quot;</span><br></code></pre></td></tr></table></figure><p>“abc”是一个特殊的对象</p><p>字符串最大特点：一旦被初始化就不可以被改变。指的是对象不可改变你</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">stringdemo</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span></span>&#123;<br><br><span class="hljs-keyword">String</span> s1=<span class="hljs-string">&quot;demo&quot;</span>;<br><span class="hljs-keyword">String</span> s2=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(<span class="hljs-string">&quot;abc&quot;</span>)<br><br><span class="hljs-comment">//s1和s2有什么区别？</span><br><span class="hljs-comment">//s1在内存中有一个对象.</span><br><span class="hljs-comment">//s2在内存中有两个对象。</span><br>System.out.<span class="hljs-built_in">println</span>(s1=s2);<br>System.out.<span class="hljs-built_in">println</span>(s2.<span class="hljs-built_in">equals</span>(s2));<span class="hljs-comment">//该方法复写了Object类中的equal方法，该方法用于判断字符串是否相同</span><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>string类适用于描述字符串事物那么它就提供了多个方法对字符串进行操作。<br>常见的操作有哪些？<br>“abcd”</p><h3 id="1-获取"><a href="#1-获取" class="headerlink" title="1,获取."></a>1,获取.</h3><h4 id="1-1字符串中的包含的字符数，也就是字符串的长度。"><a href="#1-1字符串中的包含的字符数，也就是字符串的长度。" class="headerlink" title="1.1字符串中的包含的字符数，也就是字符串的长度。"></a>1.1字符串中的包含的字符数，也就是字符串的长度。</h4><p>​            int length():获取长度.</p><h4 id="1-2根据位置获取位置上某个字符。"><a href="#1-2根据位置获取位置上某个字符。" class="headerlink" title="1.2根据位置获取位置上某个字符。"></a>1.2根据位置获取位置上某个字符。</h4><p>​            char charAt (int index):</p><h3 id="1-3根据字符串获取字符出现的位置"><a href="#1-3根据字符串获取字符出现的位置" class="headerlink" title="1.3根据字符串获取字符出现的位置"></a>1.3根据字符串获取字符出现的位置</h3><p>​    int indexof(int ch):返回的是ch在字符串中第一次出现的位置.</p><p>​    int indexof(int ch,int fromIndex):fromIndex指定位置开始，获取ch在字符串中出现的位置</p><p>​    intindexof(String str):返回的是stx在字符串中第一次出现的位置。<br>​    int indexof(String str,int fromIndex):从fromIndex指定位置开始，获取str在字符串中出现的位置</p><p>​    int lastindexOf()反向索引一个字符出现的位置</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">    <br><br></code></pre></td></tr></table></figure><h3 id="2-判断"><a href="#2-判断" class="headerlink" title="2,判断"></a>2,判断</h3><h4 id="2-1字符串中是否包含某一个子串。"><a href="#2-1字符串中是否包含某一个子串。" class="headerlink" title="2.1字符串中是否包含某一个子串。"></a>2.1字符串中是否包含某一个子串。</h4><p>​        boolean contains(str):</p><p>​        特殊之处：indexof(str):可以素str第一次出现位置，如果返回-1.表示该str不在字符串中存在：所以，也可以用于对指定判断是否包含。<br>if (str.indexof (“aa”)!=-1)而且该方法即可以判断，有可以获取出现的位置。</p><h4 id="2-2字符中是否有内容。"><a href="#2-2字符中是否有内容。" class="headerlink" title="2.2字符中是否有内容。"></a>2.2字符中是否有内容。</h4><p>​        boolean isEmpty():原理就是判断长度是否为0    </p><h4 id="2-3字符串是否是以指定内容开头。"><a href="#2-3字符串是否是以指定内容开头。" class="headerlink" title="2.3字符串是否是以指定内容开头。"></a>2.3字符串是否是以指定内容开头。</h4><p>​        boolean startswith(str);</p><h4 id="2-4字符串是否是以指定内容结尾"><a href="#2-4字符串是否是以指定内容结尾" class="headerlink" title="2.4字符串是否是以指定内容结尾"></a>2.4字符串是否是以指定内容结尾</h4><p>​        boolean endswith(str);</p><h4 id="2-5判断字符串内容是否相同"><a href="#2-5判断字符串内容是否相同" class="headerlink" title="2.5判断字符串内容是否相同"></a>2.5判断字符串内容是否相同</h4><p>​    复写了object类中的eguals方法.<br>​    boolean equals(str);</p><h4 id="2-6判断内容是否相同，并忽略大小写。"><a href="#2-6判断内容是否相同，并忽略大小写。" class="headerlink" title="2.6判断内容是否相同，并忽略大小写。"></a>2.6判断内容是否相同，并忽略大小写。</h4><p>​    boolean equalsIgnorecase ()</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">sop</span><span class="hljs-params">(str.starstWith(<span class="hljs-string">&quot;Array&quot;</span>)</span></span>)<span class="hljs-comment">//从某一头开始</span><br><br><span class="hljs-function"><span class="hljs-title">sop</span><span class="hljs-params">(str.endstWith(<span class="hljs-string">&quot;java&quot;</span>)</span></span>)<span class="hljs-comment">//从某一头结尾</span><br><br><span class="hljs-function"><span class="hljs-title">sop</span><span class="hljs-params">(str.contains(<span class="hljs-string">&quot;Demo&quot;</span>)</span></span>)<span class="hljs-comment">//包含</span><br></code></pre></td></tr></table></figure><h3 id="3-转换"><a href="#3-转换" class="headerlink" title="3.转换"></a>3.转换</h3><h4 id="3-1将字符数组转成字符串"><a href="#3-1将字符数组转成字符串" class="headerlink" title="3.1将字符数组转成字符串"></a>3.1将字符数组转成字符串</h4><p>​    构造函数：string(char[])</p><p>​                        string(char[],offset,count):</p><p>将字符数组中的一部分转成字符串.</p><p>​    静态方法：static string copyvalueof(char[]);</p><p>​                static String copyvalueof(char[]data,int offset,int count);</p><p>​                static string valueOf(char[]);</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs"><br><br></code></pre></td></tr></table></figure><h4 id="3-2将字符串转成字符数组"><a href="#3-2将字符串转成字符数组" class="headerlink" title="3.2将字符串转成字符数组"></a>3.2将字符串转成字符数组</h4><p>​            char[] toCharArray();</p><h4 id="3-3将字节数组转成字符串"><a href="#3-3将字节数组转成字符串" class="headerlink" title="3.3将字节数组转成字符串"></a>3.3将字节数组转成字符串</h4><p>​            String(byte[])</p><p>​            String(byte[],offset,count);将字节数组中的一部分转成字符串</p><h4 id="3-4将字符串转成字节数组"><a href="#3-4将字符串转成字节数组" class="headerlink" title="3.4将字符串转成字节数组"></a>3.4将字符串转成字节数组</h4><p>​            byte[] getBytes();</p><h4 id="3-5将基本数据类型转成字符串"><a href="#3-5将基本数据类型转成字符串" class="headerlink" title="3.5将基本数据类型转成字符串"></a>3.5将基本数据类型转成字符串</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">static</span> string <span class="hljs-title">valueof</span><span class="hljs-params">(<span class="hljs-keyword">int</span>)</span></span><br><span class="hljs-function"><span class="hljs-keyword">static</span> string <span class="hljs-title">valueof</span><span class="hljs-params">(<span class="hljs-keyword">double</span>)</span></span><br></code></pre></td></tr></table></figure><p>特殊：字符串和字节数组在转换过程中，是可以指定编码表的。</p><h3 id="4-替换"><a href="#4-替换" class="headerlink" title="4.替换"></a>4.替换</h3><p>​    string replace (oldchar,newchar);  </p><h4 id="5-切割"><a href="#5-切割" class="headerlink" title="5.切割"></a>5.切割</h4><p>​    String[] split(regex)</p><h4 id="6-字串"><a href="#6-字串" class="headerlink" title="6.字串"></a>6.字串</h4><p>​    String substring(begin);//从指定位置开始到结尾。如果角标不存在，会出现字符串角标越界异常。</p><p>​    String substring(begin,end);//包含头，不含尾</p><p>7,转换，去除空格，比较</p><p>​    7.1将字符串转成大写或则小写。</p><p>​        String toUppercase();</p><p>​        String toLowercase();</p><p>​    7.2将字符串两端的多个空格去除</p><p>​        String trim()</p><p>​    7.3对两个字符串进行自然顺序的比较：</p><p>​        int compareTo(String)</p><p>​        返回：如果参数字符串等于此字符串，则返回值0；如果此字符串按字典顺序小于字符串参数，则返回一个小于0的值；如果此字符串按字典顺序大于字符串参数，则返回一个大于0的值。</p><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="练习"></a>练习</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221130143948779.png" alt="image-20221130143948779"></p><p>测试1</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>=<span class="hljs-string">&quot;    jaja jajj   &quot;</span>;<br><br><span class="hljs-built_in">int</span> left=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">str</span>.charAt(left)==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br><br>left++;<br>&#125;<br><br><span class="hljs-built_in">int</span> right=<span class="hljs-built_in">str</span>.length()<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-built_in">str</span>.charAt(right)==<span class="hljs-string">&#x27; &#x27;</span>)&#123;<br><br>right--;<br>&#125;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span>.substring(left,right+<span class="hljs-number">1</span>));<span class="hljs-comment">//string测试1</span><br><br></code></pre></td></tr></table></figure><p>测试2</p><p>1,将字符串变成数组。<br>2,对数组反转.<br>3,将数组变成字符串。</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> static String reverse(String s)&#123;<br><br><br>//字符串装换成字符数组<br><br><span class="hljs-type">char</span>[] ch=s.toCharArray();<br><br><br>//交换字符位置<br><br>reverse(ch);<br><br><br>//将字符数组转换成字符串<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">new</span> String(ch);<br><br><br>&#125;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> reverse(<span class="hljs-type">char</span>[] arr)&#123;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> start=<span class="hljs-number">0</span>,end=arr.length<span class="hljs-number">-1</span>;<span class="hljs-keyword">start</span>&lt;<span class="hljs-keyword">end</span>;<span class="hljs-keyword">start</span>++,<span class="hljs-keyword">end</span><span class="hljs-comment">--)&#123;</span><br><br>swap(arr,<span class="hljs-keyword">start</span>,<span class="hljs-keyword">end</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> swap(<span class="hljs-type">char</span>[] arr,<span class="hljs-type">int</span> <span class="hljs-keyword">start</span>,<span class="hljs-type">int</span> <span class="hljs-keyword">end</span>)&#123;<br><br><span class="hljs-type">char</span> <span class="hljs-keyword">temp</span>=arr[<span class="hljs-keyword">start</span>];<br>arr[<span class="hljs-keyword">start</span>]=arr[<span class="hljs-keyword">end</span>];<br>arr[<span class="hljs-keyword">end</span>]=<span class="hljs-keyword">temp</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>练习3：去字串在另外一个字符串中出现的次数</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> findcount2(String <span class="hljs-built_in">str</span>,String key)&#123;<br><br><span class="hljs-built_in">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">int</span> <span class="hljs-keyword">index</span>=<span class="hljs-number">0</span>;<br><span class="hljs-comment">//indexOf返回第一次找到数组的位置</span><br><span class="hljs-keyword">while</span>((<span class="hljs-keyword">index</span>=<span class="hljs-built_in">str</span>.indexOf(key,<span class="hljs-keyword">index</span>))!=<span class="hljs-number">-1</span>)&#123;<br><br><span class="hljs-keyword">index</span>=<span class="hljs-keyword">index</span>+key.length();<br><span class="hljs-keyword">count</span>++;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">count</span>;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>练习4：找两字符串中出现的最长字符串</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//找含有的最大字串</span><br><span class="hljs-comment">//思路：找出任意一个字符串的所有字串，即下三角模型</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span>  findmax(<span class="hljs-keyword">String</span> s1,<span class="hljs-keyword">String</span> s2)&#123;<br><br><span class="hljs-comment">//取短的字符串进行循环</span><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">min</span>=(s1.length()&gt;s2.length())?s2:s1;<br>sop(<span class="hljs-built_in">min</span>);<br><br><span class="hljs-comment">//取字串</span><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> x=<span class="hljs-number">0</span>;x&lt;<span class="hljs-built_in">min</span>.length();x++)&#123;<br><br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> y=<span class="hljs-number">0</span>,z=<span class="hljs-built_in">min</span>.length()-x;z!=<span class="hljs-built_in">min</span>.length();z++,y++)&#123;<br><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>=<span class="hljs-built_in">min</span>.substring(y,z);<br><span class="hljs-comment">// sop(str);</span><br><br><br><span class="hljs-keyword">if</span>(s1.contains(<span class="hljs-built_in">str</span>))&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">str</span>;<br><br>&#125;<br><br><br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span><span class="hljs-string">&quot;&quot;</span>;<br><br>&#125; <br><br></code></pre></td></tr></table></figure><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-built_in">StringBuffer</span> a=<span class="hljs-keyword">new</span> <span class="hljs-built_in">StringBuffer</span>();<br></code></pre></td></tr></table></figure><p>1.字符缓冲区，是一个容器。长度可以变化。</p><p>2.可以操作多个数据类型</p><p>3.最终会通过toString方法变成字符串</p><p>面盆理论</p><p>1.存储</p><p>​    StringBuffer append();将指定数据作为参数添加到已有数据的结尾处。</p><p>​        StringBuffer insert(index,数据);可以将数据指定Index的位置.</p><p>2.删除</p><p>​        StringBuffer delete(start,end):删除缓冲区中的数据，包含start,不包含end.<br>​        StringBuffer deletecharAt(index):删除指定位置的字符.</p><p>3,获取。<br>        char charAt (int index)</p><p>​        int indexof(string str)</p><p>​        int lastIndexof(String str)</p><p>​        int length()</p><p>​        string substring(int start,intend)】</p><p>4.修改</p><p>​    void setCharAt(int index,char ch)//替换某一字符</p><p>​    StringBuffer replace(start,end,cha)</p><ol start="5"><li><p>反转</p><p>StringBuffer reverse();</p></li></ol><p>6.</p><p>StringBuffer sb=new StringBuffer(“dssd”);</p><p>chae[] chs=new char[4];</p><p>将缓中区中指定数据存储到指定字符数组中。<br>void getchars(int srcBegin,int srcEnd,char[]dst,int dstBegin)</p><h3 id="stringBuilder"><a href="#stringBuilder" class="headerlink" title="stringBuilder"></a>stringBuilder</h3><p>1.5版本之后出现了StringBuilder.<br>stringBuffer是线程同步.<br>stringBuilder是线程不同步.</p><p>将StringBuilder的实例用于多个线程是不安全的。如果需要这样的同步，则建议使用StringBuffer</p><p>升级三个因素：</p><p>1,提高效率</p><p>2,简化书写.<br>3,提高安全性，</p><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><table><thead><tr><th>基本数据类型</th><th>引用数据类型（class)</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><h4 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h4><p>基本数据类型对象包装类的最常见作用，就是用于基本数据类型和字符串类型之间做转换</p><p>基本数据类型转成字符串。<br>        基本数据类型+””<br>        基本数据类型.tostring(基本数据类型值)；        如：Integer.tostring(34)://将34整数变成”34”：</p><p>字符串转成基本数据类型。<br>        xxx a Xxx.parseXxx(String);</p><p>​        int a Integer.parseInt (“123”);</p><p>​        Integer i=new Integer(“123”);</p><p>​        int num =i.intvalue();</p><p>​        double b Double.parseDouble (“12.23”);</p><p>​        boolean b Boolean.parseBoolean(“true”);</p><p>十进制转成其他进制</p><p>​        toBinarystring();//转成2进制</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">sop(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">BinaryString(-6)</span>);<br></code></pre></td></tr></table></figure><p>​        toHexstring ()//转成16进制</p><p>​        toOctalString ()//转成8进制</p><p>其他进制转成十进制</p><p>​    parseInt (string,redix) redix表示String的进制</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> x =<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-string">&quot;110&quot;</span>,2)</span>;<br>sop(x);<br></code></pre></td></tr></table></figure><p>小练习</p><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">Integer</span> x1=<span class="hljs-literal">new</span> <span class="hljs-built_in">Integer</span>(<span class="hljs-string">&quot;123&quot;</span>);<br><br><span class="hljs-built_in">Integer</span> y=<span class="hljs-literal">new</span> <span class="hljs-built_in">Integer</span>(<span class="hljs-number">123</span>);<br>sop(<span class="hljs-string">&quot;x=y:&quot;</span>+(x1==y));<span class="hljs-comment">//false</span><br>sop(<span class="hljs-string">&quot;x.equals(y):&quot;</span>+x1.<span class="hljs-keyword">equals</span>(y));<span class="hljs-comment">//false</span><br></code></pre></td></tr></table></figure><p>更新特性</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>Integer x=new Interger(<span class="hljs-number">4</span>);<br>Integer x=<span class="hljs-number">4</span>;<span class="hljs-regexp">//</span>z自动装箱<br>x=x+<span class="hljs-number">3</span> <span class="hljs-regexp">//</span>自动拆箱<br></code></pre></td></tr></table></figure><p>结果为true。因为m1和n1指向了同一个Integer对象/因为当数值在byte范围内容，对于新特性，如果该数值已经存在，则不会在开辟新的空间。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Integer <span class="hljs-attribute">m</span>=128;<br>Integer <span class="hljs-attribute">n</span>=128;<br>sop(<span class="hljs-attribute">m</span>==n);//false<br><br><br>Integer <span class="hljs-attribute">m1</span>=127;<br>Integer <span class="hljs-attribute">n1</span>=127;<br>sop(<span class="hljs-attribute">m1</span>==n1);//true<br><br></code></pre></td></tr></table></figure><h2 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h2><p>day41</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221201212643596.png" alt="image-20221201212643596"></p><p>为什么会出现这么多的容器呢？</p><p>因为每一个容器对数据的存储方式都有不同。<br>这个存储方式称之为：数据结构。</p><p>1,add方法的参数类型是Obiect.以更于接收任意类型对象.<br>2,集合中存储的都是对象的引用（地址)</p><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">//创建容器</span><br>ArrayList <span class="hljs-built_in">a1</span> <span class="hljs-symbol">=new</span> ArrayList()<span class="hljs-comment">;</span><br><br><span class="hljs-comment">//添加元素</span><br><span class="hljs-built_in">a1</span>.add(<span class="hljs-string">&quot;java01&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-built_in">a1</span>.add(<span class="hljs-string">&quot;java02&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-built_in">a1</span>.add(<span class="hljs-string">&quot;java03&quot;</span>)<span class="hljs-comment">;</span><br><span class="hljs-built_in">a1</span>.add(<span class="hljs-string">&quot;java04&quot;</span>)<span class="hljs-comment">;</span><br><br><span class="hljs-comment">//打印集合</span><br>sop(<span class="hljs-built_in">a1</span>)<span class="hljs-comment">;</span><br><br><span class="hljs-comment">//获取集合长度</span><br>sop(<span class="hljs-string">&quot;size:&quot;</span>+<span class="hljs-built_in">a1</span>.size())<span class="hljs-comment">;</span><br><br><br><span class="hljs-comment">//删除元素</span><br>sop(<span class="hljs-built_in">a1</span>.remove(<span class="hljs-string">&quot;java04&quot;</span>))<span class="hljs-comment">;</span><br><span class="hljs-built_in">a1</span>.clear()<span class="hljs-comment">;</span><br>sop(<span class="hljs-built_in">a1</span>)<span class="hljs-comment">;</span><br><br><br><span class="hljs-comment">//判断元素</span><br>sop(<span class="hljs-built_in">a1</span>.contains(<span class="hljs-string">&quot;java04&quot;</span>))<span class="hljs-comment">;</span><br>sop(<span class="hljs-built_in">a1</span>.isEmpty())<span class="hljs-comment">;</span><br><br><br><br></code></pre></td></tr></table></figure><p>取交集</p><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm"><span class="hljs-built_in">a1</span>.retainAll(<span class="hljs-built_in">a2</span>)<span class="hljs-comment">;//取a1中和a2的交集</span><br><span class="hljs-built_in">a1</span>.removeAll(<span class="hljs-built_in">a2</span>)<span class="hljs-comment">;//去掉交集</span><br></code></pre></td></tr></table></figure><p>取元素（迭代器 ）</p><p>什么是迭代器呢？<br>其实就是集合的取出元素的方式。</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs gcode">Iterator it =a<span class="hljs-number">1.</span>iterator<span class="hljs-comment">()</span>;<br><br><span class="hljs-comment">//hasNext 获取迭代器，用于取出集合中的元素</span><br><span class="hljs-keyword">while</span><span class="hljs-comment">(it.hasNext()</span>)&#123;<br><br>sop<span class="hljs-comment">(it.next()</span>);<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>就把取出方式定义在集合的内部，这样取出方式就可以直接访问集合内容的元素。<br>那么取出方式就被定义成了内部类。<br>而每一个容器的数据结构不同，所以取出的动作细节也不一样。但是都有共性内容判断和取出。那么可以将写共性抽取。</p><p>那么这些内部类都符合一个规则。该规则是Iterator。<br>如何获取集合的取出对象呢?<br>通过一个对外提供的方法。<br>iterator();</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-built_in">Iterator</span> it =a1.<span class="hljs-built_in">iterator</span>();<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221202160053223.png" alt="image-20221202160053223"></p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">//迭代器第二种写法</span><br>for(Iterator it=a1.iterator();it<span class="hljs-selector-class">.hasNext</span>();)&#123;<br><br>sop(it.next());<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="List"><a href="#List" class="headerlink" title="List"></a>List</h3><p>Collection</p><p>​        |–List :元素是有序的，元素可以重复，因为该集合体系有索引。</p><p>​            |—-ArrayList :底层的数据结构使用的是数组结构。特征：查询速度块，但增删慢，不同步，可变数组（50%延长）</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221202214851985.png" alt="image-20221202214851985"></p><p>​            |—-LinkList:底层使用的是链表的数据结构</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221202214807562.png"></p><p>​        |—-Vector 底层是数组数据结构，线程同步，被ArrayList替代了，</p><p>|–Set：元素是无序的，元素不可以重复</p><p>List:</p><p>特有方法，凡是可以操作角标的方法都是该体系特有的方法.</p><p>增</p><p>​        add(index,element)</p><p>​        addAll(index,Collection)</p><p>删</p><p>​        remove(index)</p><p>改</p><p>​        set(index)</p><p>查</p><p>​        get(index)</p><p>​        subList(from,to)</p><p>​        ListIterator()</p><pre><code class="hljs">    ArrayList a1=new ArrayList();    sop(a1);    //在指定位置    a1.add(1,&quot;hello&quot;);    sop(a1);    //删除元素    a1.remove(0);            sop(a1);    //修改元素    a1.set(2,&quot;world&quot;);        sop(a1);    //查看元素    sop(a1.get(2));    //遍历所有元素    for (int x=0;x&lt;a1.size();x++)&#123;        sop(a1.get(x));    &#125;    for(Iterator it=a1.iterator();it.hasNext();)&#123;        sop(it.next());    &#125;    //获取对象位置    sop(a1.indexOf(&quot;java04&quot;));    //取子串    List sub=a1.subList(1,3);    sop(sub);</code></pre><h3 id="ListIterator"><a href="#ListIterator" class="headerlink" title="ListIterator"></a>ListIterator</h3><p>//边取边写<br>        //建立跌代器<br>        Iterator it =a1.iterator();</p><pre><code class="hljs">    while(it.hasNext())&#123;        Object obj=it.next();        if(obj.equals(&quot;java04&quot;))&#123;            it.remove();//如果有&quot;java04&quot;,将java04的引用从集合中删除        &#125;    &#125;    sop(a1);</code></pre><p>​    </p><p>在迭代时，不可以通过集合对象的方法操作集合中的元素，<br>因为会发生并行操作异常。<br>所以，在迭代时，只能用迭代器的方法操作元素，可是Iterator方法是有限的，<br>只能对元素及进行判断，取出，删除的操作。<br>如果想要对元素进行其他操作，如添加，修改等，就需要使用其子接口，如ListIterator<br>该接口只能通过List集合的ListIterator方法获取</p><pre><code class="hljs">    //List特有迭代器    ListIterator li =a1.listIterator();    while(li.hasNext())&#123;        Object obj=li.next();        if(obj.equals(&quot;java01&quot;))&#123;            li.add(&quot;world&quot;);//如果有&quot;java01&quot;,就在&quot;java01&quot;的位置上添加world        &#125;        &#125;    sop(a1);</code></pre><h3 id="vector"><a href="#vector" class="headerlink" title="vector"></a>vector</h3><p>枚举就是Vector特有的取出方式.<br>发现枚举和迭代器很像其实枚举和迭代是一样的：因为枚举的名称以及方法的名称都过长：所以被迭代器取代了，枚举郁郁而终了。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><br>Vector a1=new Vector()<span class="hljs-comment">;</span><br>//添加元素<br>a1.add(<span class="hljs-string">&quot;java01&quot;</span>)<span class="hljs-comment">;</span><br>a1.add(<span class="hljs-string">&quot;java02&quot;</span>)<span class="hljs-comment">;</span><br>a1.add(<span class="hljs-string">&quot;java03&quot;</span>)<span class="hljs-comment">;</span><br>a1.add(<span class="hljs-string">&quot;java04&quot;</span>)<span class="hljs-comment">;</span><br><br>Enumeration en =a1.elements()<span class="hljs-comment">;</span><br><br>while(en.hasMoreElements())&#123;<br><br><br>sop(en.nextElement())<span class="hljs-comment">;</span><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="LinkList"><a href="#LinkList" class="headerlink" title="LinkList"></a>LinkList</h3><p>特有方法：</p><p>​    addFirst://从第一开始添加</p><p>​    addLast:/从最后一个开始添加</p><p>​    removeFirst:</p><p>​    removeFirst:</p><p>​    getFist:</p><p>​    getLast:</p><p>​    pollFist:</p><p>​    link.size()</p><p>1.6新方法替代</p><figure class="highlight gcode"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs gcode">offerFirst <span class="hljs-comment">()</span><br>offerLast <span class="hljs-comment">()</span><br>增加元素<br><br>peekFirst <span class="hljs-comment">()</span><br>peekLast <span class="hljs-comment">()</span>获取元素，但不删除元素。如果集合中没有元素，会返回<span class="hljs-symbol">nu11</span><br><br><br>pollFirst <span class="hljs-comment">()</span><br>pollLast <span class="hljs-comment">()</span>获取元素，但是元素被刚除。如果集合中没有元素，会返回u<span class="hljs-number">11</span>。<br><br><br></code></pre></td></tr></table></figure><p>day42</p><p>linklist 模拟堆栈和队列</p><p>堆栈：先进后出，容器<br>队列：先进先出 ，水管</p><h3 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h3><p>quals在contains</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-keyword">public</span> <span class="hljs-built_in">static</span> ArrayList singleElement(ArrayList a1)&#123;<br><br><span class="hljs-comment">//定义一个零食容器</span><br><br>ArrayList tem=<span class="hljs-keyword">new</span> ArrayList();<br><br><span class="hljs-comment">//建立遍历</span><br><span class="hljs-built_in">Iterator</span> it=a1.<span class="hljs-built_in">iterator</span>();<br><br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><br><span class="hljs-keyword">Object</span> obj=it.next();<br><span class="hljs-keyword">if</span> (!tem.contains(obj))&#123;<br>tem.add(obj);<br><br>&#125;<br>&#125;<br><br><br><span class="hljs-keyword">return</span> tem;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>list集合判断元素是否相同，依据是元素的equals方法：</p><h2 id="SET"><a href="#SET" class="headerlink" title="SET"></a>SET</h2><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><p>Set接口中的方法和Collection一致</p><p>|—Hashset：内部数据结构是哈希表，是不同步的</p><p>​    如何保证集合中的元素的唯一性呢？</p><p>是通过对象的hashCode和equals方法来完成对象唯一性</p><p>如果对象hashCode值不同，那么不用equals方法，直接存储到哈希表中。</p><p>如果对象的hashCode值相同，那么要再次判断对象的equals方法是否为true.</p><p>如果为true，视为相同元素，如果false，那么就视为不同元素，就行存储</p><p>记住：如果元素要存储到HashSet集合中，必须 覆盖hashCode方法equals方法。</p><p>注意：对于元素是否存在，以及删除等操作，依赖的方法是元素的hashCode和equals方法</p><p>一般情况：如果定义的类会产生很多对象，比如：学生，书，通常都需要覆盖equals,hashCode方法</p><p>​     </p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs"><br></code></pre></td></tr></table></figure><p>当hashcode相同时，不会调用equals</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-comment">//建立适合自己对象的hashcode方法，到达去重的目的</span><br><span class="hljs-keyword">public</span> int hashCode()&#123;<br><br><br><span class="hljs-keyword">return</span> name.hashCode()+age*<span class="hljs-number">43</span>;<span class="hljs-comment">//返回自己的hash</span><br><br>&#125;<br><br><br><span class="hljs-comment">//复写objct中的equals方法</span><br><span class="hljs-keyword">public</span> boolean equals(Object obj)&#123;<br><br><br><span class="hljs-keyword">if</span>(!(obj instanceof person))&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br>person p=(person)obj;<br>     System.<span class="hljs-keyword">out</span>.println(<span class="hljs-keyword">this</span>.age+<span class="hljs-string">&quot;equals&quot;</span>+p.age);<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="hljs-keyword">this</span>.age==p.age;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>复写Hashset</p><h3 id="TreeSet-day46"><a href="#TreeSet-day46" class="headerlink" title="TreeSet(day46)"></a>TreeSet(day46)</h3><p>可以对set集合中的集合元素进行排序</p><p>底层的数据结构是二叉树，保证元素唯一性的依据 ，compareTo返回 return 0.</p><p>TreeSet排序实现的第一种方式，让元素自身具备比较性(implements Comparable)。</p><p>元素需要实现Comparable,覆盖CompareTo方法，</p><p>默认方法也成为元素的自然顺序。</p><h4 id="第一种（比较性）"><a href="#第一种（比较性）" class="headerlink" title="第一种（比较性）"></a>第一种（比较性）</h4><p>TreeSet排序实现的第1种方式</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">class</span> person <span class="hljs-keyword">implements</span> Comparable<span class="hljs-comment">//该接口让学生具备比较性</span><br>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-keyword">compareTo</span>(Object o)&#123;<br><br><span class="hljs-comment">//判断传入的对象是否为person对象</span><br><br><span class="hljs-keyword">if</span> (!(o <span class="hljs-keyword">instanceof</span> person))&#123;<br><br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;传入类型出错&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//根据comperaTo 方法进行不同值的返回</span><br><br>person p=(person)o;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.age&gt;p.age)&#123;<br><br><span class="hljs-keyword">return</span>  <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">//当年龄相同时，还需要对其他属性进行判断.主要条件相同时，判断次要体条件</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.age==p.age)&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.name.<span class="hljs-keyword">compareTo</span>()<span class="hljs-comment">//调用String类型中的compareTo方法</span><br>&#125;<br><br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>按照输入顺序进行排序</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">compareTo</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> o</span>)</span>&#123;<br><br><br>retun <span class="hljs-number">1</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="第二种-比较器"><a href="#第二种-比较器" class="headerlink" title="第二种(比较器)"></a>第二种(比较器)</h4><p>当元素</p><p>​    当两种排序都存在时，以比较器为主</p><p>比较器</p><figure class="highlight smali"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs smali">class mycompare implements Comparator&#123;<br><br><span class="hljs-keyword">public</span><span class="hljs-built_in"> int </span>compare(Object o1,Object o2)&#123;<br>person p1=(person)o1;<br>person p2=(person)o2;<br><br><span class="hljs-built_in">int </span> num=p1.getname().compareTo(p2.getname());<br>if(num==0)&#123;<br>if(p1.getage()&gt;p2.getage())&#123;<br><span class="hljs-built_in">return </span>1;<br>&#125;<br><span class="hljs-built_in">if </span>(p1.getage()==p2.getage())&#123;<br><span class="hljs-built_in">return </span>0;<br>&#125;<br><br><span class="hljs-built_in">return </span>-1;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意要将构造器添加入TreeSet</p><h3 id="排序的底层原理"><a href="#排序的底层原理" class="headerlink" title="排序的底层原理"></a>排序的底层原理</h3><p>二叉树</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221208185004744.png" alt="image-20221208185004744"></p><h2 id="范型（day46"><a href="#范型（day46" class="headerlink" title="范型（day46)"></a>范型（day46)</h2><p>范型：JDK1.5版本以后出现的新特性，用于解决安全问题，是一个类型安全机制</p><p>好处：</p><p>1.将运行期间出现的问题ClassException ,转移到了编译期间，方便程序员解决问题，让运行期间问题减少，安全。</p><p>2.避免了强制转换麻烦</p><p>范型格式：通过&lt;&gt;来定义要操作的引用数据类型</p><p>在使用java提供的对象时，什么时候写范型呢？</p><p>通常在几个框架中很常见，只要见到&lt;&gt;就是用来定义泛型的，&lt;&gt;用来接受泛型，当使用集合时，将集合中要存储的数据类型作为参数传递到&lt;&gt;中即可。</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">ArrayList&lt;<span class="hljs-keyword">String</span>&gt;  a1=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;<span class="hljs-keyword">String</span>&gt;();<br></code></pre></td></tr></table></figure><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">order</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;<br><br><br>public <span class="hljs-built_in">int</span> compare(<span class="hljs-built_in">String</span> s1,<span class="hljs-built_in">String</span> s2)&#123;<br><span class="hljs-comment">//倒序，交换s1和s2即可</span><br><span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> =<span class="hljs-keyword">new</span> Integer(s1.length()).compareTo(<span class="hljs-keyword">new</span> Integer(s2.length()));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">num</span>==<span class="hljs-number">0</span>)&#123;<br><br><br><span class="hljs-keyword">return</span> s1.compareTo(s2);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">num</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args)&#123;<br><br>TreeSet&lt;<span class="hljs-keyword">String</span>&gt;  a1=<span class="hljs-keyword">new</span> TreeSet&lt;<span class="hljs-keyword">String</span>&gt;(<span class="hljs-keyword">new</span> order());<br><br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;12&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;1234567&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;123&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;1234&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;12345&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;22345&quot;</span>);<br><br><br><br><br><br><br><span class="hljs-comment">//s生成迭代器</span><br><br>Iterator&lt;<span class="hljs-keyword">String</span>&gt; it=a1.iterator();<br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br><br><br><br><span class="hljs-keyword">String</span> s1=it.next();<br><br><br>sop(s1);<br><br><span class="hljs-comment">// sop(s1.length());</span><br><br><br><br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>倒序</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">order</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">String</span>&gt;</span>&#123;<br><br><br>public <span class="hljs-built_in">int</span> compare(<span class="hljs-built_in">String</span> s1,<span class="hljs-built_in">String</span> s2)&#123;<br><span class="hljs-comment">//倒序，交换s1和s2即可</span><br><span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span> =<span class="hljs-keyword">new</span> Integer(s2.length()).compareTo(<span class="hljs-keyword">new</span> Integer(s1.length()));<br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">num</span>==<span class="hljs-number">0</span>)&#123;<br><br><br><span class="hljs-keyword">return</span> s2.compareTo(s1);<span class="hljs-comment">//如果相同，就行此次级比较</span><br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">num</span>;<br><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>没有泛型前的写法</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">private</span> <span class="hljs-built_in">Object</span> obj;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">setObject</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> obj</span>)</span>&#123;<br><br><span class="hljs-built_in">this</span>.obj=obj;<br><br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">Object</span> <span class="hljs-function"><span class="hljs-title">getObject</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">return</span> obj;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类上的泛型"><a href="#类上的泛型" class="headerlink" title="类上的泛型"></a>类上的泛型</h3><p>什么时候定义泛型类？</p><p>当类中要操作的引用数据类型不确定的时候。</p><p>泛型类定义的泛型，在整个类中有效，如果方法使用，那么泛型类的对象明确要操作的具体类型后，所要操作的类型就已经固定了</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">//类上的泛型</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testm</span>&lt;<span class="hljs-title">T</span>&gt;</span><br><span class="hljs-class"></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params">T t</span>)</span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;sohw&quot;</span>+t);<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">speak</span>(<span class="hljs-params">T t</span>)</span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;speak&quot;</span>+t);<br><br>&#125;<br><br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demoM</span></span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br><br>testm&lt;Integer&gt; t =<span class="hljs-keyword">new</span> testm&lt;Integer&gt;();<br>t.show(<span class="hljs-string">&quot;hahahh&quot;</span>);<br><br>t.speak(<span class="hljs-string">&quot;heihei&quot;</span>);<br><br>&#125;<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="函数上的泛型"><a href="#函数上的泛型" class="headerlink" title="函数上的泛型"></a>函数上的泛型</h3><p>为了让不同方法可以操作不同类型，而且类型还不确定，那么可以将泛型定义在方法函数上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">testm</span></span><br><span class="hljs-class"></span>&#123;<br><br><span class="hljs-keyword">public</span> &lt;T&gt; <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">show</span>(<span class="hljs-params">T t</span>)</span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;show   &quot;</span>+t);<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> &lt;Q&gt; <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">speak</span>(<span class="hljs-params">Q q</span>)</span>&#123;<br><br>System.out.println(<span class="hljs-string">&quot;speak   &quot;</span>+q);<br><br>&#125;<br><br><br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">demoM</span></span>&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br><br>testm t =<span class="hljs-keyword">new</span> testm();<br>t.show(<span class="hljs-string">&quot;hahahh&quot;</span>);<br><br>t.show(<span class="hljs-number">34</span>);<br><br><br><br><br>&#125;<br><br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="类上泛型与方法泛型"><a href="#类上泛型与方法泛型" class="headerlink" title="类上泛型与方法泛型"></a>类上泛型与方法泛型</h3><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">testm</span>&lt;<span class="hljs-title">T</span>&gt;<br>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title">show</span>(<span class="hljs-params">T t</span>)</span>&#123;<br><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;show   &quot;</span>+t);<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> &lt;Q&gt; <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">speak</span>(<span class="hljs-params">Q q</span>)</span>&#123;<br><br>System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;speak   &quot;</span>+q);<br><br>&#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>show方法受到对象类型约束，speak方法不受类对象约束</p><h3 id="静态泛型"><a href="#静态泛型" class="headerlink" title="静态泛型"></a>静态泛型</h3><p>静态方法不可以访问类上定义的泛型，因为静态方法先加载，类后加载</p><p>如果静态方法操作的应用场景不确定,可以将泛型定义在方法上</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;M&gt; <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">say</span>(<span class="hljs-params">M m</span>)</span>&#123;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="接口泛型"><a href="#接口泛型" class="headerlink" title="接口泛型"></a>接口泛型</h3><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-comment">//接口上的泛型</span><br><br><span class="hljs-keyword">interface</span> <span class="hljs-symbol">Inter</span>&lt;<span class="hljs-symbol">T</span>&gt;<br>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-built_in">void</span> show(T t) ;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">interImpl</span>&lt;<span class="hljs-symbol">T</span>&gt; <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Inter</span>&lt;<span class="hljs-symbol">T</span>&gt;&#123;<br><br>     <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> show(T t)&#123;<br><br>     System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;show2    &quot;</span>+t);<br><br>     &#125;<br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="泛型限定"><a href="#泛型限定" class="headerlink" title="泛型限定"></a>泛型限定</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">？通配符，可以理解为占位符<br></code></pre></td></tr></table></figure><figure class="highlight mathematica"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs mathematica"><span class="hljs-operator">?</span> <span class="hljs-variable">extends</span> <span class="hljs-built_in">E</span> ：可以接受<span class="hljs-built_in">E</span>类型或者<span class="hljs-built_in">E</span>的子类型<br>？<span class="hljs-variable">extends</span> <span class="hljs-built_in">E</span> ：可以接受<span class="hljs-built_in">E</span>类型或则<span class="hljs-built_in">E</span>的父类型<br></code></pre></td></tr></table></figure><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">//?day47 fanxingPro.java</span><br><br><br><br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">person</span></span>&#123;<br><br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">String</span> name;<br>person(<span class="hljs-keyword">String</span> name)&#123;<br><br><br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">String</span> getname()&#123;<br><br><span class="hljs-keyword">return</span> name;<br>&#125;<br><br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span> <span class="hljs-keyword"><span class="hljs-keyword">extends</span> <span class="hljs-type">person</span></span></span>&#123;<br><br><br>student(<span class="hljs-keyword">String</span> name)&#123;<br><br><span class="hljs-keyword">super</span>(name);<br>&#125;<br><br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">pro</span></span>&#123;<br><br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args)&#123;<br><br><br>ArrayList&lt;person&gt; a1=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;person&gt;();<br>a1.add(<span class="hljs-keyword">new</span> <span class="hljs-type">person</span>(<span class="hljs-string">&quot;xiaomin&quot;</span>));<br>a1.add(<span class="hljs-keyword">new</span> <span class="hljs-type">person</span>(<span class="hljs-string">&quot;meisi&quot;</span>));<br>a1.add(<span class="hljs-keyword">new</span> <span class="hljs-type">person</span>(<span class="hljs-string">&quot;Cluo&quot;</span>));<br>a1.add(<span class="hljs-keyword">new</span> <span class="hljs-type">person</span>(<span class="hljs-string">&quot;Modeliqi&quot;</span>));<br><br><br><br>ArrayList&lt;student&gt; a2=<span class="hljs-keyword">new</span> <span class="hljs-type">ArrayList</span>&lt;student&gt;();<br>a2.add(<span class="hljs-keyword">new</span> <span class="hljs-type">student</span>(<span class="hljs-string">&quot;heihei&quot;</span>));<br>a2.add(<span class="hljs-keyword">new</span> <span class="hljs-type">student</span>(<span class="hljs-string">&quot;deli&quot;</span>));<br>a2.add(<span class="hljs-keyword">new</span> <span class="hljs-type">student</span>(<span class="hljs-string">&quot;lisa&quot;</span>));<br>a2.add(<span class="hljs-keyword">new</span> <span class="hljs-type">student</span>(<span class="hljs-string">&quot;jiahui&quot;</span>));<br><br>show(a1);<br>show(a2);<br><br><br><br><br><br><br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void show(ArrayList&lt;? extends person&gt; a1)&#123;<br><br><br>Iterator&lt;? extends person&gt; it =a1.iterator();<br><br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><br><br>System.out.println(it.next().getname());<br>&#125;<br><br><br><br><br><br><br>&#125;<br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>比较器Comparetor</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">person</span></span>&#123;<br><br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">work</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">person</span></span>&#123;<br><br><br>&#125;<br><span class="hljs-comment">//传入person父类，子类也可以传入，但只能用父类的方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">comp</span> <span class="hljs-title">implements</span> <span class="hljs-title">comparator&lt;person&gt;</span></span><br>&#123;<br>public int compare(person p1,person p2)&#123;<br><span class="hljs-keyword">return</span> p1.getName().compareTo(p2.getName())<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><p>Map集合，该集合存储键值对，一对一对的往里存，而且要保证键的唯一性</p><h3 id="常用方法："><a href="#常用方法：" class="headerlink" title="常用方法："></a>常用方法：</h3><p>1.添加</p><p>​    put(key,value)</p><p>2.删除</p><p>​    clear() //溢出所有映射关系</p><p>​    remove(key)</p><p>3.判断</p><p>​    containsKey()</p><p>​    containValue()</p><p>4.获取</p><p>​    get(key) //获取对应键对应的值</p><p>​    isEmpty()</p><p>​    size()</p><p>​    values() //获取所有值</p><p>​    entrySet() :取出map中的关系map.Entry</p><h4 id="mapEntry获取键值"><a href="#mapEntry获取键值" class="headerlink" title="mapEntry获取键值"></a>mapEntry获取键值</h4><pre><code class="hljs">    Set&lt;Map.Entry&lt;String,String&gt;&gt; entry=map.entrySet();    Iterator&lt;Map.Entry&lt;String,String&gt;&gt; its=entry.iterator();    while(its.hasNext())&#123;        Map.Entry&lt;String,String&gt; me=its.next();        //取出键        String values=me.getValue();        //取出值        String keys=me.getKey();        sop(values+&quot;::&quot;+keys);</code></pre><p>Map.Entry其实也是一个接口，它是Map的内部接口</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">interface</span> <span class="hljs-title">Map</span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">interface</span> <span class="hljs-title">Entry</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Object <span class="hljs-title">getKeys</span>(<span class="hljs-params"></span>)</span>;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> Object <span class="hljs-title">getValue</span>(<span class="hljs-params"></span>)</span>;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="keySet-获取值："><a href="#keySet-获取值：" class="headerlink" title="keySet()获取值："></a>keySet()获取值：</h4><p>将map中所有的键存入Set集合中，因为Set集合具备迭代器</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//根据键取出每一个值</span><br><br>Set&lt;<span class="hljs-keyword">String</span>&gt; keyset =map.<span class="hljs-built_in">keySet</span>();<br><br><span class="hljs-comment">//生成迭代器</span><br>Iterator&lt;<span class="hljs-keyword">String</span>&gt; it =keyset.<span class="hljs-built_in">iterator</span>();<br><br><br><span class="hljs-keyword">while</span>(it.<span class="hljs-built_in">hasNext</span>())&#123;<br><br><span class="hljs-keyword">String</span> keys =it.<span class="hljs-built_in">next</span>();<br><br><span class="hljs-keyword">String</span> value=map.<span class="hljs-built_in">get</span>(keys);<br><br><span class="hljs-built_in">sop</span>(keys+<span class="hljs-string">&quot;:&quot;</span>+value);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>小弟</p><p>Map</p><p>​        |–HashMap ：底层是哈希表数据结构，不可以存入null键和null值，该集合线程是同步的，</p><p>​        |–Hashtable ：底层是哈希表数据结构，允许使用null键和null值，该集合是不同步的</p><p>​        |–TreeMap ：底层结构是二叉树数据结构，线程不同步，可以对mapz集合中的键进行排序</p><p>其实map集合和set集合很像，set底层就是调用了Map集合</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs arduino">Map&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; map=<span class="hljs-keyword">new</span> HashMap&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt;();<br><br><br><span class="hljs-comment">//增加</span><br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;01&quot;</span>,<span class="hljs-string">&quot;java01&quot;</span>);<br><span class="hljs-built_in">sop</span>(map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;01&quot;</span>,<span class="hljs-string">&quot;java02&quot;</span>));<span class="hljs-comment">//put方法会返回原来键对应的值</span><br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;02&quot;</span>,<span class="hljs-string">&quot;java02&quot;</span>);<br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;03&quot;</span>,<span class="hljs-string">&quot;java03&quot;</span>);<br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;04&quot;</span>,<span class="hljs-string">&quot;java04&quot;</span>);<br>map.<span class="hljs-built_in">put</span>(null,<span class="hljs-string">&quot;java05&quot;</span>);<br>map.<span class="hljs-built_in">put</span>(<span class="hljs-string">&quot;05&quot;</span>,null);<br><br><span class="hljs-comment">//删除</span><br><br>map.<span class="hljs-built_in">remove</span>(<span class="hljs-string">&quot;01&quot;</span>);<br><br><br><span class="hljs-comment">//查询</span><br><span class="hljs-built_in">sop</span>(map.<span class="hljs-built_in">get</span>(<span class="hljs-string">&quot;01&quot;</span>));<br><span class="hljs-built_in">sop</span>(map.<span class="hljs-built_in">containsKey</span>(<span class="hljs-string">&quot;01&quot;</span>));<br><br><br><span class="hljs-comment">//获取</span><br>Collection&lt;<span class="hljs-keyword">String</span>&gt; coll=map.<span class="hljs-built_in">values</span>();<br><span class="hljs-built_in">sop</span>(coll);<br><span class="hljs-built_in">sop</span>(map.<span class="hljs-built_in">values</span>());<br><br><span class="hljs-comment">//</span><br><br><br><span class="hljs-built_in">sop</span>(map);<br><br></code></pre></td></tr></table></figure><h3 id="map测试（day49"><a href="#map测试（day49" class="headerlink" title="map测试（day49)"></a>map测试（day49)</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">每一个学生都有对应的归属地</span><br><span class="hljs-comment">学生Student，地址String\</span><br><span class="hljs-comment">学生属性，姓名，年龄</span><br><span class="hljs-comment">注意：姓名和年龄相同的视为同一个学生</span><br><span class="hljs-comment">保证学生的唯一性</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">1.描述学生</span><br><span class="hljs-comment">2.定义map容器，将学生作为键，存入</span><br><span class="hljs-comment">3.获取map的元素</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span> <br><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-comment">//为了避免studen存入二叉树，所以要让学sheng类具备可比性</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">student</span> <span class="hljs-title">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">student</span>&gt;</span><br><span class="hljs-class"></span>&#123;<br><br><br><span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">compareTo</span>(<span class="hljs-params">student s</span>)</span><br>&#123;<br><br>int num=<span class="hljs-keyword">new</span> Integer(<span class="hljs-built_in">this</span>.age).compareTo(<span class="hljs-keyword">new</span> Integer(s.age));<br><span class="hljs-comment">//主属性相同就比较次要属性</span><br><span class="hljs-keyword">if</span> (num==<span class="hljs-number">0</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.compareTo(s.name);<br><br>&#125;<br><span class="hljs-keyword">return</span> num;<br><br>&#125;<br><br><span class="hljs-keyword">private</span> <span class="hljs-built_in">String</span> name;<br><span class="hljs-keyword">private</span> int age;<br><br><span class="hljs-function"><span class="hljs-title">student</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name,int age</span>)</span>&#123;<br><br><br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-built_in">this</span>.age=age;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">getName</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><span class="hljs-keyword">return</span> name;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">getAge</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><br><span class="hljs-keyword">return</span> age;<br>&#125;<br><br><span class="hljs-comment">//建立hashmap为了保证对象的唯一性就要复写hashcode和equals方法</span><br><br><span class="hljs-keyword">public</span> int <span class="hljs-function"><span class="hljs-title">hashCode</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><br><span class="hljs-keyword">return</span> name.hashCode()+age*<span class="hljs-number">34</span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">equals</span>(<span class="hljs-params"><span class="hljs-built_in">Object</span> obj</span>)</span>&#123;<br><br><span class="hljs-keyword">if</span>(!(obj <span class="hljs-keyword">instanceof</span> student))&#123;<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;类型异常&quot;</span>);<br>&#125;<br>student s=(student)obj;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.name.equals(s.name) &amp;&amp; <span class="hljs-built_in">this</span>.age==s.age;<br><br><br><br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">String</span> <span class="hljs-function"><span class="hljs-title">toString</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><br><span class="hljs-keyword">return</span> name+<span class="hljs-string">&quot; &quot;</span>+age;<br>&#125;<br><br><br><br><br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">map</span></span>&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">main</span>(<span class="hljs-params"><span class="hljs-built_in">String</span>[] args</span>)</span>&#123;<br><br><br>HashMap&lt;student,<span class="hljs-built_in">String</span>&gt; hm=<span class="hljs-keyword">new</span> HashMap&lt;student,<span class="hljs-built_in">String</span>&gt;();<br><br>hm.put(<span class="hljs-keyword">new</span> student(<span class="hljs-string">&quot;java01&quot;</span>,<span class="hljs-number">43</span>),<span class="hljs-string">&quot;meiguo&quot;</span>);<br>hm.put(<span class="hljs-keyword">new</span> student(<span class="hljs-string">&quot;java02&quot;</span>,<span class="hljs-number">43</span>),<span class="hljs-string">&quot;guo&quot;</span>);<br>hm.put(<span class="hljs-keyword">new</span> student(<span class="hljs-string">&quot;java02&quot;</span>,<span class="hljs-number">43</span>),<span class="hljs-string">&quot;iguo&quot;</span>);<br>hm.put(<span class="hljs-keyword">new</span> student(<span class="hljs-string">&quot;java03&quot;</span>,<span class="hljs-number">43</span>),<span class="hljs-string">&quot;eiguo&quot;</span>);<br>hm.put(<span class="hljs-keyword">new</span> student(<span class="hljs-string">&quot;java05&quot;</span>,<span class="hljs-number">43</span>),<span class="hljs-string">&quot;eigu&quot;</span>);<br><br><br><span class="hljs-comment">//取出元素</span><br><br><br><span class="hljs-built_in">Set</span>&lt;student&gt; keyset =hm.keySet();<br>Iterator&lt;student&gt; it=keyset.iterator();<br><br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><br><br>student stu=it.next();<br><span class="hljs-built_in">String</span> ad=hm.get(stu);<br><br>System.out.println(stu+<span class="hljs-string">&quot;SS&quot;</span>+ad);<br>&#125;<br><br><br><span class="hljs-comment">//第二种方法</span><br><br><span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">Map</span>.Entry&lt;student,<span class="hljs-built_in">String</span>&gt;&gt; entrySet=hm.entrySet();<br>Iterator&lt;<span class="hljs-built_in">Map</span>.Entry&lt;student,<span class="hljs-built_in">String</span>&gt;&gt; itr=entrySet.iterator();<br><br><span class="hljs-keyword">while</span>(itr.hasNext())&#123;<br><br><br><span class="hljs-built_in">Map</span>.Entry&lt;student,<span class="hljs-built_in">String</span>&gt; me =itr.next();<br>student stu=me.getKey();<br><span class="hljs-built_in">String</span> ad=me.getValue();<br><br>System.out.println(stu+<span class="hljs-string">&quot;SS&quot;</span>+ad);<br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h5 id="小练习：获取字符串中的字符出现的次数"><a href="#小练习：获取字符串中的字符出现的次数" class="headerlink" title="小练习：获取字符串中的字符出现的次数"></a>小练习：获取字符串中的字符出现的次数</h5><p>思路：</p><p>1.将字符串转换成字符数组，因为要对每一个字母进行操作，</p><p>2.定义一个map集合,因为打印结果的字母有顺序，所以使用treemap集合</p><p>3.遍历字符数组</p><p>​    将每一个字母作为键查map集合</p><p>​    如果返回null，将该字母和1存入map集合中</p><p>​    如果返回的不是null，说明该字母在集合map已存在并有对应的次数，</p><p>​    那么就将获取的次数进行自增，然后就将该字母与自增后后的次数存入到map集合中，覆盖调用原键值对应的值</p><p>4.将map集合中的数据变成指定字符串的形式返回</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">//结果具有自然的排序顺序<br><span class="hljs-built_in">public</span> static String count(String s)&#123;<br><span class="hljs-type">char</span>[] ch=s.toCharArray();<br><br>TreeMap&lt;<span class="hljs-type">Character</span>,<span class="hljs-type">Integer</span>&gt; tm=<span class="hljs-built_in">new</span> TreeMap&lt;<span class="hljs-type">Character</span>,<span class="hljs-type">Integer</span>&gt;();<br><br><span class="hljs-type">int</span> count=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;ch.length;i++)&#123;<br><br><span class="hljs-type">Integer</span> <span class="hljs-keyword">value</span>=tm.<span class="hljs-keyword">get</span>(ch[i]);<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">优化写法：只要值不为空就让计算机在原有计数的基础上加一，</span><br><span class="hljs-comment">如果为空就从0加一，此处还可以新增加字符判断，让不是字符的不参与计数</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">if(value!=null)&#123;</span><br><span class="hljs-comment">count=value;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">count++;</span><br><span class="hljs-comment">tm.put(ch[i],count);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">value</span>==<span class="hljs-keyword">null</span>)&#123;<br><br>tm.put(ch[i],<span class="hljs-number">1</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><br><br><span class="hljs-keyword">value</span>+=<span class="hljs-number">1</span>;<br>tm.put(ch[i],<span class="hljs-keyword">value</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(tm);<br><br>//建立缓冲区，将字典中的数据转换成规定格式<br>StringBuilder sb=<span class="hljs-built_in">new</span> StringBuilder();<br><br>//取出关系<br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">Set&lt;Map.Entry&lt;Character,Integer&gt;&gt; entryset=tm.entrySet();</span><br><span class="hljs-comment">Iterator it=entrySet.iterator();</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">while(it.hasNext())&#123;</span><br><span class="hljs-comment">Map.Entry&lt;Character,Integer&gt; me=it.next();</span><br><span class="hljs-comment">Character ch=me.getKey();</span><br><span class="hljs-comment">Integer value=me.getValue();</span><br><span class="hljs-comment">sb.append(ch+&quot;(&quot;+vaue+&quot;)&quot;);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br><br><br>//第二种取出,取出key集合<br><span class="hljs-keyword">Set</span>&lt;<span class="hljs-type">Character</span>&gt; keySet=tm.keySet();<br>Iterator&lt;<span class="hljs-type">Character</span>&gt; it=keySet.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><br><span class="hljs-type">Character</span> keys=it.next();<br><span class="hljs-type">Integer</span> <span class="hljs-keyword">value</span>=tm.<span class="hljs-keyword">get</span>(keys);<br>sb.append(keys+&quot;(&quot;+<span class="hljs-keyword">value</span>+&quot;)&quot;);<br><br><br>&#125;<br><br><span class="hljs-keyword">return</span> sb.toString();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="map多映射"><a href="#map多映射" class="headerlink" title="map多映射"></a>map多映射</h3><p>一个学校有多个教室，一个教室可以装 多个学生</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//多重映射</span><br>class mapsuper&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args)&#123;<br><span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt;&gt; school=<span class="hljs-keyword">new</span> <span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt;&gt;();<br><br><span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; class1=<span class="hljs-keyword">new</span> <span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt;();<br><br><span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; class2=<span class="hljs-keyword">new</span> <span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt;();<br><br>school.put(<span class="hljs-string">&quot;志远班&quot;</span>,class1);<br>school.put(<span class="hljs-string">&quot;国防班&quot;</span>,class2);<br><br>class1.put(<span class="hljs-string">&quot;孙光丽&quot;</span>,<span class="hljs-string">&quot;01&quot;</span>);<br>class1.put(<span class="hljs-string">&quot;庞志强&quot;</span>,<span class="hljs-string">&quot;02&quot;</span>);<br><br>class2.put(<span class="hljs-string">&quot;黄一红&quot;</span>,<span class="hljs-string">&quot;01&quot;</span>);<br>class2.put(<span class="hljs-string">&quot;王浩&quot;</span>,<span class="hljs-string">&quot;02&quot;</span>); <br><br><br><span class="hljs-comment">//遍历学校获取所有班级</span><br>Set&lt;<span class="hljs-keyword">String</span>&gt; keyset=school.keySet();<br>Iterator&lt;<span class="hljs-keyword">String</span>&gt; it=keyset.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><br><span class="hljs-keyword">String</span> classname=it.next();<br><span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; clazz=school.<span class="hljs-built_in">get</span>(classname);<br><br>getStudeninfo(clazz);<br><br><br><br>&#125;<br><br><br><br>&#125;<br><span class="hljs-comment">//获取班级的个人信息</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> getStudeninfo(<span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,<span class="hljs-keyword">String</span>&gt; <span class="hljs-built_in">map</span>)&#123;<br><br>Set&lt;<span class="hljs-keyword">String</span>&gt; keys=<span class="hljs-built_in">map</span>.keySet();<br><br>Iterator&lt;<span class="hljs-keyword">String</span>&gt; it=keys.iterator();<br><br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">key</span>=it.next();<br><span class="hljs-keyword">String</span> value=<span class="hljs-built_in">map</span>.<span class="hljs-built_in">get</span>(<span class="hljs-built_in">key</span>);<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">key</span>+<span class="hljs-string">&quot;---&quot;</span>+value);<br>&#125;<br><br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>对象映射写法</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//对象映射写法</span><br><br><span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,List&lt;student&gt;&gt; school=<span class="hljs-keyword">new</span> <span class="hljs-keyword">HashMap</span>&lt;<span class="hljs-keyword">String</span>,List&lt;student&gt;&gt;();<br><br>List&lt;student&gt; clazz1=<span class="hljs-keyword">new</span> ArrayList&lt;student&gt;();<br>List&lt;student&gt; clazz2=<span class="hljs-keyword">new</span> ArrayList&lt;student&gt;();<br><br>school.put(<span class="hljs-string">&quot;致远班&quot;</span>,clazz1);<br>school.put(<span class="hljs-string">&quot;国防班&quot;</span>,clazz2);<br><br>clazz1.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> student(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;ady&quot;</span>));<br>clazz1.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> student(<span class="hljs-number">12</span>,<span class="hljs-string">&quot;yui&quot;</span>));<br><br>clazz2.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> student(<span class="hljs-number">14</span>,<span class="hljs-string">&quot;opy&quot;</span>));<br>clazz2.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> student(<span class="hljs-number">15</span>,<span class="hljs-string">&quot;ady&quot;</span>));<br><br><span class="hljs-comment">//遍历学校获取所有班级</span><br>Set&lt;<span class="hljs-keyword">String</span>&gt; keyset=school.keySet();<br>Iterator&lt;<span class="hljs-keyword">String</span>&gt; it=keyset.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><br><span class="hljs-keyword">String</span> classname=it.next();<br>List&lt;student&gt; clazz=school.<span class="hljs-built_in">get</span>(classname);<br>System.out.<span class="hljs-built_in">println</span>(classname);<br>getinfo(clazz);<br>&#125;<br><br><br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> getinfo(List&lt;student&gt; list)&#123;<br>Iterator&lt;student&gt; it=list.iterator();<br><span class="hljs-keyword">while</span>(it.hasNext())&#123;<br><br>student s=it.next();<br>System.out.<span class="hljs-built_in">println</span>(s);<br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h2 id="Cllections"><a href="#Cllections" class="headerlink" title="Cllections"></a>Cllections</h2><p>day50</p><p>专门用于操作集合（List)的工具类</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><br><span class="hljs-comment">//自定义比较器</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-symbol">lenSort</span> <span class="hljs-symbol">implements</span> <span class="hljs-symbol">Comparator</span>&lt;<span class="hljs-symbol">String</span>&gt;&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">int</span> compare(String s1,String s2)&#123;<br><span class="hljs-keyword">if</span>(s1.length()&gt;s2.length())&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(s1.length()&lt;s2.length())&#123;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-keyword">return</span> s1.compareTo(s2);<br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs processing">ArrayList&lt;<span class="hljs-keyword">String</span>&gt; list=<span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;();<br><br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;hahah&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;plah&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;java&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;emo&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;aaaxiwanggggg&quot;</span>);<br>list.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;baodu&quot;</span>);<br><br>sop(list);<br><br><span class="hljs-comment">//排序</span><br>Collections.<span class="hljs-built_in">sort</span>(list);<br><br>sop(list);<br><span class="hljs-comment">//自定义排序</span><br>Collections.<span class="hljs-built_in">sort</span>(list ,<span class="hljs-keyword">new</span> lenSort());<br><br>sop(list);<br><br><span class="hljs-comment">//取最大值</span><br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">max</span>=Collections.<span class="hljs-built_in">max</span>(list,<span class="hljs-keyword">new</span> lenSort());<br><br>sop(<span class="hljs-built_in">max</span>);<br><br><span class="hljs-comment">//二分查找</span><br>sop(Collections.binarySearch(list,<span class="hljs-string">&quot;plah&quot;</span>));<br><br>sop(halfSearch(list,<span class="hljs-string">&quot;plah&quot;</span>));<br><br></code></pre></td></tr></table></figure><h4 id="二分查找-1"><a href="#二分查找-1" class="headerlink" title="二分查找"></a>二分查找</h4><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs excel">public static <span class="hljs-built_in">int</span> halfSearch(List&lt;String&gt; list,String key)&#123;<br><span class="hljs-built_in">int</span> <span class="hljs-built_in">mid</span>,<span class="hljs-built_in">right</span>,<span class="hljs-built_in">left</span>;<br><span class="hljs-built_in">right</span>=list.size()-<span class="hljs-number">1</span>;<br><span class="hljs-built_in">left</span>=<span class="hljs-number">0</span>;<br><br>while(<span class="hljs-built_in">left</span>&lt;=<span class="hljs-built_in">right</span>)&#123;<br><span class="hljs-built_in">mid</span>=(<span class="hljs-built_in">left</span>+<span class="hljs-built_in">right</span>)/<span class="hljs-number">2</span>;<br>String midstr=list.get(<span class="hljs-built_in">mid</span>);<br><br><span class="hljs-built_in">int</span> num=midstr.compareTo(key);<br><br><span class="hljs-built_in">if</span>(num&lt;<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-built_in">left</span>=<span class="hljs-built_in">mid</span>+<span class="hljs-number">1</span>;<br>&#125;<br>else <span class="hljs-built_in">if</span>(num&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-built_in">right</span>=<span class="hljs-built_in">mid</span>-<span class="hljs-number">1</span>;<br>&#125;<br>else&#123;<br><br>return <span class="hljs-built_in">mid</span>;<br>&#125;<br><br><br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="比较器写法"><a href="#比较器写法" class="headerlink" title="比较器写法"></a>比较器写法</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> halfSearch(List&lt;<span class="hljs-keyword">String</span>&gt; list,<span class="hljs-keyword">String</span> <span class="hljs-built_in">key</span>,Comparator cmp)&#123;<br><span class="hljs-built_in">int</span> mid,right,left;<br>right=list.<span class="hljs-built_in">size</span>()<span class="hljs-number">-1</span>;<br>left=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>(left&lt;=right)&#123;<br>mid=(left+right)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">String</span> midstr=list.<span class="hljs-built_in">get</span>(mid);<br><br><span class="hljs-built_in">int</span> num=midstr.compareTo(<span class="hljs-built_in">key</span>);<br><span class="hljs-comment">//比较器写法</span><br><span class="hljs-built_in">int</span> num =cmp.compare(<span class="hljs-built_in">str</span>.<span class="hljs-built_in">key</span>)<br><br></code></pre></td></tr></table></figure><h4 id="fill"><a href="#fill" class="headerlink" title="fill"></a>fill</h4><p>fill方法可以将list集合中所有的元素 替换成指定元素</p><p>练习 ：替换集合中的部分元素</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">fill</span><span class="hljs-params">(list,value)</span></span><br></code></pre></td></tr></table></figure><h4 id="replaceAll-list-oldvalue-newvalue"><a href="#replaceAll-list-oldvalue-newvalue" class="headerlink" title="replaceAll(list,oldvalue,newvalue)"></a>replaceAll(list,oldvalue,newvalue)</h4><p>字符替换</p><h4 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h4><p>字符反转</p><h4 id="reverseOrder"><a href="#reverseOrder" class="headerlink" title="reverseOrder"></a>reverseOrder</h4><p>返回一个比较器，强行逆行反转</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">TreeSet&lt;<span class="hljs-keyword">String</span>&gt; ts=<span class="hljs-keyword">new</span> <span class="hljs-type">TreeSet</span>&lt;<span class="hljs-keyword">String</span>&gt;(Collections.reverseOrder());<br></code></pre></td></tr></table></figure><p>reverseOrder(conparator)</p><p>反传比较器</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">TreeSet&lt;<span class="hljs-keyword">String</span>&gt; ts=<span class="hljs-keyword">new</span> <span class="hljs-type">TreeSet</span>&lt;<span class="hljs-keyword">String</span>&gt;(Collections.reverseOrder(<span class="hljs-keyword">new</span> <span class="hljs-type">lenSort</span>()));<br></code></pre></td></tr></table></figure><h4 id="Swap"><a href="#Swap" class="headerlink" title="Swap"></a>Swap</h4><p>交换集合中的两个字符的位置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">swap</span><span class="hljs-params">(list,index1,index2)</span></span><br></code></pre></td></tr></table></figure><h4 id="shuffle"><a href="#shuffle" class="headerlink" title="shuffle()"></a>shuffle()</h4><p>随机交换集合中元素的位置</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">shuffle</span><span class="hljs-params">(list)</span></span><br></code></pre></td></tr></table></figure><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p>各个方法使用的都是同一个锁以实现互斥</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221219163926888.png" alt="image-20221219163926888"></p><h4 id="数组变集合"><a href="#数组变集合" class="headerlink" title="数组变集合"></a>数组变集合</h4><p>好处：可以用集合的思想和方法来操作数组中的元素</p><p>注意：将数组变成集合，不可以使用集合的增删方法,因为数组的长度是固定的</p><p>支持方法：contain,get,indexOf,subList</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span><span class="hljs-literal">[]</span> arr=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br>List&lt;<span class="hljs-built_in">int</span>&gt; <span class="hljs-built_in">list</span>=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">as</span><span class="hljs-constructor">List(<span class="hljs-params">arr</span>)</span><br></code></pre></td></tr></table></figure><p>如果数组中的元素是对象，那么变成集合时，数组中的元素就直接转成集合中的元素</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Integer</span>[] num=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br></code></pre></td></tr></table></figure><p>如果数组中的元素都是基本数据类型 ，那么会将该数组作为集合中的元素存在，hashcode值存入集合中 </p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">int</span>[] nums=&#123;<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="集合变数组"><a href="#集合变数组" class="headerlink" title="集合变数组"></a>集合变数组</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs processing">ArrayList&lt;<span class="hljs-keyword">String</span>&gt; a1=<span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;();<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;canva&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;linda&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;steven&quot;</span>);<br><br>sop(a1);<br><br><span class="hljs-keyword">String</span>[] arra=a1.toArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[a1.<span class="hljs-built_in">size</span>()]);<br><br>sop(arra);<br></code></pre></td></tr></table></figure><p>1.指定类型的数组长度到底要定义为多长呢？</p><p>当指定类型数组小于了集合的size，那么该方法内部创建一个新的数组，长度为集合的size，</p><p>当指定类型的数组长度大于了集合的size，就不会新创建数组了，而是使用传递进来的数组</p><p>所以创建一个刚刚好的数组最优</p><p>2.为什莫要将集合变成数组？</p><p>为了限定对元素的操作，不需要进行删除操作</p><h4 id="可变数组"><a href="#可变数组" class="headerlink" title="可变数组"></a>可变数组</h4><p>其实就是一种数组参数 的简写形式，不用每一次都手动的建立对象，只要将要操作的参数传递即可，隐式地将这些封装成对象 </p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">show</span>(<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">5</span>);<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">show</span><span class="hljs-params">(<span class="hljs-keyword">int</span>...arr)</span></span>&#123;<br><br><span class="hljs-built_in">sop</span>(arr.length);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：可变参数一定要定义在参数的最后面</p><h4 id="迭代器替换（for）"><a href="#迭代器替换（for）" class="headerlink" title="迭代器替换（for）"></a>迭代器替换（for）</h4><p>格式：</p><p>for(数据类型 变量名：要被遍历地集合或则数组){</p><p>}</p><p>优缺点：只能对集合进行遍历获取，而不能对集合进行修改</p><p>迭代器除了遍历，还可以进行remove集合元素的动作，如果用ListIterator,还可以遍历过程中对集合进行增删改查的动作</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br>ArrayList&lt;<span class="hljs-keyword">String</span>&gt; a1=<span class="hljs-keyword">new</span> ArrayList&lt;<span class="hljs-keyword">String</span>&gt;();<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;canva&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;linda&quot;</span>);<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-string">&quot;steven&quot;</span>);<br><br>sop(a1);<br><br><span class="hljs-keyword">String</span>[] arra=a1.toArray(<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>[a1.<span class="hljs-built_in">size</span>()]);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">String</span> s:a1)&#123;<br><br>sop(s);<br>&#125;<br></code></pre></td></tr></table></figure><p>传统for与高级for</p><p>传统fo可以定义角标</p><h4 id="map遍历"><a href="#map遍历" class="headerlink" title="map遍历"></a>map遍历</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs lasso">HashMap&lt;<span class="hljs-built_in">Integer</span>,<span class="hljs-built_in">String</span>&gt; <span class="hljs-built_in">map</span>=<span class="hljs-literal">new</span> HashMap&lt;<span class="hljs-built_in">Integer</span>,<span class="hljs-built_in">String</span>&gt;();<br><span class="hljs-built_in">map</span>.put(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;ss&quot;</span>);<br><span class="hljs-built_in">map</span>.put(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;pp&quot;</span>);<br><span class="hljs-built_in">map</span>.put(<span class="hljs-number">3</span>,<span class="hljs-string">&quot;tt&quot;</span>);<br><br><span class="hljs-comment">//第一种方式</span><br><span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">Integer</span>&gt; keySet=<span class="hljs-built_in">map</span>.keySet();<br><br>for(<span class="hljs-built_in">Integer</span> i:keySet)&#123;<br>sop(i+<span class="hljs-string">&quot;+++&quot;</span>+<span class="hljs-built_in">map</span>.get(i));<br>&#125;<br><span class="hljs-comment">//第二种方式</span><br><span class="hljs-built_in">Set</span>&lt;<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">Integer</span>,<span class="hljs-built_in">String</span>&gt;&gt; entrySet=<span class="hljs-built_in">map</span>.entrySet();<br><br>for(<span class="hljs-built_in">Map</span>.Entry&lt;<span class="hljs-built_in">Integer</span>,<span class="hljs-built_in">String</span>&gt; m:entrySet)&#123;<br><br>sop(m.getKey()+<span class="hljs-string">&quot;---&quot;</span>+m.getValue());<br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="静态导包"><a href="#静态导包" class="headerlink" title="静态导包"></a>静态导包</h3><p>减少写静态类方法名的方法</p><p>当类重名时，需要指定具体的包名</p><p>当方法重名时，指定具备所属的对象或则类</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> <br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//静态导入</span><br><br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> java.util.Arrays.*;<span class="hljs-comment">//导入Array这个类中所有的静态方法</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">staticdemo</span> </span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span></span>&#123;<br><br><br><span class="hljs-keyword">int</span>[] arr=&#123;<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;;<br>sort(arr);<br><br><span class="hljs-keyword">int</span> index=binarySearch(arr,<span class="hljs-number">3</span>);<br><br>System.out.println(index);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(index);<br><span class="hljs-comment">//System中的方法都是静态方法，</span><br><span class="hljs-comment">//out标准输出流</span><br><span class="hljs-comment">//in 标准输入流</span><br><br><span class="hljs-comment">//properties的使用，</span><br><span class="hljs-comment">//因为properties是hashtable的子类，也就是map集合的一个子类对象</span><br><span class="hljs-comment">//可以使用map的方法取出集合中的元素</span><br><span class="hljs-comment">//那么该集合中存储都是字符串，没有定义泛型</span><br><br>Properties prop=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Properties()</span>;<br><br><span class="hljs-keyword">for</span>(Object obj:prop.key<span class="hljs-constructor">Set()</span>)&#123;<br><br>String value=(String)prop.get(obj);<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(obj+<span class="hljs-string">&quot; ---&quot;</span>+value);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="runtime对象"><a href="#runtime对象" class="headerlink" title="runtime对象"></a>runtime对象</h2><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//运行程序 误IOException</span><br>Runtime r=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Runtime</span>.</span></span>get<span class="hljs-constructor">Runtime()</span>;<br>Process p=r.exec(<span class="hljs-string">&quot;notepad.exe&quot;</span>);<br><br><span class="hljs-comment">//毁灭进程</span><br>p.destory<span class="hljs-literal">()</span>;<br><br><br><span class="hljs-comment">//获取日期</span><br><br>Date d=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Date()</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(d);<br></code></pre></td></tr></table></figure><h3 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221222203234197.png" alt="image-20221222203234197"></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">import</span> java.text.*;<br><span class="hljs-keyword">class</span> <span class="hljs-type">date</span>&#123;<br><br><span class="hljs-built_in">public</span> static <span class="hljs-type">void</span> main(String[] args)&#123;<br><br><br><span class="hljs-type">Date</span> d=<span class="hljs-built_in">new</span> <span class="hljs-type">Date</span>();<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(d);<br><br><br>//格式化时间：将模式封装到SimpleDateformat对象中<br>SimpleDateFormat sdf=<span class="hljs-built_in">new</span> SimpleDateFormat(&quot;yyyy年MM月dd日 hh:mm:ss&quot;);<br><br>//调用<span class="hljs-keyword">format</span>方法让模式格式化指定对象<br>String <span class="hljs-type">time</span>=sdf.format(d);<br><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(&quot;time&quot;+<span class="hljs-type">time</span>);<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="calendar"><a href="#calendar" class="headerlink" title="calendar"></a>calendar</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs processing">Calendar c=Calendar.getInstance();<br><br><span class="hljs-comment">//自己设置时间</span><br><br>c.<span class="hljs-built_in">set</span>(<span class="hljs-number">2022</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>);<br><br><span class="hljs-comment">//增加推移时间</span><br>c.<span class="hljs-built_in">add</span>(Calendar.DAY_OF_MONTH,<span class="hljs-number">3</span>);<br><br><br><span class="hljs-comment">//查表法转换日期</span><br><span class="hljs-keyword">String</span>[] <span class="hljs-built_in">month</span>=&#123;<span class="hljs-string">&quot;一月份&quot;</span>,<span class="hljs-string">&quot;二月份&quot;</span>,<span class="hljs-string">&quot;三月份&quot;</span>,<span class="hljs-string">&quot;四月份&quot;</span>,<br><span class="hljs-string">&quot;五月份&quot;</span>,<span class="hljs-string">&quot;六月份&quot;</span>,<span class="hljs-string">&quot;七月份&quot;</span>,<span class="hljs-string">&quot;八月份&quot;</span>,<br><span class="hljs-string">&quot;九月份&quot;</span>,<span class="hljs-string">&quot;十月份&quot;</span>,<span class="hljs-string">&quot;十一月份&quot;</span>,<span class="hljs-string">&quot;十二月份&quot;</span>&#125;;<br><br><br><br><span class="hljs-built_in">int</span> index=c.<span class="hljs-built_in">get</span>(Calendar.MONTH);<br><br>sop(<span class="hljs-built_in">month</span>[index]);<br><br>sop(c.<span class="hljs-built_in">get</span>(Calendar.YEAR)+<span class="hljs-string">&quot;年&quot;</span>+<span class="hljs-built_in">month</span>[index]+c.<span class="hljs-built_in">get</span>(Calendar.DAY_OF_MONTH));<br><br></code></pre></td></tr></table></figure><h4 id="小练习"><a href="#小练习" class="headerlink" title="小练习"></a>小练习</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221222211752677.png" alt="image-20221222211752677"></p><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><figure class="highlight glsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs glsl"><span class="hljs-comment">//ceil返回大于指定数据的最小整数</span><br><br><span class="hljs-type">double</span> d=Math.<span class="hljs-built_in">ceil</span>(<span class="hljs-number">13.24</span>);<br>sop(d);<br><br><span class="hljs-comment">//ceil返回小于指定数据的最大整数</span><br><span class="hljs-type">double</span> d1=Math.<span class="hljs-built_in">floor</span>(<span class="hljs-number">22.33</span>);<br>sop(d1);<br><span class="hljs-comment">//四舍五入取整</span><br><span class="hljs-type">double</span> d2=Math.<span class="hljs-built_in">round</span>(<span class="hljs-number">22.33</span>);<br>sop(d2);<br></code></pre></td></tr></table></figure><h4 id="随机数"><a href="#随机数" class="headerlink" title="随机数"></a>随机数</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//取随机数的两种方法</span><br><br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">10</span>;i++)&#123;<br><span class="hljs-comment">//零到10的随机数</span><br> double r2=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Math</span>.</span></span>random<span class="hljs-literal">()</span>;<br>sop(<span class="hljs-string">&quot;r&quot;</span>+r2);<br>&#125;<br><br><span class="hljs-comment">//第二种</span><br><span class="hljs-comment">//o到10</span><br>Random r=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Random()</span>;<br><span class="hljs-built_in">int</span> r1=r.next<span class="hljs-constructor">Int(10)</span>;<br>sop(r1);<br><br></code></pre></td></tr></table></figure><h2 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h2><p>input,output</p><p>字节流与字符流</p><h4 id="字节流的抽象基类"><a href="#字节流的抽象基类" class="headerlink" title="字节流的抽象基类"></a>字节流的抽象基类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">inputStream OutputStream</span><br></code></pre></td></tr></table></figure><p>常用文件操作</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">FileInputStream FileOutputStream</span><br></code></pre></td></tr></table></figure><p>缓冲区</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">BufferedInputStream BufferedOutputStream</span><br></code></pre></td></tr></table></figure><h4 id="字符流的抽象基类"><a href="#字符流的抽象基类" class="headerlink" title="字符流的抽象基类"></a>字符流的抽象基类</h4><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">Reader Writer</span><br></code></pre></td></tr></table></figure><p>常用文件操作</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">FileReader FilWriter</span><br></code></pre></td></tr></table></figure><p>缓冲区</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">BufferedReader BufferWriter</span><br></code></pre></td></tr></table></figure><h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><h3 id="写入文件（day54"><a href="#写入文件（day54" class="headerlink" title="写入文件（day54)"></a>写入文件（day54)</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//创建FileWriter对象，会自动创建一个新的文件，如果在本目录下有重名的文件，就会进行覆盖</span><br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileWriter</span>(<span class="hljs-string">&quot;demo.txt&quot;</span>);<br><br><span class="hljs-comment">//写入内容</span><br>fw.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;hahah&quot;</span>);<br><br><span class="hljs-comment">//刷新流对象的缓冲池的数据</span><br>fw.<span class="hljs-built_in">flush</span>();<br><br><span class="hljs-comment">//关闭资源，但是在关闭之前会先刷新一次</span><br>fw.<span class="hljs-built_in">close</span>();<br><br><br></code></pre></td></tr></table></figure><h3 id="IO异常处理的标准步奏"><a href="#IO异常处理的标准步奏" class="headerlink" title="IO异常处理的标准步奏"></a>IO异常处理的标准步奏</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">iodemo</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//建立空对象</span><br>FileWriter fw=<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//建立引用</span><br>fw=<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;io.txt&quot;</span>);<br>fw.write(<span class="hljs-string">&quot;dfdfdf&quot;</span>);<br><br><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br>System.out.println(e.toString());<br><br><br><br><br>&#125;<br><span class="hljs-keyword">finally</span>&#123;<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//关闭文件</span><br><span class="hljs-keyword">if</span>(fw!=<span class="hljs-keyword">null</span>)&#123;<br>fw.close();<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br>System.out.println(e.toString());<br><br>&#125;<br><br><br><br><br><br>&#125;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h3><p>第一种：一次取一个字符</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//创建一个文件读取对象，和指定读取文件相关联</span><br>FileReader fr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileReader</span>(<span class="hljs-string">&quot;demo.txt&quot;</span>);<br><br><span class="hljs-comment">//调用对象的读取方法read,返回的是AScin码,一次读取一个</span><br><span class="hljs-comment">//连续读取，读到最后一个返回-1</span><br><span class="hljs-keyword">int</span> cha=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((cha=fr.<span class="hljs-built_in">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br><br><br>System.out.<span class="hljs-built_in">println</span>((<span class="hljs-keyword">char</span>)cha);<br>&#125;<br><br><br><br><br><span class="hljs-comment">//关闭连接</span><br>fr.<span class="hljs-built_in">close</span>();<br><br></code></pre></td></tr></table></figure><p>第二种：一次取一个字符数组</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">FileReader fr=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileReader(<span class="hljs-string">&quot;demo.txt&quot;</span>)</span>;<br><br><br><span class="hljs-comment">//定义一个字符数组，用于存储读到的字符</span><br><br><span class="hljs-comment">//该read(char[]) 返回的是读到字符的个数</span><br><br><span class="hljs-built_in">char</span><span class="hljs-literal">[]</span> buf=<span class="hljs-keyword">new</span> <span class="hljs-built_in">char</span><span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br><br><span class="hljs-built_in">int</span> num=<span class="hljs-number">0</span><br><span class="hljs-keyword">while</span>((num=fr.read(buf))!=-<span class="hljs-number">1</span>)&#123;<br><span class="hljs-comment">//数组字符化，从0开始，到读取个数结束</span><br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">buf</span>,0,<span class="hljs-params">num</span>)</span>)<br><br><br>&#125; <br><br><br><br><br><span class="hljs-comment">//关闭连接</span><br>fr.close<span class="hljs-literal">()</span>;<br><br></code></pre></td></tr></table></figure><h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h3><p>注意：记住加上异常处理</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//第一种,以一个字符的形式进行读取</span><br><br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileWriter</span>(<span class="hljs-string">&quot;D:\\Desktop\\code\\Dos\\day56\\copy\\copycopydemo.txt&quot;</span>);<br>FileReader fr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileReader</span>(<span class="hljs-string">&quot;copy.java&quot;</span>);<br><br><span class="hljs-keyword">int</span> cha=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((cha=fr.<span class="hljs-built_in">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br><br>fw.<span class="hljs-built_in">write</span>((<span class="hljs-keyword">char</span>)cha);<br>&#125;<br><br><br>fw.<span class="hljs-built_in">close</span>();<br>fr.<span class="hljs-built_in">close</span>();<br><br>*/<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//第二种，以自读数组的形式读取数组</span><br><br><br><br><br>FileWriter fw=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileWriter</span>(<span class="hljs-string">&quot;D:\\Desktop\\code\\Dos\\day56\\copy\\copycopydemo1.txt&quot;</span>);<br>FileReader fr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileReader</span>(<span class="hljs-string">&quot;copy.java&quot;</span>);<br><br><span class="hljs-comment">//定义缓存数组</span><br><span class="hljs-keyword">char</span>[] ch=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((len=fr.<span class="hljs-built_in">read</span>(ch))!=<span class="hljs-number">-1</span>)&#123;<br><br><br>fw.<span class="hljs-built_in">write</span>(ch,<span class="hljs-number">0</span>,len);<br><br>&#125;<br><br><br><br>fw.<span class="hljs-built_in">close</span>();<br>fr.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221224155255269.png" alt="image-20221224155255269"></p><h3 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h3><p>缓冲区的建立是建立在流对象的基础上完成的</p><p>写入缓冲区</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//建立写对象</span><br>FileWriter fw=<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;buf.txt&quot;</span>);<br><br><span class="hljs-comment">//建立缓冲区</span><br>BufferedWriter bufw=<span class="hljs-keyword">new</span> BufferedWriter(fw);<br><br><br>bufw.write(<span class="hljs-string">&quot;daddsdsz&quot;</span>);<br><br><br><span class="hljs-comment">//缓冲区特有的换行</span><br><span class="hljs-comment">// bufw.newLine();</span><br><br><br><span class="hljs-comment">//用到缓冲区，就必须进行刷新</span><br>bufw.flush();<br><br><br><span class="hljs-comment">//关闭缓冲区就是在关闭缓冲区中的流对象</span><br>bufw.close();<br><br><br><br></code></pre></td></tr></table></figure><p>读出缓冲区</p><p>readLine()当读到末尾时，就将返回一个null</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//建立读对象</span><br>FileReader fr=<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;buf.txt&quot;</span>);<br><br><br><span class="hljs-comment">//建立缓冲区</span><br><br>BufferedReader bufr=<span class="hljs-keyword">new</span> BufferedReader(fr);<br><br><span class="hljs-comment">//特有方法：以行读取</span><br><br>String s1=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span>((s1=bufr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><br>System.out.println(s1);<br><br>&#125;<br>bufr.close();<br><br></code></pre></td></tr></table></figure><p>缓冲区复制</p><p>readLine只是返回回车符之前的数据内容，并不返回回车符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//文件缓冲复制</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">bufcopydemo</span></span>&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span><br><span class="hljs-function"></span>&#123;<br><br><br><span class="hljs-comment">//建立空对象</span><br>BufferedReader bufr=<span class="hljs-keyword">null</span>;<br>BufferedWriter bufw=<span class="hljs-keyword">null</span>;<br><br><br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-comment">//建立对象引用，并传入流对象</span><br><br>bufr=<span class="hljs-keyword">new</span> BufferedReader(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;bufcopy.java&quot;</span>));<br><br>bufw=<span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;buf_copu.txt&quot;</span>));<br><br>String s1=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span>((s1=bufr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><br>bufw.write(s1);<br>bufw.newLine();<br>bufw.flush();<br><br>&#125;<br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;读写失败&quot;</span>);<br><br><br><br>&#125;<br><br><span class="hljs-keyword">finally</span>&#123;<br><br><br><span class="hljs-keyword">try</span>&#123;<br><br><span class="hljs-keyword">if</span>(bufr!=<span class="hljs-keyword">null</span>)&#123;<br><br>bufr.close();<br>&#125;<br><br><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;读关闭失败&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">try</span>&#123;<br><br><span class="hljs-keyword">if</span>(bufw!=<span class="hljs-keyword">null</span>)&#123;<br><br>bufw.close();<br>&#125;<br><br><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;写关闭失败&quot;</span>);<br><br>&#125;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="Readline的底层原理-day56"><a href="#Readline的底层原理-day56" class="headerlink" title="Readline的底层原理(day56)"></a>Readline的底层原理(day56)</h3><h4 id="装饰设计模式："><a href="#装饰设计模式：" class="headerlink" title="装饰设计模式："></a>装饰设计模式：</h4><p>当想要对自己已有的对象进行功能增强时，可以定义类，对已有对象传入，基于已有的功能，并提供加强功能，那么自定义的该类称为装饰类</p><p>装饰设计模式与继承的区别：</p><p>装饰模式比继承要灵活，避免了继承体系臃肿，而且降低了类与类之间的关系，装饰类因为增强已有对象，具备的功能和已有的是相同的，只不过 提供了更强功能，所以修饰类和被修饰类通常属于一个体系中的。</p><p>吃饭的列子：</p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">superperson</span></span>&#123;<br><br><span class="hljs-keyword">private</span> person p;<br><br><span class="hljs-function"><span class="hljs-title">superperson</span>(<span class="hljs-params">person p</span>)</span>&#123;<br><br><span class="hljs-built_in">this</span>.p=p<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> eat&#123;<br><br>p.eat();<br>sop(<span class="hljs-string">&quot;甜点&quot;</span>);<br><br>sop(<span class="hljs-string">&quot;香槟&quot;</span>);<br><br><br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs aspectj"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">myBufferedread</span> </span><br><span class="hljs-class"></span>&#123;<br><br>FileReader r;<br><br>myBufferedread(FileReader r)&#123;<br><br><span class="hljs-keyword">this</span>.r=r;<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-function">String <span class="hljs-title">myReadLine</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span>&#123;<br><br><span class="hljs-comment">//定义一个临时容器，用于临时存放字符数组</span><br>StringBuilder sb=<span class="hljs-keyword">new</span> StringBuilder();<br><br><span class="hljs-keyword">int</span> ch=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((ch=r.read())!=<span class="hljs-number">-1</span>)&#123;<br><br><span class="hljs-comment">//排除掉换行符</span><br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;\r&#x27;</span>)&#123;<br><br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(ch==<span class="hljs-string">&#x27;\n&#x27;</span>)&#123;<br><br><span class="hljs-function"><span class="hljs-keyword">return</span> sb.<span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">else</span>&#123;<br><br>sb.append((<span class="hljs-keyword">char</span>)ch);<br>&#125;<br><br>&#125;<br><br><span class="hljs-comment">//防止没有换行符</span><br><span class="hljs-keyword">if</span>(sb.length()!=<span class="hljs-number">0</span>)&#123;<br><span class="hljs-function"><span class="hljs-keyword">return</span> sb.<span class="hljs-title">toString</span><span class="hljs-params">()</span></span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-keyword">null</span>;<br><br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">myclose</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function"></span>&#123;<br><br>r.close();<br>&#125;<br><br><br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LineNumberReader"><a href="#LineNumberReader" class="headerlink" title="LineNumberReader"></a>LineNumberReader</h3><p>带上行号的打印</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br><span class="hljs-comment">//带上行号的LineNumReader</span><br><span class="hljs-keyword">import</span> java.io.*;<br>class LineNumberReaderdemo&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> IOException<br>&#123;<br><br><br>FileReader fr=<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;readLine.java&quot;</span>);<br><br><span class="hljs-comment">//建立行号读取</span><br>LineNumberReader lnr=<span class="hljs-keyword">new</span> LineNumberReader(fr);<br><br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=lnr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><br><br>System.out.<span class="hljs-built_in">println</span>(lnr.getLineNumber()+<span class="hljs-string">&quot;--&quot;</span>+<span class="hljs-built_in">line</span>);<br>&#125;  <br><br><br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节流的建立"><a href="#字节流的建立" class="headerlink" title="字节流的建立"></a>字节流的建立</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">write_file</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//写入</span><br><br><span class="hljs-comment">//建立字节流</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;steam.txt&quot;</span>);<br><br><br><span class="hljs-comment">//只能写入字节和数组</span><br>fos.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;asdaa&quot;</span>.<span class="hljs-built_in">getBytes</span>());<br><br><span class="hljs-comment">//字节流不需要关闭或刷新，因为字节不需要查表,写入一个字节就可以 操作</span><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节流读取的三种方法"><a href="#字节流读取的三种方法" class="headerlink" title="字节流读取的三种方法"></a>字节流读取的三种方法</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read1_file</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//第一种读取方式，一个一个字符的读</span><br><span class="hljs-comment">//建立字节流</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;steam.txt&quot;</span>);<br><br><br><span class="hljs-keyword">int</span> ch=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((ch=fis.<span class="hljs-built_in">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br><br>System.out.<span class="hljs-built_in">println</span>((<span class="hljs-keyword">char</span>)ch);<br>&#125;<br><br>fis.<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read2_file</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//第二种读取方式，将字符存入数组中，最后转成字符串</span><br><span class="hljs-comment">//建立字节流</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;steam.txt&quot;</span>);<br><br><br><span class="hljs-comment">//使用数组暂存</span><br><span class="hljs-keyword">byte</span>[] buf =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>((len=fis.<span class="hljs-built_in">read</span>(buf))!=<span class="hljs-number">-1</span>)&#123;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(buf,<span class="hljs-number">0</span>,len));<br>&#125;<br><br>fis.<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">read3_file</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//第三种读取方式，合理规划数组长度，就不需要进行while循环了</span><br><span class="hljs-comment">//建立字节流</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;steam.txt&quot;</span>);<br><br><br><span class="hljs-comment">//获取读取文件的长度</span><br><span class="hljs-keyword">int</span> num=fis.<span class="hljs-built_in">available</span>();<br><br><span class="hljs-comment">//使用数组暂存</span><br><span class="hljs-keyword">byte</span>[] buf =<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[num];<br>fis.<span class="hljs-built_in">read</span>(buf);<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(buf));<br><br><br>fis.<span class="hljs-built_in">close</span>();<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>总计：第二种最为常用，因为可以降低存取频率，而且不会有溢出缓冲区的可能。</p><h3 id="图像的复制"><a href="#图像的复制" class="headerlink" title="图像的复制"></a>图像的复制</h3><p>字符流复制回产生错误，字节流才可以</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java">FileInputStream fis=<span class="hljs-keyword">null</span>;<br><br>FileOutputStream fos=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">try</span>&#123;<br><br>fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-string">&quot;D:\\Desktop\\code\\Dos\\day57\\copy2.JPG&quot;</span>);<br>fis=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;D:\\Desktop\\code\\Dos\\day57\\copy.JPG&quot;</span>);<br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((len=fis.read(buf))!=-<span class="hljs-number">1</span>)&#123;<br><br>fos.write(buf,<span class="hljs-number">0</span>,len);<br>&#125;<br><br><br><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException i)&#123;<br><br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;复制文件失败&quot;</span>);<br><br>&#125;<br><br><span class="hljs-keyword">finally</span>&#123;<br>                    <span class="hljs-keyword">try</span>&#123;<br>                        <span class="hljs-keyword">if</span>(fis!=<span class="hljs-keyword">null</span>)&#123;<br>                            fis.close();<br>                        &#125;<br><br>                    &#125;<br>                    <span class="hljs-keyword">catch</span>(IOException i)&#123;<br>                        <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;读文件关闭失败&quot;</span>);<br><br>                    &#125;<br><br><br>                <span class="hljs-keyword">try</span>&#123;<br>                    <span class="hljs-keyword">if</span>(fos!=<span class="hljs-keyword">null</span>)&#123;<br>                        fos.close();<br>                    &#125;<br><br>                &#125;<br>                <span class="hljs-keyword">catch</span>(IOException i)&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;写文件关闭失败&quot;</span>);<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="字节缓冲区的复制"><a href="#字节缓冲区的复制" class="headerlink" title="字节缓冲区的复制"></a>字节缓冲区的复制</h3><p>原理：读入的文件通过FileInputStream写入缓冲区，然后BufferedInputStream的read方法一个个的取出，取出的字节通过BufferedOutputStream的write方法写入</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><br>BufferedInputStream bufis=<span class="hljs-built_in">new</span> BufferedInputStream(<span class="hljs-built_in">new</span> FileInputStream(&quot;D:\\Desktop\\期末项目\\linux\\期末复习题.docx&quot;));<br>BufferedOutputStream bufos=<span class="hljs-built_in">new</span> BufferedOutputStream(<span class="hljs-built_in">new</span> FileOutputStream(&quot;D:\\Desktop\\code\\Dos\\day57\\copy.docx&quot;));<br><br><span class="hljs-type">int</span> <span class="hljs-keyword">by</span>=<span class="hljs-number">0</span>;<br><br><br><span class="hljs-keyword">while</span>((<span class="hljs-keyword">by</span>=bufis.<span class="hljs-keyword">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br><br>bufos.<span class="hljs-keyword">write</span>(<span class="hljs-keyword">by</span>);<br>&#125;<br><br>bufos.<span class="hljs-keyword">close</span>();<br>bufis.<span class="hljs-keyword">close</span>();<br><br></code></pre></td></tr></table></figure><h4 id="缓冲区原理"><a href="#缓冲区原理" class="headerlink" title="缓冲区原理"></a>缓冲区原理</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">字节流缓冲器的原理模拟</span><br><span class="hljs-comment">装饰器</span><br><span class="hljs-comment">需要解决的问题：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">类型提升出现-1，为了保证原字节不变，又要避免-1的出现，将返回的字节与上255</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">mybufInputStream</span></span>&#123;<br><br><span class="hljs-comment">//定义修饰对象</span><br><br><span class="hljs-keyword">private</span> InputStream in;<br><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-comment">//定义指针与计数器，指针能知道读取的暂存区位置，计数器防止读取过多</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> pos=<span class="hljs-number">0</span>,count=<span class="hljs-number">0</span>;<br><br>mybufInputStream(InputStream in)&#123;<br><br><span class="hljs-keyword">this</span>.in=in;<br>&#125;<br><br><span class="hljs-comment">//一次只读一个字节</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">myread</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-keyword">if</span>(count==<span class="hljs-number">0</span>)&#123;<br><br><span class="hljs-comment">//当count为零时，代表缓冲的buf中字节为零，需要重新从文件中取出新的字节</span><br><span class="hljs-comment">//然后在取</span><br>count=in.read(buf);<br>pos=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">byte</span> b=buf[pos];<br><br>count--;<br><br>pos++;<br><br><span class="hljs-keyword">return</span> b&amp;<span class="hljs-number">255</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(count&gt;<span class="hljs-number">0</span>)&#123;<br><span class="hljs-comment">//当count不为零时，就可以继续从buf中取数据，然后每取一次就pos+=,count--</span><br><span class="hljs-keyword">byte</span> b=buf[pos];<br><br>count--;<br><br>pos++;<br><br><span class="hljs-keyword">return</span> b&amp;<span class="hljs-number">255</span>;<br><br>&#125;<br><br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title">myclose</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function"></span>&#123;<br><br>in.close();<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="键盘录入-day58"><a href="#键盘录入-day58" class="headerlink" title="键盘录入(day58)"></a>键盘录入(day58)</h3><p>System.out:对应的是标准输出设备，控制台</p><p>System.in :对应的标准是输入设备，键盘</p><p>注意：回车包含字符‘\r’(13),’\n’(10)</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br><span class="hljs-comment">//录入键盘</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：通过键盘输入数据</span><br><span class="hljs-comment">当录入一行数据后，就将改行数据进行打印，</span><br><span class="hljs-comment">如果录入数据是over，那么就停止录入</span><br><span class="hljs-comment">通过使用：字节流转换成字符流，并使用其中的方法readLine进行优化</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.io.*;<br>class inputStreamReader&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args)<span class="hljs-keyword">throws</span> IOException&#123;<br><br><span class="hljs-comment">//获取键盘录入对象</span><br>InputStream in =System.in;<br><br><span class="hljs-comment">//将字节流转换成字符流对象，使用 转换流 INputStreamReader;</span><br>InputStreamReader isr=<span class="hljs-keyword">new</span> InputStreamReader(in);<br><br><span class="hljs-comment">//为了提高效率,将字符串进行缓冲区技术高效操作，使用BufferedReader</span><br><span class="hljs-keyword">BufferedReader</span> bufr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(isr);<br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=bufr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><br><span class="hljs-comment">//自定义结束标记</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;over&quot;</span>.equals(<span class="hljs-built_in">line</span>))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">line</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="字节流与字符流的相互转换"><a href="#字节流与字符流的相互转换" class="headerlink" title="字节流与字符流的相互转换"></a>字节流与字符流的相互转换</h3><h4 id="字节流对象转化成字符流对象"><a href="#字节流对象转化成字符流对象" class="headerlink" title="字节流对象转化成字符流对象"></a>字节流对象转化成字符流对象</h4><p>InputStremReader</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取键盘录入对象</span><br>InputStream <span class="hljs-keyword">in</span> =<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span><span class="hljs-keyword">in</span>;<br><span class="hljs-comment">//将字节流转换成字符流对象，使用 转换流 INputStreamReader;</span><br>InputStreamReader isr=<span class="hljs-keyword">new</span> <span class="hljs-constructor">InputStreamReader(<span class="hljs-params">in</span>)</span>;<br><span class="hljs-comment">//为了提高效率,将字符串进行缓冲区技术高效操作，使用BufferedReader</span><br>BufferedReader bufr=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedReader(<span class="hljs-params">isr</span>)</span>;<br><br></code></pre></td></tr></table></figure><h4 id="字符流对象转化成字节流对象"><a href="#字符流对象转化成字节流对象" class="headerlink" title="字符流对象转化成字节流对象"></a>字符流对象转化成字节流对象</h4><p>OutputStreamWriter</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//字符转成字节，</span><br>OutputStream out =<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out;<br>OutputStreamWriter osw=<span class="hljs-keyword">new</span> <span class="hljs-constructor">OutputStreamWriter(<span class="hljs-params">out</span>)</span>;<br><span class="hljs-comment">//建立缓冲区使用newline方法提高效率</span><br>BufferedWriter bufw=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedWriter(<span class="hljs-params">osw</span>)</span>;<br>String line=null;<br><span class="hljs-keyword">while</span>((line=bufr.read<span class="hljs-constructor">Line()</span>)!=null)&#123;<br><span class="hljs-comment">//自定义结束标记</span><br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;over&quot;</span>.equals(line))&#123;<br>break;<br>&#125;<br>bufw.write(line);<br><span class="hljs-comment">//增加换行</span><br>bufw.<span class="hljs-keyword">new</span><span class="hljs-constructor">Line()</span>;<br><span class="hljs-comment">//字符流缓冲区需要刷新</span><br>bufw.flush<span class="hljs-literal">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用键盘输入"><a href="#常用键盘输入" class="headerlink" title="常用键盘输入"></a>常用键盘输入</h4><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">BufferedReader bufr=<span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(System.<span class="hljs-keyword">in</span>))<br></code></pre></td></tr></table></figure><h3 id="流操作规律"><a href="#流操作规律" class="headerlink" title="流操作规律"></a>流操作规律</h3><h4 id="1-明确源和目的、"><a href="#1-明确源和目的、" class="headerlink" title="1.明确源和目的、"></a>1.明确源和目的、</h4><p>源：输入流，InputStream Reader</p><p>目的：输出流，OutputStream Writer</p><h4 id="2-操作的数据是否是纯文本"><a href="#2-操作的数据是否是纯文本" class="headerlink" title="2,操作的数据是否是纯文本"></a>2,操作的数据是否是纯文本</h4><p>是：字符流</p><p>否：字节流</p><h4 id="3-明确具体对象"><a href="#3-明确具体对象" class="headerlink" title="3.明确具体对象"></a>3.明确具体对象</h4><p>源设备：内存，硬盘，键盘</p><p>目的设备：内存，硬盘，控制台</p><h4 id="案列：文件的复制"><a href="#案列：文件的复制" class="headerlink" title="案列：文件的复制"></a>案列：文件的复制</h4><p>源：InputStream Reader</p><p>是不是文本文件：是就采用Reader</p><p>明确设备：设备上的一个文件</p><p>Reader中操作文件的对象为FileReader</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">FileReader fr=<span class="hljs-keyword">new</span>  <span class="hljs-type">FileReder</span>(<span class="hljs-string">&quot;a.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p>提高效率就使用缓冲区</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">BuferedReader bufr=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BufferedReader(<span class="hljs-params">fr</span>)</span><br></code></pre></td></tr></table></figure><p>目的：OutputStream Writer</p><p>是纯文本就使用Writer</p><p>设备：硬盘上的文件对象FileWriter</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe">FileWrite fw=<span class="hljs-keyword">new</span> <span class="hljs-type">FileWriter</span>(<span class="hljs-string">&quot;b.txt&quot;</span>)<br></code></pre></td></tr></table></figure><p>提高效率就使用缓冲区</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">BuferedWriter bufw=<span class="hljs-keyword">new</span> <span class="hljs-constructor">BuffererdWriter(<span class="hljs-params">fw</span>)</span>;<br></code></pre></td></tr></table></figure><p>实列：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">demo3</span><span class="hljs-params">()</span> throws IOException </span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">图片的复制</span><br><span class="hljs-comment">源文件：字节文件</span><br><span class="hljs-comment">目的：字节文件</span><br><span class="hljs-comment">使用字节对象 InputStream OutputStream</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//输入</span><br><br>BufferedInputStream bufr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">BufferedInputStream</span> (<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;D:\\Pictures\\20220911\\DSC06968.JPG&quot;</span>));<br><br>BufferedOutputStream bufw=<span class="hljs-keyword">new</span> <span class="hljs-built_in">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;copy.JPG&quot;</span>));<br><span class="hljs-keyword">int</span> by=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((by=bufr.<span class="hljs-built_in">read</span>())!=<span class="hljs-number">-1</span>)&#123;<br><br>bufw.<span class="hljs-built_in">write</span>(by);<br><br><br>&#125;<br><br>bufw.<span class="hljs-built_in">close</span>();<br>bufr.<span class="hljs-built_in">close</span>();<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="FileOutputStream"><a href="#FileOutputStream" class="headerlink" title="FileOutputStream"></a>FileOutputStream</h4><p>指定编码表</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">new</span> <span class="hljs-type">FileOutStream</span>(<span class="hljs-string">&quot;d.txt&quot;</span>,<span class="hljs-string">&quot;UTF-8&quot;</span>)<br></code></pre></td></tr></table></figure><h4 id="设置输入输出"><a href="#设置输入输出" class="headerlink" title="设置输入输出"></a>设置输入输出</h4><p>setin()</p><p>setout()</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//修改输入源</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>set<span class="hljs-constructor">In(<span class="hljs-params">new</span> FileInputStream(<span class="hljs-string">&quot;2.txt&quot;</span>)</span>);<br><br><span class="hljs-comment">//修改输出源</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>set<span class="hljs-constructor">Out(<span class="hljs-params">new</span> PrintStream(<span class="hljs-string">&quot;3.txt&quot;</span>)</span>);<br></code></pre></td></tr></table></figure><h4 id="将错误输出写入日志中"><a href="#将错误输出写入日志中" class="headerlink" title="将错误输出写入日志中"></a>将错误输出写入日志中</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：输出日志信息到文件中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">log</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">try</span>&#123;<br><br>String[] s=&#123;<span class="hljs-string">&quot;sd&quot;</span>,<span class="hljs-string">&quot;e&quot;</span>&#125;;<br><br>System.out.println(s[<span class="hljs-number">89</span>]);<br>&#125;<br><span class="hljs-keyword">catch</span>(Exception e)&#123;<br><br>System.setOut(<span class="hljs-keyword">new</span> PrintStream(<span class="hljs-string">&quot;log.txt&quot;</span>));<br>e.printStackTrace(System.out);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取系统信息"><a href="#获取系统信息" class="headerlink" title="获取系统信息"></a>获取系统信息</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取系统信息</span><br>Properties prop=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>get<span class="hljs-constructor">Properties()</span>;<br>prop.<span class="hljs-built_in">list</span>(<span class="hljs-keyword">new</span> <span class="hljs-constructor">PrintStream(<span class="hljs-string">&quot;System.txt&quot;</span>)</span>);<br><br></code></pre></td></tr></table></figure><h2 id="File"><a href="#File" class="headerlink" title="File"></a>File</h2><h3 id="常见操作"><a href="#常见操作" class="headerlink" title="常见操作"></a>常见操作</h3><p>1.创建</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript"><span class="hljs-built_in">bool</span>ean createNewFile():在指定位置创建文件，如果文件已经存在，则不创建，返回<span class="hljs-literal">false</span><br>和输出流不一样，输出流对象一建立文件就会覆盖原有文件<br><span class="hljs-built_in">bool</span>ean mkdir() :创建文件夹<br><span class="hljs-built_in">bool</span>ean mkdirs() :创建多级文件夹<br></code></pre></td></tr></table></figure><p>2.删除</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">boolean</span> <span class="hljs-keyword">delete</span>() :删除失败返回<span class="hljs-keyword">false</span>,如果文件正在被使用，则删除不了返回<span class="hljs-keyword">false</span><br><span class="hljs-keyword">void</span> deleteOnExit() :在程序退出时删除指定文件,文件正在运行也会被删除<br></code></pre></td></tr></table></figure><p>3.判断</p><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-type">boolean</span> exsts() :文件是否存在<br>isFile() :<br><span class="hljs-symbol">isDirectory:</span> <br><span class="hljs-symbol">isHidden:</span><br><span class="hljs-symbol">isAbsolute:</span><br></code></pre></td></tr></table></figure><p>4.获取信息</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-function"><span class="hljs-title">getName</span>();</span><br><span class="hljs-function"><span class="hljs-title">getPath</span>();</span><br><span class="hljs-function"><span class="hljs-title">getParent</span>();</span><br><span class="hljs-function"><span class="hljs-title">getAbsolutePath</span>();</span><br><span class="hljs-function"><span class="hljs-title">lastModify</span>();</span><br><span class="hljs-function"><span class="hljs-title"><span class="hljs-built_in">length</span></span>();</span><br></code></pre></td></tr></table></figure><h4 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//文本的创建</span><br><span class="hljs-built_in">File</span> f=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-built_in">File</span></span>(<span class="hljs-string">&quot;1.txt&quot;</span>);<br><br><span class="hljs-built_in">sop</span>(<span class="hljs-string">&quot;file&quot;</span>+f.<span class="hljs-built_in">createNewFile</span>());<br><br></code></pre></td></tr></table></figure><h4 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//文件夹的创建</span><br><br><span class="hljs-built_in">File</span> f1=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-built_in">File</span></span>(<span class="hljs-string">&quot;txt&quot;</span>);<br><br><span class="hljs-built_in">sop</span>(<span class="hljs-string">&quot;file&quot;</span>+f1.<span class="hljs-built_in">mkdir</span>());<br><span class="hljs-comment">// sop(&quot;file&quot;+f1.mkdirs()); 创建多级目录</span><br></code></pre></td></tr></table></figure><h4 id="文件删除"><a href="#文件删除" class="headerlink" title="文件删除"></a>文件删除</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><br><span class="hljs-regexp">//</span>文件删除<br><span class="hljs-regexp">//</span>运行时删除：deleteOnExit();<br>sop(<span class="hljs-string">&quot;delete::&quot;</span>+f.<span class="hljs-keyword">delete</span>());<br><br></code></pre></td></tr></table></figure><h4 id="文件类型判断"><a href="#文件类型判断" class="headerlink" title="文件类型判断"></a>文件类型判断</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-comment">//判断文件类型先要判断文件是否存在</span><br><span class="hljs-symbol">sop</span>(<span class="hljs-built_in">f1</span>.exists())<span class="hljs-comment">;</span><br><br><span class="hljs-symbol">sop</span>(<span class="hljs-built_in">f1</span>.isDirectory())<span class="hljs-comment">;</span><br><span class="hljs-symbol">sop</span>(<span class="hljs-built_in">f1</span>.isFile())<span class="hljs-comment">;</span><br><br></code></pre></td></tr></table></figure><p>旁段文件类型时，一定要先判断文件是否存在，在进行判断</p><h4 id="文件的重命名"><a href="#文件的重命名" class="headerlink" title="文件的重命名"></a>文件的重命名</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//文件重名名</span><br><span class="hljs-built_in">File</span> f2=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-built_in">File</span></span>(<span class="hljs-string">&quot;txt&quot;</span>);<br><span class="hljs-built_in">File</span> f3=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-built_in">File</span></span>(<span class="hljs-string">&quot;txt2&quot;</span>);<br><br><span class="hljs-built_in">sop</span>(f2.<span class="hljs-built_in">renameTo</span>(f3));<br><br></code></pre></td></tr></table></figure><h4 id="获取路劲"><a href="#获取路劲" class="headerlink" title="获取路劲"></a>获取路劲</h4><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>获取路径<br>sop(f1.getPath());<span class="hljs-regexp">//</span>相对路劲<br>sop(f1.getAbsolutePath());<span class="hljs-regexp">//</span>绝对路劲<br></code></pre></td></tr></table></figure><h4 id="访问某文件夹下的所有文件"><a href="#访问某文件夹下的所有文件" class="headerlink" title="访问某文件夹下的所有文件"></a>访问某文件夹下的所有文件</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-built_in">File</span> f4=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-built_in">File</span></span>(<span class="hljs-string">&quot;c:\\&quot;</span>);<br><br><span class="hljs-keyword">String</span>[] names=f4.<span class="hljs-built_in">list</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">String</span> name:names)&#123;<br><span class="hljs-built_in">sop</span>(name);<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="文件的过滤"><a href="#文件的过滤" class="headerlink" title="文件的过滤"></a>文件的过滤</h4><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-function"><span class="hljs-title">filter</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-comment">//文件名的过滤</span><br>File f=<span class="hljs-keyword">new</span> File(<span class="hljs-string">&quot;D:\\Desktop\\code\\Dos\\day58&quot;</span>);<br><br><span class="hljs-built_in">String</span>[] arr=f.list(<span class="hljs-keyword">new</span> <span class="hljs-function"><span class="hljs-title">FilenameFilter</span>(<span class="hljs-params"></span>)</span>&#123;<br><br><br><span class="hljs-comment">//这里使用匿名内部内的方式对过滤器进行复写</span><br><span class="hljs-keyword">public</span> <span class="hljs-built_in">boolean</span> <span class="hljs-function"><span class="hljs-title">accept</span>(<span class="hljs-params">File dir,<span class="hljs-built_in">String</span> name</span>)</span>&#123;<br><span class="hljs-keyword">return</span> name.endsWith(<span class="hljs-string">&quot;.java&quot;</span>);<br><br>&#125;<br>&#125;);<br>System.out.println(<span class="hljs-string">&quot;len&quot;</span>+arr.length);<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">String</span> name:arr)&#123;<br>sop(name);<br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="访问文件夹中的子文件夹（递归）"><a href="#访问文件夹中的子文件夹（递归）" class="headerlink" title="访问文件夹中的子文件夹（递归）"></a>访问文件夹中的子文件夹（递归）</h4><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> listsFile(<span class="hljs-keyword">File</span> f)&#123;<br><span class="hljs-comment">//递归访问所有子文件夹</span><br><br><br><span class="hljs-keyword">File</span>[] lists=f.listFiles();<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>:lists )&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">file</span>.isDirectory())&#123;<br>listsFile(<span class="hljs-keyword">file</span>);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>sop(<span class="hljs-keyword">file</span>);<br>&#125;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><p>注意限定：递归结束的条件</p><p>注意：递归容易出现栈溢出（循环的次数太多）</p><p>递归求和</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">int</span> <span class="hljs-keyword">sum</span>(<span class="hljs-built_in">int</span> x)&#123;<br><span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> x+<span class="hljs-keyword">sum</span>(x<span class="hljs-number">-1</span>);<br><br>&#125;<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20221231171945404.png" alt="image-20221231171945404"></p><h4 id="递归删除有文件存在的文件夹"><a href="#递归删除有文件存在的文件夹" class="headerlink" title="递归删除有文件存在的文件夹"></a>递归删除有文件存在的文件夹</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">deletes</span><span class="hljs-params">(<span class="hljs-built_in">File</span> f)</span></span>&#123;<br><br><span class="hljs-built_in">File</span>[] files=f.<span class="hljs-built_in">listFiles</span>();<br><span class="hljs-comment">//递归删除子目录</span><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;files.length;i++)&#123;<br><br><span class="hljs-keyword">if</span>(files[i].<span class="hljs-built_in">isDirectory</span>())&#123;<br><span class="hljs-built_in">deletes</span>(files[i]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(files[i].<span class="hljs-built_in">toString</span>()+<span class="hljs-string">&quot;--&quot;</span>+files[i].<span class="hljs-built_in"><span class="hljs-keyword">delete</span></span>());<br>&#125;<br>&#125;<br><span class="hljs-comment">//用于删除最后的根目录</span><br>System.out.<span class="hljs-built_in">println</span>(f+<span class="hljs-string">&quot;&quot;</span>+f.<span class="hljs-built_in"><span class="hljs-keyword">delete</span></span>());<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="获取文件的路径并保存到本地"><a href="#获取文件的路径并保存到本地" class="headerlink" title="获取文件的路径并保存到本地"></a>获取文件的路径并保存到本地</h4><p>第一种方式</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">savepath1</span><span class="hljs-params">(<span class="hljs-built_in">File</span> f)</span></span>&#123;<br><span class="hljs-comment">//使用改变输出流设置进行存储</span><br><span class="hljs-built_in">File</span>[] files=f.<span class="hljs-built_in">listFiles</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;files.length;i++)&#123;<br><span class="hljs-keyword">if</span>(files[i].<span class="hljs-built_in">isDirectory</span>())&#123;<br><span class="hljs-built_in">savepath1</span>(files[i]);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.<span class="hljs-built_in">println</span>(files[i].<span class="hljs-built_in">getAbsolutePath</span>());<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>第二种方式</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">savepath2</span><span class="hljs-params">(<span class="hljs-built_in">File</span> f,List&lt;<span class="hljs-built_in">File</span>&gt; list)</span></span>&#123;<br><span class="hljs-comment">//使用集合存储文件对象，并对文件进行过滤</span><br><span class="hljs-built_in">File</span>[] files=f.<span class="hljs-built_in">listFiles</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">0</span>;i&lt;files.length;i++)&#123;<br><span class="hljs-keyword">if</span>(files[i].<span class="hljs-built_in">isDirectory</span>())&#123;<br><span class="hljs-built_in">savepath2</span>(files[i],list);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">if</span>(files[i].<span class="hljs-built_in">getName</span>().<span class="hljs-built_in">endsWith</span>(<span class="hljs-string">&quot;.java&quot;</span>))<br>list.<span class="hljs-built_in">add</span>(files[i]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//写入流</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeFile</span><span class="hljs-params">(List&lt;<span class="hljs-built_in">File</span>&gt; list)</span></span>&#123;<br><span class="hljs-comment">//源：集合</span><br><span class="hljs-comment">//目的：文本文件</span><br><span class="hljs-comment">//使用Writer进行处理</span><br>BufferedWriter bufw=null;<br><br><span class="hljs-keyword">try</span>&#123;<br>bufw=<span class="hljs-keyword">new</span> <span class="hljs-built_in">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileWriter</span>(<span class="hljs-string">&quot;2.txt&quot;</span>));<br><span class="hljs-keyword">for</span>(<span class="hljs-built_in">File</span> f:list)&#123;<br><span class="hljs-keyword">String</span> path=f.<span class="hljs-built_in">getAbsolutePath</span>();<br>bufw.<span class="hljs-built_in">write</span>(path);<br>bufw.<span class="hljs-built_in">newLine</span>();<span class="hljs-comment">//换行</span><br>bufw.<span class="hljs-built_in">flush</span>();<br><br>&#125;<br><br><br>&#125;<br><span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(IOException e)&#123;<br><br>e.<span class="hljs-built_in">printStackTrace</span>();<br>&#125;<br>finally&#123;<br><br><span class="hljs-keyword">try</span>&#123;<br><span class="hljs-keyword">if</span>(bufw!=null)&#123;<br>bufw.<span class="hljs-built_in">close</span>();<br>&#125;<br>&#125;<span class="hljs-built_in"><span class="hljs-keyword">catch</span></span>(IOException e)&#123;<br><br>e.<span class="hljs-built_in">printStackTrace</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Properties"><a href="#Properties" class="headerlink" title="Properties"></a>Properties</h2><p>Properties是Hashtable的子类，也就是说它具备map集合的特点，而且它里面存储的键值对都是字符串</p><p>是集合 中何io技术相结合的集合容器</p><p>该对象的特点，可以用于键值对形式的配置文件</p><h4 id="常见操作-1"><a href="#常见操作-1" class="headerlink" title="常见操作"></a>常见操作</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">Properties p=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br><br><span class="hljs-comment">//设置值</span><br>p.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;zhangshang&quot;</span>,<span class="hljs-string">&quot;20&quot;</span>)</span>;<br>p.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;lishi&quot;</span>,<span class="hljs-string">&quot;45&quot;</span>)</span>;<br><br><span class="hljs-comment">//取出键</span><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(p);<br>String value=p.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;lishi&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(value);<br><br><span class="hljs-comment">//取出键集合</span><br>Set&lt;String&gt; names=p.<span class="hljs-built_in">string</span><span class="hljs-constructor">PropertyNames()</span>;<br><br><span class="hljs-keyword">for</span>(String name:names)&#123;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(name+<span class="hljs-string">&quot;::&quot;</span>+p.get<span class="hljs-constructor">Property(<span class="hljs-params">name</span>)</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="读取文件中的键值对到prob文件中"><a href="#读取文件中的键值对到prob文件中" class="headerlink" title="读取文件中的键值对到prob文件中"></a>读取文件中的键值对到prob文件中</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//读取文件中的键值对</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">建立读取流</span><br><span class="hljs-comment">以行读取</span><br><span class="hljs-comment">以等号分割</span><br><span class="hljs-comment">*/</span><br>Properties prob=<span class="hljs-keyword">new</span> Properties();<br><span class="hljs-keyword">BufferedReader</span> bufr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;prob.txt&quot;</span>));<br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=bufr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">String</span>[] arr=<span class="hljs-built_in">line</span>.<span class="hljs-built_in">split</span>(<span class="hljs-string">&quot;=&quot;</span>);<br>System.out.<span class="hljs-built_in">println</span>(arr[<span class="hljs-number">0</span>]+<span class="hljs-string">&quot;==&quot;</span>+arr[<span class="hljs-number">1</span>]);<br>prob.setProperty(arr[<span class="hljs-number">0</span>],arr[<span class="hljs-number">1</span>]);<br><br>&#125;<br>bufr.close();<br>System.out.<span class="hljs-built_in">println</span>(prob);<br><br></code></pre></td></tr></table></figure><p>方法二：调用load</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//使用properties中的load方法进行加载</span><br>Properties p=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-string">&quot;prob.txt&quot;</span>)</span>;<br>p.load(fis);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(p);<br><br></code></pre></td></tr></table></figure><p>修改数据properties并保存为txt</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-comment">//修改数据，但不会修改源txt</span><br>p.<span class="hljs-built_in">setProperty</span>(<span class="hljs-string">&quot;wangwu&quot;</span>,<span class="hljs-string">&quot;sd&quot;</span>);<br><br><span class="hljs-comment">//将修改后的数据存储到新的文件中,前面传入的是一个输出流，后面是一个注释，可不写</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;prob1.txt&quot;</span>);<br>p.<span class="hljs-built_in">store</span>(fos,<span class="hljs-string">&quot;zhushi&quot;</span>);<br><br>fos.close;<br>fis.close;<br></code></pre></td></tr></table></figure><h4 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h4><h4 id="程序计数器配置文件-day61"><a href="#程序计数器配置文件-day61" class="headerlink" title="程序计数器配置文件(day61)"></a>程序计数器配置文件(day61)</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-built_in">int</span> count=<span class="hljs-number">0</span>;<br><br>File f=<span class="hljs-keyword">new</span> <span class="hljs-constructor">File(<span class="hljs-string">&quot;info.ini&quot;</span>)</span>;<br><span class="hljs-keyword">if</span>(!f.exists<span class="hljs-literal">()</span>)&#123;<br>f.create<span class="hljs-constructor">NewFile()</span>;<br>&#125;<br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileInputStream(<span class="hljs-params">f</span>)</span>;<br>Properties prob=<span class="hljs-keyword">new</span> <span class="hljs-constructor">Properties()</span>;<br><span class="hljs-comment">//加载输入流到prob中</span><br>prob.load(fis);<br><br>String value=prob.get<span class="hljs-constructor">Property(<span class="hljs-string">&quot;time&quot;</span>)</span>;<br><span class="hljs-keyword">if</span>(value!=null)&#123;<br><br>count=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Integer</span>.</span></span>parse<span class="hljs-constructor">Int(<span class="hljs-params">value</span>)</span>;<br><span class="hljs-keyword">if</span>(count&gt;<span class="hljs-number">5</span>)&#123;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;次数已到，请充值&quot;</span>);<br>return;<br>&#125;<br><br>&#125;<br>count++;<br>prob.set<span class="hljs-constructor">Property(<span class="hljs-string">&quot;time&quot;</span>,<span class="hljs-params">count</span>+<span class="hljs-string">&quot;&quot;</span>)</span>;<br><br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-constructor">FileOutputStream(<span class="hljs-params">f</span>)</span>;<br><span class="hljs-comment">//将prob中的文件写入到输出流中</span><br>prob.store(fos,<span class="hljs-string">&quot;&quot;</span>);<br><br>fos.close<span class="hljs-literal">()</span>;<br>fis.close<span class="hljs-literal">()</span>;<br></code></pre></td></tr></table></figure><h2 id="打印流"><a href="#打印流" class="headerlink" title="打印流"></a>打印流</h2><p>原理：该流提供了打印方法，可以将各种类型的数据原样打印</p><h4 id="字节打印流："><a href="#字节打印流：" class="headerlink" title="字节打印流："></a>字节打印流：</h4><p>PrintStream</p><p>构造函数接受的参数类型</p><p>1.file对象 File</p><p>2.字符串路径 String</p><p>3.字节输出流 OutputStream</p><h4 id="字符打印流"><a href="#字符打印流" class="headerlink" title="字符打印流"></a>字符打印流</h4><p>PrintWriter</p><p>1.file对象 File</p><p>2.字符串路径 String</p><p>3.字符输出流 OutputStream</p><p>4.字符输出流</p><p>测试代码</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230104154647333.png" alt="image-20230104154647333"></p><p>将输入的文字保存到文件中</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230104155013197.png" alt="image-20230104155013197"></p><h2 id="序列流SequenceInputStream"><a href="#序列流SequenceInputStream" class="headerlink" title="序列流SequenceInputStream"></a>序列流SequenceInputStream</h2><p>将多个流合并成一个流</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//vector用于存储多个流对象</span><br><br>Vector&lt;FileInputStream&gt; v=<span class="hljs-keyword">new</span> Vector&lt;FileInputStream&gt;();<br><br>v.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;1.txt&quot;</span>));<br>v.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;2.txt&quot;</span>));<br>v.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;3.txt&quot;</span>));<br><br><span class="hljs-comment">//</span><br>Enumeration&lt;FileInputStream&gt; en=v.<span class="hljs-built_in">elements</span>();<br><br>SequenceInputStream sis=<span class="hljs-keyword">new</span> <span class="hljs-built_in">SequenceInputStream</span>(en);<br><br><span class="hljs-comment">//建立输出流</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;4.txt&quot;</span>);<br><br><span class="hljs-comment">//开始写数据</span><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((len=sis.<span class="hljs-built_in">read</span>(buf))!=<span class="hljs-number">-1</span>)&#123;<br>fos.<span class="hljs-built_in">write</span>(buf,<span class="hljs-number">0</span>,len);<br>&#125;<br>fos.<span class="hljs-built_in">close</span>();<br>sis.<span class="hljs-built_in">close</span>();<br></code></pre></td></tr></table></figure><p>文件的拆分</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs routeros">FileInputStream <span class="hljs-attribute">fis</span>=new FileInputStream(<span class="hljs-string">&quot;头像_摩羯座.png&quot;</span>);<br><br>FileOutputStream <span class="hljs-attribute">fos</span>=<span class="hljs-literal">null</span>;<br><br>byte[] <span class="hljs-attribute">buf</span>=new byte[1024<span class="hljs-number">*50</span>];<br>int <span class="hljs-attribute">len</span>=0;<br>int <span class="hljs-attribute">count</span>=1;<br><br><span class="hljs-keyword">while</span>((<span class="hljs-attribute">len</span>=fis.read(buf))!=-1)&#123;<br><span class="hljs-attribute">fos</span>=new FileOutputStream((count++)+<span class="hljs-string">&quot;.part&quot;</span>);<br>fos.write(buf,0,len);<br>fos.close();<br>&#125;<br><br>fis.close();<br><br></code></pre></td></tr></table></figure><p>文件的合并</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs arduino">ArrayList&lt;FileInputStream&gt; a1=<span class="hljs-keyword">new</span> ArrayList&lt;FileInputStream&gt;();<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i=<span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">5</span>;i++)&#123;<br>a1.<span class="hljs-built_in">add</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(i+<span class="hljs-string">&quot;.part&quot;</span>));<br>&#125;<br><br>Iterator&lt;FileInputStream&gt; it=a1.<span class="hljs-built_in">iterator</span>();<br><br>Enumeration&lt;FileInputStream&gt; en=<span class="hljs-keyword">new</span> Enumeration&lt;FileInputStream&gt;()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-built_in">hasMoreElements</span>()&#123;<br><span class="hljs-keyword">return</span> it.<span class="hljs-built_in">hasNext</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> FileInputStream <span class="hljs-title">nextElement</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">return</span> it.<span class="hljs-built_in">next</span>();<br>&#125;<br><br><br>&#125;;<br>SequenceInputStream sis=<span class="hljs-keyword">new</span> <span class="hljs-built_in">SequenceInputStream</span>(en);<br><br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;0.png&quot;</span>);<br><br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((len=sis.<span class="hljs-built_in">read</span>(buf))!=<span class="hljs-number">-1</span>)&#123;<br>fos.<span class="hljs-built_in">write</span>(buf,<span class="hljs-number">0</span>,len);<br>&#125;<br>fos.<span class="hljs-built_in">close</span>();<br>sis.<span class="hljs-built_in">close</span>();<br><br></code></pre></td></tr></table></figure><h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><p>标记类：一个接口，但其中没有要进行复写的方法，只是用于进行标记</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//要对类进行标记</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">person</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Serializable</span></span>&#123;<br><br>String name;<br><span class="hljs-keyword">int</span> age;<br><br>person(String name,<span class="hljs-keyword">int</span> age)&#123;<br><span class="hljs-keyword">this</span>.name=name;<br><span class="hljs-keyword">this</span>.age=age;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span></span>&#123;<br><br><span class="hljs-keyword">return</span> name+<span class="hljs-string">&quot;--&quot;</span>+age;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>将已经创建好的对象存储在一个文件中，当其他人也要使用这个已经创建好的对象时，就直接读取该文件，</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">//文件对象的读取</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readObj</span><span class="hljs-params">()</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br>ObjectInputStream ois=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;obj.txt&quot;</span>));<br>person p =(person)ois.<span class="hljs-built_in">readObject</span>();<br>System.out.<span class="hljs-built_in">println</span>(p);<br>ois.<span class="hljs-built_in">close</span>();<br><br><br>&#125;<br><span class="hljs-comment">//文件对象的生成</span><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeObj</span><span class="hljs-params">()</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br><br>ObjectOutputStream oos=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;obj.txt&quot;</span>));<br>oos.<span class="hljs-built_in">writeObject</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">person</span>(<span class="hljs-string">&quot;lish&quot;</span>,<span class="hljs-number">34</span>));<br><br>oos.<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>对象文件的序列号，与该对象的成员变量相关，只要成员变量改变，文件对象的序列号就会发生改变</p><p>UUID保持不变</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> serVersionUID = <span class="hljs-number">42</span>L;<br></code></pre></td></tr></table></figure><p>静态数据不能被序列化</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">static</span> <span class="hljs-keyword">String</span> country=<span class="hljs-string">&quot;chaina&quot;</span><br></code></pre></td></tr></table></figure><p>禁止序列化</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">translent int age<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h2 id="管道流"><a href="#管道流" class="headerlink" title="管道流"></a>管道流</h2><p>PipOutPutStream </p><p>PipInPutStream</p><p>输入流可以和输出流直接进行连接，通过结合线程是实现</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">PipedInputStream input = <span class="hljs-keyword">new</span> PipedInputStream();<br>PipedOutputStream output = <span class="hljs-keyword">new</span> PipedOutputStream();<br>input.connect(output);<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Input(input)).start();<br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> Output(output)).start();<br></code></pre></td></tr></table></figure><h2 id="RandomAccessFile"><a href="#RandomAccessFile" class="headerlink" title="RandomAccessFile"></a>RandomAccessFile</h2><p>该类不算是IO体系种中的子类，而是直接继承自Object,但是它是IO包中成员，因为它具备读和写功能。内部封装了一个数组，而且通过指针对数组的元素进行操作，可以通过getFilePoint获取指针位置、</p><p>其中完成读写的原理就是内部封装了字节输入流和输出流，</p><p>通过构造文件可以看出，该类只能操作文件，而且操作文件还有模式限定:只读r,读写rw等，</p><p>如果模式为只r,不会创建文件，会去读取一个已经存在的文件，如果该文件不存在，则会出现异常。如果模式为rw,操作的文件不存在，会自动创建，如果存在就会覆盖</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readFile</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><br>RandomAccessFile raf=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RandomAccessFile</span>(<span class="hljs-string">&quot;radom.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">4</span>];<br><br>raf.<span class="hljs-built_in">read</span>(buf);<br><span class="hljs-comment">//读取字符</span><br><span class="hljs-keyword">String</span> name=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(buf);<br>System.out.<span class="hljs-built_in">println</span>(name);<br><span class="hljs-comment">//读取年龄</span><br><span class="hljs-keyword">int</span> age=raf.<span class="hljs-built_in">readInt</span>();<br>System.out.<span class="hljs-built_in">println</span>(age);<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeFile</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//建立对象</span><br>RandomAccessFile raf=<span class="hljs-keyword">new</span> <span class="hljs-built_in">RandomAccessFile</span>(<span class="hljs-string">&quot;radom.txt&quot;</span>,<span class="hljs-string">&quot;rw&quot;</span>);<br><br>raf.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;李四&quot;</span>.<span class="hljs-built_in">getBytes</span>());<br>raf.<span class="hljs-built_in">writeInt</span>(<span class="hljs-number">94</span>); <span class="hljs-comment">//一次写入4个字节</span><br><br>raf.<span class="hljs-built_in">close</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="基本数据类型的读写"><a href="#基本数据类型的读写" class="headerlink" title="基本数据类型的读写"></a>基本数据类型的读写</h2><p>DataInputStream 与DataOutputStream</p><p>可以用于操作基本数据类型的数据流对象</p><p>普通数据类型的写入与读出</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>public static void read<span class="hljs-constructor">File()</span> throws IOException<br>&#123;<br>DataInputStream dos=<span class="hljs-keyword">new</span> <span class="hljs-constructor">DataInputStream(<span class="hljs-params">new</span> FileInputStream(<span class="hljs-string">&quot;data.txt&quot;</span>)</span>);<br><br><span class="hljs-built_in">int</span> num=dos.read<span class="hljs-constructor">Int()</span>;<br>Double num1=dos.read<span class="hljs-constructor">Double()</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;num&quot;</span>+num);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;num&quot;</span>+num1);<br>&#125;<br><br>public static void write<span class="hljs-constructor">File()</span> throws IOException<br>&#123;<br><br>DataOutputStream dos=<span class="hljs-keyword">new</span> <span class="hljs-constructor">DataOutputStream(<span class="hljs-params">new</span> FileOutputStream(<span class="hljs-string">&quot;data.txt&quot;</span>)</span>);<br><br>dos.write<span class="hljs-constructor">Int(234)</span>;<br><span class="hljs-comment">// dos.writeString(&quot;wangwu&quot;);</span><br>dos.write<span class="hljs-constructor">Double(234)</span>;<br><br>dos.close<span class="hljs-literal">()</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p>字符串的写入与读出，字符的写入与读出只能使用同一种方法进行操作。</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readUTF</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><br>DataInputStream dos=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DataInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;UTF.txt&quot;</span>));<br><br><span class="hljs-keyword">String</span> s=dos.<span class="hljs-built_in">readUTF</span>();<br>System.out.<span class="hljs-built_in">println</span>(s);<br>dos.<span class="hljs-built_in">close</span>();<br><br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeUTF</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><br>DataOutputStream dos=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DataOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;UTF.txt&quot;</span>));<br><br>dos.<span class="hljs-built_in">writeUTF</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br><br>dos.<span class="hljs-built_in">close</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><p>自定义写入编码类型</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writes</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//自定义编码格式进行写入</span><br><br><br>OutputStreamWriter osw=<span class="hljs-keyword">new</span> <span class="hljs-built_in">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;ttf.txt&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>osw.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br>osw.<span class="hljs-built_in">close</span>();<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="ByteArraayInput-Stream"><a href="#ByteArraayInput-Stream" class="headerlink" title="ByteArraayInput Stream"></a>ByteArraayInput Stream</h3><p>在构造的时候,需要接受数据源，而且数据源是一个字节数组</p><h3 id="ByteArrayOutputStream"><a href="#ByteArrayOutputStream" class="headerlink" title="ByteArrayOutputStream"></a>ByteArrayOutputStream</h3><p>在构造的时候，不用定义数据目的，因为该对象中已经封装了可变长度的字节数组</p><p>这两个流对象都操作的数组，并没有使用系统资源，所以不用进行close</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230106173226353.png" alt="image-20230106173226353"></p><p>源设备</p><p>​    键盘：System.in 硬盘FileStream 内存 ArrayStream </p><p>目的设备：</p><p>​    控制台 System.in 硬盘：FileStream 内存 ArrayStream</p><h3 id="其他包"><a href="#其他包" class="headerlink" title="其他包"></a>其他包</h3><p>操作字符数组</p><p>ByteArrayInputStream ByteArrayOutputStream</p><p>操作字符数组</p><p>CharArrayReader与CharArrayWrite</p><p>操作字符串</p><p>StringReader 与StringWr</p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">readText</span><span class="hljs-params">()</span> throws IOException</span>&#123;<br><br><br><span class="hljs-comment">//文件的读取</span><br><br>InputStreamReader isr=<span class="hljs-keyword">new</span> <span class="hljs-built_in">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;utf.txt&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br><span class="hljs-keyword">char</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">char</span>[<span class="hljs-number">10</span>];<br><br><span class="hljs-keyword">int</span> len=isr.<span class="hljs-built_in">read</span>(buf);<br><span class="hljs-keyword">String</span> str=<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(buf,<span class="hljs-number">0</span>,len);<br><br>System.out.<span class="hljs-built_in">println</span>(str);<br>isr.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">writeText</span><span class="hljs-params">()</span> throws IOException</span><br><span class="hljs-function"></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//文件的写入</span><br><br>OutputStreamWriter osw=<span class="hljs-keyword">new</span> <span class="hljs-built_in">OutputStreamWriter</span> (<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;utf.txt&quot;</span>),<span class="hljs-string">&quot;utf-8&quot;</span>);<br><br>osw.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;你好&quot;</span>);<br><br>osw.<span class="hljs-built_in">close</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="编码与解码"><a href="#编码与解码" class="headerlink" title="编码与解码"></a>编码与解码</h3><p>编码：字符串变成字符数组</p><p>String—&gt; byte[]; str.getBytes()</p><p>解码:字节数组变成字符串</p><p>byte[]—&gt; String :new String(byte[])</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//编码</span><br><br>String s =<span class="hljs-string">&quot;你好&quot;</span>;<br><br>byte<span class="hljs-literal">[]</span> b1=s.get<span class="hljs-constructor">Bytes(<span class="hljs-string">&quot;GBK&quot;</span>)</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">b1</span>)</span>);<br><br><br><br><span class="hljs-comment">//解码</span><br><br>String s1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">b1</span>,<span class="hljs-string">&quot;GBK&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(s1);<br></code></pre></td></tr></table></figure><h3 id="乱码问题的解决"><a href="#乱码问题的解决" class="headerlink" title="乱码问题的解决"></a>乱码问题的解决</h3><p>先将乱码字符进行编码得到对应的编码表，然后再使用对应得解码表进行解码</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//编码</span><br><br>String s =<span class="hljs-string">&quot;你好&quot;</span>;<br><br>byte<span class="hljs-literal">[]</span> b1=s.get<span class="hljs-constructor">Bytes(<span class="hljs-string">&quot;GBK&quot;</span>)</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">b1</span>)</span>);<br><br><span class="hljs-comment">//解码</span><br><br>String s1=<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">b1</span>,<span class="hljs-string">&quot;ISO8859-1&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(s1);<br><br><span class="hljs-comment">//乱码</span><br>byte<span class="hljs-literal">[]</span> b2=s1.get<span class="hljs-constructor">Bytes(<span class="hljs-string">&quot;iso8859-1&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Arrays</span>.</span></span><span class="hljs-keyword">to</span><span class="hljs-constructor">String(<span class="hljs-params">b2</span>)</span>);<br><br>String s2=<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">b2</span>,<span class="hljs-string">&quot;GBK&quot;</span>)</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(s2);<br><br></code></pre></td></tr></table></figure><h3 id="思考题（day128"><a href="#思考题（day128" class="headerlink" title="思考题（day128)"></a>思考题（day128)</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230108115919325.png" alt="image-20230108115919325"></p><h2 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程"></a>网络编程</h2><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230109102450945.png" alt="image-20230109102450945"></p><p>端口范围：0~6535</p><p>系统保留端口：0~1024</p><p>web:80</p><p>tomcat:8080</p><p>mysql:3306</p><h3 id="java获取ip"><a href="#java获取ip" class="headerlink" title="java获取ip"></a>java获取ip</h3><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">//获取本地ip</span><br><span class="hljs-comment">// InetAddress i=InetAddress.getLocalHost();</span><br><span class="hljs-comment">// System.out.println(i.toString());</span><br><br><span class="hljs-comment">// System.out.println(i.getHostName());</span><br><span class="hljs-comment">// System.out.println(i.getHostAddress());</span><br><br><span class="hljs-comment">//获取网络ip</span><br>InetAddress ia=<span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">InetAddress</span>.</span></span>get<span class="hljs-constructor">ByName(<span class="hljs-string">&quot;www.baidu.com&quot;</span>)</span>;<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ia.get<span class="hljs-constructor">HostName()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ia.get<span class="hljs-constructor">HostAddress()</span>);<br><br></code></pre></td></tr></table></figure><h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>将数据及源和目的 分装成数据包，不要需要建立连接</p><p>每个数的大小限制啊在64k内</p><p>因无连接，是不可靠协议</p><p>不需要建立连接，速度快</p><p>案列：聊天，看视频，视频会议，对话机</p><h3 id="TCP"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h3><p>建立连接，形成传输数据的通道</p><p>在连接中进行最大数据量传输</p><p>通过三次握手完成连接，是可靠协议</p><p>必须建立连接，效率比较低</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs">三次握手<br><br>老师：张三在吗？<br><br>张三：我在<br><br>老手：好的，我知道你在了。<br><br>案列：电话<br></code></pre></td></tr></table></figure><h3 id="socket"><a href="#socket" class="headerlink" title="socket"></a>socket</h3><p>socket就是为网络服务提供一种机制</p><p>通信的两端都有Sockt</p><p>网络通信起始就是Soket通信</p><p>数据在两个Soket间进行通信</p><h4 id="发送端的建立"><a href="#发送端的建立" class="headerlink" title="发送端的建立"></a>发送端的建立</h4><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：通过udp传输方式，将一段文字数据发送出去</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">1.建立updsoket服务。</span><br><span class="hljs-comment">2.提供数据，并将数据封装到数据包中</span><br><span class="hljs-comment">3.通过socket服务的发送功能，将数据包发出去</span><br><span class="hljs-comment">4.关闭资源</span><br><span class="hljs-comment">*/</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">udpSend</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//创建udp服务，通过DatagramSokect对象</span><br>DatagramSocket ds=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DatagramSocket</span>(<span class="hljs-number">8888</span>);<br><br><span class="hljs-comment">//提供数据，并封装成数据包</span><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-string">&quot;java udp&quot;</span>.<span class="hljs-built_in">getBytes</span>();<br>DatagramPacket dp=<span class="hljs-keyword">new</span> <span class="hljs-built_in">DatagramPacket</span>(buf,buf.length,InetAddress.<span class="hljs-built_in">getByName</span>(<span class="hljs-string">&quot;192.168.43.215&quot;</span>),<span class="hljs-number">1000</span>);<br><span class="hljs-comment">//通过soket服务，将已有的数据包发出去，通过sent方法</span><br><br>ds.<span class="hljs-built_in">send</span>(dp);<br><br><span class="hljs-comment">//关闭连接</span><br>ds.<span class="hljs-built_in">close</span>();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="接收端的建立"><a href="#接收端的建立" class="headerlink" title="接收端的建立"></a>接收端的建立</h4><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：定义一个应用程序，用于接收udp协议传输的数据并处理</span><br><span class="hljs-comment">定义好udp的接受端</span><br><span class="hljs-comment">思路：</span><br><span class="hljs-comment">1,定义udpsocket服务，通常会监听一个端口，其实就是给这个接受网络应用程序定义数据标识。</span><br><span class="hljs-comment">方便于明确哪些数据过来该应用程序可以处理</span><br><span class="hljs-comment">2.定义一个数据包，因为要存储接受的字节数据</span><br><span class="hljs-comment">因为数据包对象有更多功能可以提取字节数据中的不同数据信息，</span><br><span class="hljs-comment">3.通过socket服务的receive方法将接受到的数据存入已定义好的数据包中</span><br><span class="hljs-comment">4.通过数据包对象的特有功能，将这些不同的数据取出，打印在控制台上</span><br><span class="hljs-comment">5.关闭资源 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">class</span> udpReceive&#123;<br><br>public static void main(String<span class="hljs-literal">[]</span> args) throws Exception<br>&#123;<br><br><span class="hljs-comment">//1.创建 udpsockt,建立端点</span><br>DatagramSocket ds =<span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramSocket(1000)</span>;<br><br><span class="hljs-comment">//2.定义数据包，用于存储数据</span><br>byte<span class="hljs-literal">[]</span> buf =<span class="hljs-keyword">new</span> byte<span class="hljs-literal">[<span class="hljs-number">1024</span>]</span>;<br>DatagramPacket dp=<span class="hljs-keyword">new</span> <span class="hljs-constructor">DatagramPacket(<span class="hljs-params">buf</span>,<span class="hljs-params">buf</span>.<span class="hljs-params">length</span>)</span>;<br><span class="hljs-comment">//3.通过服务的receive方法将收到的数据存入数据包中</span><br>ds.receive(dp);<br><span class="hljs-comment">//4.通过数据包的特有方法取出其中的数据</span><br>String ip=dp.get<span class="hljs-constructor">Address()</span>.get<span class="hljs-constructor">HostAddress()</span>;<br>String data=<span class="hljs-keyword">new</span> <span class="hljs-constructor">String(<span class="hljs-params">dp</span>.<span class="hljs-params">getData</span>()</span>,<span class="hljs-number">0</span>,dp.get<span class="hljs-constructor">Length()</span>);<br><span class="hljs-built_in">int</span> port=dp.get<span class="hljs-constructor">Port()</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(ip+<span class="hljs-string">&quot;::&quot;</span>+data+<span class="hljs-string">&quot;::&quot;</span>+port);<br><span class="hljs-comment">//5.关闭资源</span><br>ds.close<span class="hljs-literal">()</span>;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>注意:发送端封装数据的包中带的ip和端口就是接收端的ip和端口，所以接收端的端口要一致才能处理</p><h4 id="udp键盘录入传输"><a href="#udp键盘录入传输" class="headerlink" title="udp键盘录入传输"></a>udp键盘录入传输</h4><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs processing">class udpSend&#123;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>DatagramSocket ds =<span class="hljs-keyword">new</span> DatagramSocket();<br><span class="hljs-comment">//读取键盘录入</span><br><span class="hljs-keyword">BufferedReader</span> bufr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=bufr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;886&quot;</span>.equals(<span class="hljs-built_in">line</span>))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-built_in">byte</span>[] buf=<span class="hljs-built_in">line</span>.getBytes();<br><span class="hljs-comment">//192.168.13.255广播地址</span><br>DatagramPacket dp=<span class="hljs-keyword">new</span> DatagramPacket(buf,buf.length,InetAddress.getByName(<span class="hljs-string">&quot; 192.168.43.215&quot;</span>),<span class="hljs-number">10003</span>);<br><br>ds.send(dp);<br><br><br>&#125; <br>ds.close();<br><br><br><br>&#125;<br><br><br>&#125;<br><br>class udpReceive&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><br>DatagramSocket ds=<span class="hljs-keyword">new</span> DatagramSocket(<span class="hljs-number">10001</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><br><span class="hljs-built_in">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-built_in">byte</span>[<span class="hljs-number">1024</span>];<br>DatagramPacket dp=<span class="hljs-keyword">new</span> DatagramPacket(buf,buf.length);<br><br>ds.receive(dp);<br><br><span class="hljs-keyword">String</span> ip=dp.getAddress().getHostAddress();<br><span class="hljs-keyword">String</span> data=<span class="hljs-keyword">new</span> <span class="hljs-keyword">String</span>(dp.getData(),<span class="hljs-number">0</span>,dp.getLength());<br><br>System.out.<span class="hljs-built_in">println</span>(ip+<span class="hljs-string">&quot;::&quot;</span>+data);<br><br>&#125;<br><br><br><br><br><br>&#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="udp聊天"><a href="#udp聊天" class="headerlink" title="udp聊天"></a>udp聊天</h3><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">聊天程序：使得既可以发送数据，也可以接受数据</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">这两部分需要同时执行，那就需要用到多线程技术，一个是线程控制收，一个线程控制</span><br><span class="hljs-comment">发，因为这两个线程是不一致的，所以要定义两个run方法，而且这两个方法要封装到不同的</span><br><span class="hljs-comment">类中</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Send</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Runnable</span></span></span>&#123;<br><span class="hljs-keyword">private</span> DatagramSocket ds;<br><br><br><span class="hljs-keyword">public</span> Send(DatagramSocket ds)&#123;<br><br><span class="hljs-built_in">this</span>.ds=ds;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> void run()&#123;<br><span class="hljs-keyword">try</span>&#123;<br>BufferedReader bufr=<span class="hljs-keyword">new</span> <span class="hljs-type">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">InputStreamReader</span>(System.<span class="hljs-keyword">in</span>));<br><span class="hljs-keyword">String</span> line=<span class="hljs-literal">null</span>;<br><span class="hljs-keyword">while</span>((line=bufr.readLine())!=<span class="hljs-literal">null</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;886&quot;</span>.equals(line))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>byte[] buf=line.getBytes();<br><br>DatagramPacket dp=<span class="hljs-keyword">new</span> <span class="hljs-type">DatagramPacket</span>(buf,buf.length,InetAddress.getByName(<span class="hljs-string">&quot; 192.168.43.215&quot;</span>),<span class="hljs-number">10003</span>);<br><br>ds.send(dp);<br><br>&#125;<br><br><br><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">RuntimeException</span>(<span class="hljs-string">&quot;发送端异常&quot;</span>);<br><br><br>&#125;<br><br>&#125;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Receive</span> <span class="hljs-keyword"><span class="hljs-keyword">implements</span> <span class="hljs-type">Runnable</span></span></span>&#123;<br><span class="hljs-keyword">private</span> DatagramSocket ds;<br><br><br><span class="hljs-keyword">public</span> Receive(DatagramSocket ds)&#123;<br><br><span class="hljs-built_in">this</span>.ds=ds;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> void run()&#123;<br><span class="hljs-keyword">try</span>&#123;<br><br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br><br><br>byte[] buf=<span class="hljs-keyword">new</span> <span class="hljs-type">byte</span>[<span class="hljs-number">1024</span>];<br><br>DatagramPacket dp=<span class="hljs-keyword">new</span> <span class="hljs-type">DatagramPacket</span>(buf,buf.length);<br><br>ds.receive(dp);<br><span class="hljs-keyword">String</span> ip=dp.getAddress().getHostName();<br><span class="hljs-keyword">String</span> data=<span class="hljs-keyword">new</span> <span class="hljs-type">String</span>(dp.getData(),<span class="hljs-number">0</span>,dp.getLength());<br>System.out.println(ip+<span class="hljs-string">&quot;::&quot;</span>+data);<br>&#125;<br><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-type">RuntimeException</span>(<span class="hljs-string">&quot;接收端异常&quot;</span>);<br><br><br>&#125;<br>&#125;<br>&#125;<br><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">chat</span></span>&#123;<br><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void main(<span class="hljs-keyword">String</span>[] args) throws Exception<br>&#123;<br>DatagramSocket sendsoket=<span class="hljs-keyword">new</span> <span class="hljs-type">DatagramSocket</span>();<br>DatagramSocket receivesoket=<span class="hljs-keyword">new</span> <span class="hljs-type">DatagramSocket</span>(<span class="hljs-number">10003</span>);<br><br><span class="hljs-keyword">new</span> <span class="hljs-type">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Send</span>(sendsoket)).start();<br><span class="hljs-keyword">new</span> <span class="hljs-type">Thread</span>(<span class="hljs-keyword">new</span> <span class="hljs-type">Receive</span>(receivesoket)).start();<br><br><br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="tcp连接"><a href="#tcp连接" class="headerlink" title="tcp连接"></a>tcp连接</h3><p>Socket和ServerSocket</p><p>建立客户端和服务端</p><p>建立连接后，通过Socket终得IO流进行数据传输</p><p>关闭soket，</p><p>同样，客服端和服务端是独立的应用程序</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><code class="hljs arduino">tcp传输演示<br><br><span class="hljs-number">1.</span>tcp分为客户端和服务端<br><span class="hljs-number">2.</span>客户端对应的对象是soket<br>服务端对应的对象是ServerSockrt<br><br><br>多个客户端向服务端发送数据时，不会产生冲突的原因是服务端接受到客户端的请求<br>并建立对应的对象。<br>*/ <br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.创建soket服务，并指定要连接的主机和端口</span><br><span class="hljs-comment">2.创建输出流</span><br><span class="hljs-comment">3.往流里面写数据</span><br><span class="hljs-comment">4.关闭socket</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tcpclient</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//创建客户端的soket服务，指定目的主机和端口</span><br>Socket s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Socket</span>(<span class="hljs-string">&quot;192.168.1.14&quot;</span>,<span class="hljs-number">10002</span>);<br><br><span class="hljs-comment">//为了发送数据，应该获取soket流终 的输出流</span><br>OutputStream out =s.<span class="hljs-built_in">getOutputStream</span>();<br><br>out.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;tcp gemen lai le &quot;</span>.<span class="hljs-built_in">getBytes</span>());<br><br>s.<span class="hljs-built_in">close</span>();<br><br><br><br>&#125;<br><br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">需求：定义端点接受数据并打印在控制台上</span><br><span class="hljs-comment">1.建立s服务端的socket服务，serversockt()</span><br><span class="hljs-comment">并监听一个端口</span><br><span class="hljs-comment">2.获取连接过来的客户端对象</span><br><span class="hljs-comment"> 通过ServerSockt的accept方法，没有建立连接就会等所以这个方法是阻塞式的</span><br><span class="hljs-comment"> 3.客户端如果发过来的数据，那么服务端要使用对应的客户端对象，并获取客户端对象的读取流来读取</span><br><span class="hljs-comment"> 发过来的的数据，并打印在控制台上</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4.关闭服务器（可选），因为不是说有的服务器都需要关闭</span><br><span class="hljs-comment">*/</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tcpServer</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//建立服务端Socket服务，并监听一个端口，</span><br>ServerSocket ss=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ServerSocket</span>(<span class="hljs-number">10002</span>);<br><br><br><span class="hljs-comment">//通过accept方法获取连接过来的客服端对象</span><br><br>Socket s=ss.<span class="hljs-built_in">accept</span>();<br><br>System.out.<span class="hljs-built_in">println</span>(s.<span class="hljs-built_in">getInetAddress</span>().<span class="hljs-built_in">getHostAddress</span>());<br><br><span class="hljs-comment">//获取客服端发过来的数据，那么使用客户端对象的读取流对象来读取数据</span><br>InputStream in =s.<span class="hljs-built_in">getInputStream</span>();<br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> len=in. <span class="hljs-built_in">read</span>(buf);<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(buf,<span class="hljs-number">0</span>,len));<br><br>s.<span class="hljs-built_in">close</span>();<br>ss.<span class="hljs-built_in">close</span>();<br><br>&#125;<br><br><br>&#125;<br><br><br><br></code></pre></td></tr></table></figure><h3 id="tcp反馈"><a href="#tcp反馈" class="headerlink" title="tcp反馈"></a>tcp反馈</h3><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-comment">/*</span><br><span class="hljs-comment">演示tcp的传输的客户端与服务端互访问</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求：客户端给服务端发送给数据，服务端收到后，给客户端反馈信息</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">客户端：</span><br><span class="hljs-comment">步骤：</span><br><span class="hljs-comment">1.获取socket服务，指定要连接的主机和端口</span><br><span class="hljs-comment">2.获取socket流终的输出流，将数据写入到该流终，通过网络发送给服务端</span><br><span class="hljs-comment">3.获取socket流中的输入流，将服务端反馈的数据获取到并打印</span><br><span class="hljs-comment">4.关闭客户端资源</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tcpClient2</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//建立socket对象</span><br>Socket s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Socket</span>(<span class="hljs-string">&quot;192.168.1.14&quot;</span>,<span class="hljs-number">10003</span>);<br><br><br><span class="hljs-comment">//建立输出流</span><br>OutputStream out=s.<span class="hljs-built_in">getOutputStream</span>();<br>out.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;你好&quot;</span>.<span class="hljs-built_in">getBytes</span>());<br><br><span class="hljs-comment">//建立输入流，用于接受服务端接受到的反馈信息</span><br><br>InputStream in=s.<span class="hljs-built_in">getInputStream</span>();<br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=in.<span class="hljs-built_in">read</span>(buf);<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(buf,<span class="hljs-number">0</span>,len));<br><br><span class="hljs-comment">//关闭客服端</span><br>s.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">tcpServer2</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//建立socket服务</span><br>ServerSocket ss=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ServerSocket</span>(<span class="hljs-number">10003</span>);<br><br><span class="hljs-comment">//接收客户端对象</span><br>Socket s=ss.<span class="hljs-built_in">accept</span>();<br><br><span class="hljs-comment">//建立读取流</span><br>InputStream in=s.<span class="hljs-built_in">getInputStream</span>();<br><br><span class="hljs-comment">//获取ip</span><br><br><span class="hljs-keyword">String</span> ip=s.<span class="hljs-built_in">getInetAddress</span>().<span class="hljs-built_in">getHostAddress</span>();<br>System.out.<span class="hljs-built_in">println</span>(ip+<span class="hljs-string">&quot;conect......&quot;</span>);<br><br><span class="hljs-comment">//建立缓冲区，读取流数据</span><br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=in.<span class="hljs-built_in">read</span>(buf);<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(buf,<span class="hljs-number">0</span>,len));<br><br><span class="hljs-comment">//服务端反馈信息</span><br>OutputStream out=s.<span class="hljs-built_in">getOutputStream</span>();<br>out.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;收到信息&quot;</span>.<span class="hljs-built_in">getBytes</span>());<br><br><span class="hljs-comment">//关闭服务</span><br><br>s.<span class="hljs-built_in">close</span>();<br>ss.<span class="hljs-built_in">close</span>();<br><br><br>&#125;<br><br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="tcp字母大写"><a href="#tcp字母大写" class="headerlink" title="tcp字母大写"></a>tcp字母大写</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">需求：建立一个文本转换服务器</span><br><span class="hljs-comment">客户端给服务端发送文本，服务端将文本数据转成大写后返回给客户端</span><br><span class="hljs-comment">而且客户端可以不断的进行文本转换服务，直到客户端输入over时间，转换结束</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">分析：</span><br><span class="hljs-comment">客户端：</span><br><span class="hljs-comment">既然是操作设备上的数据，那么就可以使用io技术,并按照io的操作规律来思考</span><br><span class="hljs-comment">源：键盘录入</span><br><span class="hljs-comment">目的：网络设备，网络输出流</span><br><span class="hljs-comment">而且不断操作的是文本数据，可以选择字符流</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">步奏：</span><br><span class="hljs-comment">1.建立socket服务</span><br><span class="hljs-comment">2.获取键盘录入</span><br><span class="hljs-comment">3.将数据发送给服务端</span><br><span class="hljs-comment">4.接受服务端返回的大写数据</span><br><span class="hljs-comment">5.结束，关闭资源</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">都是文本数据，可以 使用字符流进行操作，同时提高效率，加入缓冲区</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br>class tcpClient3&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args)  <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><br><br><br><span class="hljs-comment">//建立socket服务 </span><br>Socket s=<span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10003</span>);<br><br><br><span class="hljs-comment">//进行键盘录入</span><br><span class="hljs-keyword">BufferedReader</span> bufr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> InputStreamReader(System.in));<br><br><br><span class="hljs-comment">//写入数据并发送数据给服务端</span><br>BufferedWriter bufw=<span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(s.getOutputStream()));<br><br><span class="hljs-comment">//接受服务端发送的数据</span><br><span class="hljs-keyword">BufferedReader</span> bufIn=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> InputStreamReader(s.getInputStream()));<br><br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><br><br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=bufr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;over&quot;</span>.equals(<span class="hljs-built_in">line</span>))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>bufw.write(<span class="hljs-built_in">line</span>);<br>bufw.newLine();<br>bufw.flush();<br><span class="hljs-comment">//读取收到的数据</span><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>=bufIn.readLine();<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;server: &quot;</span>+<span class="hljs-built_in">str</span>);<br><br><br>&#125;<br><span class="hljs-comment">//关闭键盘读取流和socket服务</span><br><br>bufr.close();<br>s.close();<br><br><br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">服务端：socket接受流</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">目的：socket输出流</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br>class tcpServer3&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><span class="hljs-comment">//建立服务端的socket对象</span><br>ServerSocket ss=<span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10003</span>);<br><br><span class="hljs-comment">//接受客户端发送的数据</span><br><br>Socket s=ss.accept();<br><br><br><span class="hljs-comment">//将接受到的数据进行处理，为提高效率需要建立流对象</span><br><br><span class="hljs-keyword">BufferedReader</span> bufr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> InputStreamReader(s.getInputStream()));<br><br><br><span class="hljs-comment">//目的：sockt输出流，将大写数据写入到socket,并发送给客户端</span><br><br>BufferedWriter bufw=<span class="hljs-keyword">new</span> BufferedWriter(<span class="hljs-keyword">new</span> OutputStreamWriter(s.getOutputStream()));<br><br><span class="hljs-comment">//获取ip</span><br>System.out.<span class="hljs-built_in">println</span>(s.getInetAddress().getHostAddress()+<span class="hljs-string">&quot;...connect&quot;</span>);<br><br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=bufr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">line</span>);<br><br>bufw.write(<span class="hljs-built_in">line</span>.toUpperCase());<br>bufw.newLine();<br>bufw.flush();<br><br>&#125;<br>s.close();<br>ss.close();<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="tcp文件复制"><a href="#tcp文件复制" class="headerlink" title="tcp文件复制"></a>tcp文件复制</h3><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><code class="hljs processing"><br><span class="hljs-comment">/*使用tcp进行文件复制*/</span><br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br>class tcpClient&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><br><span class="hljs-comment">//建立端口</span><br>Socket s=<span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10005</span>);<br><br><span class="hljs-comment">//读取文件</span><br><span class="hljs-keyword">BufferedReader</span> bufr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> FileReader(<span class="hljs-string">&quot;D:/Desktop/code/Dos/day67/tcp.java&quot;</span>));<br><br><span class="hljs-comment">//发送数据</span><br>PrintWriter out=<span class="hljs-keyword">new</span> PrintWriter(s.getOutputStream(),<span class="hljs-keyword">true</span>);<br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=bufr.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><br>out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">line</span>);<br>&#125;<br><br><span class="hljs-comment">//设置结束标记</span><br><span class="hljs-comment">// out.println(&quot;over&quot;);</span><br>s.shutdownOutput();<span class="hljs-comment">//关闭客户端的输出流，相等于给流中加入一个结束标记</span><br><br><span class="hljs-comment">//接送服务端反馈的数据</span><br><span class="hljs-keyword">BufferedReader</span> bufIn=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> InputStreamReader(s.getInputStream()));<br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">str</span>=bufIn.readLine();<br><br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">str</span>);<br><br>bufr.close();<br>s.close();<br><br>&#125;<br><br>&#125;<br><br>class tcpServer&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><br><span class="hljs-comment">//建立服务端接口</span><br>ServerSocket ss=<span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10005</span>);<br><br><span class="hljs-comment">//接受数据</span><br>Socket s=ss.accept();<br><br><span class="hljs-comment">//打印接收端的ip</span><br><span class="hljs-keyword">String</span> ip=s.getInetAddress().getHostAddress();<br>System.out.<span class="hljs-built_in">println</span>(ip+<span class="hljs-string">&quot;.....connect&quot;</span>);<br><br><span class="hljs-comment">//处理接受到的数据</span><br><span class="hljs-keyword">BufferedReader</span> bufIn=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> InputStreamReader(s.getInputStream()));<br><br><span class="hljs-comment">//将收到的数据保存</span><br>PrintWriter out=<span class="hljs-keyword">new</span> PrintWriter(<span class="hljs-keyword">new</span> FileWriter(<span class="hljs-string">&quot;server.txt&quot;</span>),<span class="hljs-keyword">true</span>);<br><br><br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=bufIn.readLine())!=<span class="hljs-keyword">null</span>)&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">line</span>.equals(<span class="hljs-string">&quot;over&quot;</span>))&#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">line</span>);<br>&#125;<br><br><span class="hljs-comment">//发送反馈数据</span><br>PrintWriter pw=<span class="hljs-keyword">new</span> PrintWriter(s.getOutputStream(),<span class="hljs-keyword">true</span>);<br>pw.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;上传成功&quot;</span>);<br><br>out.close();<br>s.close();<br>ss.close();<br><br><br><br>&#125;<br><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="tcp图片复制"><a href="#tcp图片复制" class="headerlink" title="tcp图片复制"></a>tcp图片复制</h3><p>客户端：</p><p>1.服务端点</p><p>2.读取客户端已有的图片数据</p><p>3.通过socket输出流将数据发送给服务端</p><p>4.读取服务端的反馈信息</p><p>5.关闭连接</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><br><span class="hljs-comment">/*使用tcp进行文件复制*/</span><br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">picClient</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//建立客户端</span><br>Socket s=<span class="hljs-keyword">new</span> <span class="hljs-built_in">Socket</span>(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10006</span>);<br><br><span class="hljs-comment">//读取图片文件</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileInputStream</span>(<span class="hljs-string">&quot;D:/Download/黑客.jpg&quot;</span>);<br><br><span class="hljs-comment">//发送文件</span><br>OutputStream out=s.<span class="hljs-built_in">getOutputStream</span>();<br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((len=fis.<span class="hljs-built_in">read</span>(buf))!=<span class="hljs-number">-1</span>)&#123;<br>out.<span class="hljs-built_in">write</span>(buf,<span class="hljs-number">0</span>,len);<br>&#125;<br><span class="hljs-comment">//结束标记</span><br>s.<span class="hljs-built_in">shutdownOutput</span>();<br><br><span class="hljs-comment">//接受服务端的反馈</span><br>InputStream in=s.<span class="hljs-built_in">getInputStream</span>();<br><span class="hljs-keyword">byte</span>[] bufIn=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> num=in.<span class="hljs-built_in">read</span>(bufIn);<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in"><span class="hljs-keyword">String</span></span>(bufIn,<span class="hljs-number">0</span>,num));<br><br><span class="hljs-comment">//关闭</span><br>fis.<span class="hljs-built_in">close</span>();<br>s.<span class="hljs-built_in">close</span>();<br><br><br>&#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">服务端</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span> <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">picServer</span>&#123;</span><br><br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">String</span>[] args)</span> throws Exception</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//建立服务端端口</span><br>ServerSocket ss=<span class="hljs-keyword">new</span> <span class="hljs-built_in">ServerSocket</span>(<span class="hljs-number">10006</span>);<br><br><span class="hljs-comment">//接受客户端请求</span><br>Socket s=ss.<span class="hljs-built_in">accept</span>();<br><br><span class="hljs-comment">//接受数据</span><br>InputStream in=s.<span class="hljs-built_in">getInputStream</span>();<br><br><span class="hljs-comment">//打印接收端的ip</span><br><span class="hljs-keyword">String</span> ip=s.<span class="hljs-built_in">getInetAddress</span>().<span class="hljs-built_in">getHostAddress</span>();<br>System.out.<span class="hljs-built_in">println</span>(ip+<span class="hljs-string">&quot;.....connect&quot;</span>);<br><br><br><span class="hljs-comment">//处理接收到的数据</span><br>FileOutputStream fos=<span class="hljs-keyword">new</span> <span class="hljs-built_in">FileOutputStream</span>(<span class="hljs-string">&quot;copy.jpg&quot;</span>);<br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((len=in.<span class="hljs-built_in">read</span>(buf))!=<span class="hljs-number">-1</span>)&#123;<br>fos.<span class="hljs-built_in">write</span>(buf,<span class="hljs-number">0</span>,len);<br><br><br>&#125;<br><span class="hljs-comment">//发送反馈数据</span><br>OutputStream out=s.<span class="hljs-built_in">getOutputStream</span>();<br><br>out.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;上传成功&quot;</span>.<span class="hljs-built_in">getBytes</span>());<br><br><span class="hljs-comment">//关闭资源</span><br><br>fos.<span class="hljs-built_in">close</span>();<br>s.<span class="hljs-built_in">close</span>();<br>ss.<span class="hljs-built_in">close</span>();<br><br><br><br><br><br>&#125;<br><br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="多线程服务端模拟"><a href="#多线程服务端模拟" class="headerlink" title="多线程服务端模拟"></a>多线程服务端模拟</h3><p>服务端使用的都是多线程处理，因为有都客户端都在上传 数据</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><code class="hljs gradle"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br><br><span class="hljs-keyword">class</span> client&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><br><span class="hljs-comment">//判断文件的格式与内容是否符合规范</span><br><span class="hljs-keyword">if</span>(args.length!=<span class="hljs-number">1</span>)&#123;<br><br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;请选择一个jpg格式的图片&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(args[<span class="hljs-number">0</span>]);<br><span class="hljs-keyword">if</span>(!(<span class="hljs-keyword">file</span>.exists()&amp;&amp;<span class="hljs-keyword">file</span>.isFile()))&#123;<br><br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;文件不存在&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(!<span class="hljs-keyword">file</span>.getName().endsWith(<span class="hljs-string">&quot;.jpg&quot;</span>))&#123;<br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;文件格式错误&quot;</span>);<br><span class="hljs-keyword">return</span>;<br><br>&#125;<br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">file</span>.length()&gt;<span class="hljs-number">1024</span>*<span class="hljs-number">1024</span>*<span class="hljs-number">100</span>)&#123;<br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-string">&quot;文件过大，请重新上传&quot;</span>);<br><span class="hljs-keyword">return</span>;<br><br>&#125;<br><br><span class="hljs-comment">//建立连接</span><br>Socket s=<span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;127.0.0.1&quot;</span>,<span class="hljs-number">10004</span>);<br><br><span class="hljs-comment">//上传文件</span><br>FileInputStream fis=<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-keyword">file</span>);<br><br>OutputStream out=s.getOutputStream();<br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((len=fis.<span class="hljs-keyword">read</span>(buf))!=-<span class="hljs-number">1</span>)&#123;<br>out.<span class="hljs-keyword">write</span>(buf,<span class="hljs-number">0</span>,len);<br>&#125;<br><br><span class="hljs-comment">//结束标记</span><br>s.shutdownOutput();<br><br><br>InputStream in=s.getInputStream();<br><br><span class="hljs-comment">//读取反馈</span><br><br><span class="hljs-keyword">byte</span>[] bufIn=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">int</span> num=in.<span class="hljs-keyword">read</span>(bufIn);<br><br>System.out.<span class="hljs-keyword">println</span>(<span class="hljs-keyword">new</span> String(bufIn,<span class="hljs-number">0</span>,num));<br><br>fis.close();<br><br><br><br>&#125;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">服务端：</span><br><span class="hljs-comment">这个服务端有个局限性，当A客户端连接上以后，该服务端获取到，服务端执行的具体流程</span><br><span class="hljs-comment">这时B客户端连接，只有等待</span><br><span class="hljs-comment">因为服务端还没有处理完A客服端的请求，还没有循环回来执行下次的accept方法，所以暂时获取不到b</span><br><span class="hljs-comment">的客户端对象</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">解决方法：</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">那么为了可以让多用户同时发送数据到服务端</span><br><span class="hljs-comment">那么服务端最好就是将每个客户端封装到一个单独的线程中，这样就可以同时处理多个客户端的请求了</span><br><span class="hljs-comment"> </span><br><span class="hljs-comment">如何让定义多线程？</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">只需要明确灭个客户端要在服务端执行的代码即可，将该代码存入run方法中</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> picthread <span class="hljs-keyword">implements</span> Runnable&#123;<br><br><br><span class="hljs-keyword">private</span> Socket s;<br>picthread(Socket s)&#123;<br><br><span class="hljs-keyword">this</span>.s=s;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> run()&#123;<br><br><span class="hljs-keyword">int</span> <span class="hljs-keyword">count</span>=<span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">try</span>&#123;<br><br><br><span class="hljs-comment">//获取ip</span><br>String ip=s.getInetAddress().getHostAddress();<br>System.out.<span class="hljs-keyword">println</span>(ip+<span class="hljs-string">&quot;...connect&quot;</span>);<br><br><span class="hljs-comment">//读取接收到的数据</span><br>InputStream in=s.getInputStream();<br><br><span class="hljs-comment">//写入接受到的数据</span><br><span class="hljs-keyword">File</span> <span class="hljs-keyword">file</span>=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(ip+<span class="hljs-string">&quot;(&quot;</span>+<span class="hljs-keyword">count</span>+<span class="hljs-string">&quot;)&quot;</span>+<span class="hljs-string">&quot;.jpg&quot;</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">file</span>.exists())&#123;<br><span class="hljs-keyword">file</span>=<span class="hljs-keyword">new</span> <span class="hljs-keyword">File</span>(ip+<span class="hljs-string">&quot;(&quot;</span>+(<span class="hljs-keyword">count</span>++)+<span class="hljs-string">&quot;)&quot;</span>+<span class="hljs-string">&quot;.jpg&quot;</span>);<br>&#125;<br><br>FileOutputStream fos=<span class="hljs-keyword">new</span> FileOutputStream(<span class="hljs-keyword">file</span>);<br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=<span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">while</span>((len=in.<span class="hljs-keyword">read</span>(buf))!=-<span class="hljs-number">1</span>)&#123;<br><br>fos.<span class="hljs-keyword">write</span>(buf,<span class="hljs-number">0</span>,len);<br>&#125;<br><br><span class="hljs-comment">//发送反馈数据</span><br><br>OutputStream out=s.getOutputStream();<br><br>out.<span class="hljs-keyword">write</span>(<span class="hljs-string">&quot;上传成功&quot;</span>.getBytes());<br><br><span class="hljs-comment">//关闭</span><br><br>fos.close();<br>s.close();<br><br><br><br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(<span class="hljs-string">&quot;上传失败&quot;</span>);<br><br><br><br><br><br>&#125;<br><br>&#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> server&#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(String[] args) <span class="hljs-keyword">throws</span> Exception<br>&#123;<br>ServerSocket ss=<span class="hljs-keyword">new</span> ServerSocket(<span class="hljs-number">10004</span>);<br><span class="hljs-keyword">while</span>(<span class="hljs-keyword">true</span>)&#123;<br><br>Socket s=ss.accept();<br><br><span class="hljs-keyword">new</span> Thread(<span class="hljs-keyword">new</span> picthread(s)).start();<br>&#125;<br><br><br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><h3 id="用户登陆模拟"><a href="#用户登陆模拟" class="headerlink" title="用户登陆模拟"></a>用户登陆模拟</h3><p><a href="https://www.bilibili.com/video/BV1ZA4y1Z7AG?p=155&vd_source=04ee8679a51f11647c963b5a6f8717e9">Java基础视频教程第24天-03-网络编程(TCP-客户端并发登录)_哔哩哔哩_bilibili</a></p><p>需求：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs">客户端通过键盘输入用户名字<br>服务端对个用户名进行校验如果该用户存在，在服务端显示xxx，已登陆<br>并在客户端显示xxx，欢迎光临<br><br>如果该用不存在就在服务端显示xxx，尝试校验，并在客户端显示xxx该用户不存在<br><br></code></pre></td></tr></table></figure><h3 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h3><p>启动</p><p>start</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230117104912859.png" alt="image-20230117104912859"></p><p>访问tocat服务器</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230117104825957.png" alt="image-20230117104825957"></p><p>浏览器向服务器发送的信息</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230117111523362.png" alt="image-20230117111523362"></p><p>模拟浏览器</p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.net.*;<br>class myIE&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> main(<span class="hljs-keyword">String</span>[] args) <span class="hljs-keyword">throws</span> Exception<br>&#123;<br><br>Socket s=<span class="hljs-keyword">new</span> Socket(<span class="hljs-string">&quot;192.168.1.8&quot;</span>,<span class="hljs-number">8080</span>);<br><br>PrintWriter out=<span class="hljs-keyword">new</span> PrintWriter(s.getOutputStream(),<span class="hljs-keyword">true</span>);<br><br>out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;GET /myweb/demo.html HTTP/1.1&quot;</span>);<br>out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Accept: */*&quot;</span>);<br>out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Accept-Language: zh-cn&quot;</span>);<br>out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Host: 192.168.1.8:10000&quot;</span>);<br>out.<span class="hljs-built_in">println</span>(<span class="hljs-string">&quot;Connection: Keep-Alive&quot;</span>);<br><br>out.<span class="hljs-built_in">println</span>();<br>out.<span class="hljs-built_in">println</span>();<br><br><span class="hljs-comment">//接受反馈信息</span><br><br><span class="hljs-keyword">BufferedReader</span> bufr=<span class="hljs-keyword">new</span> <span class="hljs-keyword">BufferedReader</span>(<span class="hljs-keyword">new</span> InputStreamReader(s.getInputStream()));<br><span class="hljs-keyword">String</span> <span class="hljs-built_in">line</span>=<span class="hljs-keyword">null</span>;<br><span class="hljs-keyword">while</span>((<span class="hljs-built_in">line</span>=bufr.readLine())!=<span class="hljs-keyword">null</span>);<br>&#123;<br>System.out.<span class="hljs-built_in">println</span>(<span class="hljs-built_in">line</span>);<br>&#125;<br><br>s.close();<br><br>&#125;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="URL对象"><a href="#URL对象" class="headerlink" title="URL对象"></a>URL对象</h3><p>获取此URL的文件名</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">String</span> <span class="hljs-title">getFile</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><p>获取此时url的主机名</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">getHost</span>()</span><br></code></pre></td></tr></table></figure><p>获取此URL的路径名称</p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss"><span class="hljs-keyword">String</span> <span class="hljs-built_in">getPath</span>()<br></code></pre></td></tr></table></figure><p>获取此url的端口号</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">int</span> <span class="hljs-function"><span class="hljs-title">getPort</span>()</span><br></code></pre></td></tr></table></figure><p>获取此URL的协议名称</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">getProtocol</span>()</span><br></code></pre></td></tr></table></figure><p>获取此URL的查询部</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"><span class="hljs-variable">String</span> <span class="hljs-function"><span class="hljs-title">getQuery</span>()</span><br></code></pre></td></tr></table></figure><p>例子</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs reasonml"><br>import java.net.*;<br><br><span class="hljs-keyword">class</span> urldemo&#123;<br>public static void main(String<span class="hljs-literal">[]</span> args) throws MalformedURLException<br>&#123;<br>URL url=<span class="hljs-keyword">new</span> <span class="hljs-constructor">URL(<span class="hljs-string">&quot;http://192.168.1.13:8080/myweb/demo.html?name=fox&quot;</span>)</span>;<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getProtocol&quot;</span>+url.get<span class="hljs-constructor">Protocol()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getHost:&quot;</span>+url.get<span class="hljs-constructor">Host()</span>);<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getPort:&quot;</span>+url.get<span class="hljs-constructor">Port()</span>);<br><br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getFile:&quot;</span>+url.get<span class="hljs-constructor">File()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getPath:&quot;</span>+url.get<span class="hljs-constructor">Path()</span>);<br><span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">System</span>.</span></span>out.println(<span class="hljs-string">&quot;getQuery:&quot;</span>+url.get<span class="hljs-constructor">Query()</span>);<br><br>&#125;<br><br>&#125;<br><br><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230118115523652.png" alt="image-20230118115523652"></p><p>通过url对象连接主机</p><p>URLconnection</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-keyword">import</span> java.net.*;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">urldemo</span></span>&#123;<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception</span><br><span class="hljs-function"></span>&#123;<br>URL url=<span class="hljs-keyword">new</span> URL(<span class="hljs-string">&quot;http://127.0.0.1:8080/myweb/demo.html&quot;</span>);<br><br>URLConnection conn=url.openConnection();<br><br>System.out.println(conn);<br><br><span class="hljs-comment">//获取网页数据</span><br>InputStream in= conn.getInputStream();<br><br><span class="hljs-keyword">byte</span>[] buf=<span class="hljs-keyword">new</span> <span class="hljs-keyword">byte</span>[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">int</span> len=in.read(buf);<br>System.out.println(<span class="hljs-keyword">new</span> String(buf,<span class="hljs-number">0</span>,len));<br><br><br><br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="socketaddress"><a href="#socketaddress" class="headerlink" title="socketaddress"></a>socketaddress</h4><p>封装了ip地址和端口号</p><h4 id="backlog"><a href="#backlog" class="headerlink" title="backlog"></a>backlog</h4><p>同时在线客户端人数</p><h3 id="域名解析"><a href="#域名解析" class="headerlink" title="域名解析"></a>域名解析</h3><p>先本地解析，没有找到就去中央dns服务器进行解析</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230118122729971.png" alt="image-20230118122729971"></p><p>屏蔽恶意软件</p><p>C:\Windows\System32\drivers\etc</p>]]></content>
    
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>统计学图表制作</title>
    <link href="/2022/03/13/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%9B%BE%E8%A1%A8%E5%88%B6%E4%BD%9C/"/>
    <url>/2022/03/13/%E7%BB%9F%E8%AE%A1%E5%AD%A6%E5%9B%BE%E8%A1%A8%E5%88%B6%E4%BD%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="excel制作帕累托图"><a href="#excel制作帕累托图" class="headerlink" title="excel制作帕累托图"></a>excel制作帕累托图</h1><h3 id="第一步：将图表数据输入到excel中"><a href="#第一步：将图表数据输入到excel中" class="headerlink" title="第一步：将图表数据输入到excel中"></a>第一步：将图表数据输入到excel中</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220313103756.png"></p><h3 id="第二步-：将数据按照数目排降序"><a href="#第二步-：将数据按照数目排降序" class="headerlink" title="第二步 ：将数据按照数目排降序"></a>第二步 ：将数据按照数目排降序</h3><p>选中表的所有数据，然后右键，找到排序，然后是自定义排序，点击在自定义排序，选择关键字为数目，次序为降序，然后点击确实<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220313104318.png"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220313104524.png"></p><hr><h3 id="第三步-计算累计频次"><a href="#第三步-计算累计频次" class="headerlink" title="第三步 计算累计频次"></a>第三步 计算累计频次</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220313104821.png"></p><p>注意：按照公式计算完前两行后，下拉即可计算余下的行</p><h3 id="第四步：画折线图"><a href="#第四步：画折线图" class="headerlink" title="第四步：画折线图"></a>第四步：画折线图</h3><p>选择所有数据，点击右下角的图标的小图标，选择图表，然后选择更多图表，找到折现图，然后点击确定<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220313105124.png"><br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220313105159.png"></p><h3 id="第五步：更改系类图表类型"><a href="#第五步：更改系类图表类型" class="headerlink" title="第五步：更改系类图表类型"></a>第五步：更改系类图表类型</h3><p>选择数目的那根折线，然后右键选择更改系列图表类型，将数目的图表类型选择为簇状柱形图，将累计数目勾选为次坐标轴<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220313105842.png"></p><p>点击确定即可完成</p>]]></content>
    
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>痞老板的摄影博客</title>
    <link href="/2022/03/11/%E7%97%9E%E8%80%81%E6%9D%BF%E7%9A%84%E6%91%84%E5%BD%B1%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/03/11/%E7%97%9E%E8%80%81%E6%9D%BF%E7%9A%84%E6%91%84%E5%BD%B1%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="摄影博客地址"><a href="#摄影博客地址" class="headerlink" title="摄影博客地址"></a>摄影博客地址</h2><p><a href="https://gbs-enjoy-life.mysxl.cn/">https://gbs-enjoy-life.mysxl.cn/</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>摄影</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTML+CSS+JS</title>
    <link href="/2022/03/10/HTML+Css+Javascript/"/>
    <url>/2022/03/10/HTML+Css+Javascript/</url>
    
    <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="HTML页面的基本结构"><a href="#HTML页面的基本结构" class="headerlink" title="HTML页面的基本结构"></a>HTML页面的基本结构</h2><pre><code class="hljs">&lt;html&gt;//整个页面&lt;head&gt; &lt;/head&gt; //页面头部&lt;body&gt; &lt;/body&gt; //内容主体&lt;/html&gt;</code></pre><h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>html快速入门<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>乾坤未定，你我皆是黑马<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h2 id="html语法特点"><a href="#html语法特点" class="headerlink" title="html语法特点"></a>html语法特点</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">HTML</span> 文件以<span class="hljs-selector-class">.htm</span>或<span class="hljs-selector-class">.html</span>为扩展名<br><span class="hljs-selector-tag">HTML</span> 结构标签<br><span class="hljs-selector-tag">HTML</span> 标签不区分大小写<br>如上案例中的 <span class="hljs-attribute">font</span> 写成 <span class="hljs-attribute">Font</span> 也是一样可以展示出对应的效果的。<br><span class="hljs-selector-tag">HTML</span> 标签属性值 单双引皆可<br>如上案例中的<span class="hljs-attribute">color</span>属性值使用双引号也是可以的。<br><span class="hljs-selector-tag">HTML</span> 语法松散<br>比如 <span class="hljs-attribute">font</span> 标签不加结束标签也是可以展示出效果的。但是建议同学们在写的时候还是不要这样做，严格按照要求去写。<br></code></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><h3 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230126162235701.png" alt="image-20230126162235701"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--标题--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>我是标题 h1<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>我是标题 h2<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h3</span>&gt;</span>我是标题 h3<span class="hljs-tag">&lt;/<span class="hljs-name">h3</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h4</span>&gt;</span>我是标题 h4<span class="hljs-tag">&lt;/<span class="hljs-name">h4</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h5</span>&gt;</span>我是标题 h5<span class="hljs-tag">&lt;/<span class="hljs-name">h5</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">h6</span>&gt;</span>我是标题 h6<span class="hljs-tag">&lt;/<span class="hljs-name">h6</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--横线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--字体标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">face</span>=<span class="hljs-string">&quot;楷体&quot;</span> <span class="hljs-attr">size</span>=<span class="hljs-string">&quot;5&quot;</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;#ff0000&quot;</span>&gt;</span>基础入门系列<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--横线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--换行标签--&gt;</span><br>《企鹅哲学史》（上卷）以前苏格拉底时期哲学家为起点，一路穿行过古希腊、中世纪、文艺复兴、启蒙时代，最终将脚步停留在了世纪末的尼采、布拉德雷与杜威。<br>上卷以哲学史的时序为轴，伟大的哲人、纷繁的学派、涌动的思潮、冲破思想桎梏、颠覆旧学的创新思想者们在原本恢弘却又混沌的思想画卷中渐次浮现，在作者提要钩玄的笔下，<br>深邃幽隐、盘根错节的哲人哲思显得明快畅达。<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>《企鹅哲学史》（下卷）主要书写19世纪末之后的哲学思想。由于分析哲学的兴起，下卷按分析哲学与欧陆哲学分庭抗礼的哲学史发展态势，以平行结构逐一解析两套体系的思想发展历程<br>。无论是胡塞尔、海德格尔这样的欧陆哲学权威巨擘，还是维特根斯坦、卡尔纳普这样的分析哲学执牛耳者，都在作者的娓娓道来间变得面目清晰。<br>此外，本卷视野还兼及中国、印度、阿拉伯－波斯、非洲等地区的哲学传统，勾勒出迥异于欧美传统的、异质文明的哲学视域。<br><br><span class="hljs-comment">&lt;!--横线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--段落标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>《企鹅哲学史》（下卷）主要书写19世纪末之后的哲学思想。由于分析哲学的兴起，下卷按分析哲学与欧陆哲学分庭抗礼的哲学史发展态势，以平行结构逐一解析两套体系的思想发展历程<br>    。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>无论是胡塞尔、海德格尔这样的欧陆哲学权威巨擘，还是维特根斯坦、卡尔纳普这样的分析哲学执牛耳者，都在作者的娓娓道来间变得面目清晰。<br>    此外，本卷视野还兼及中国、印度、阿拉伯－波斯、非洲等地区的哲学传统，勾勒出迥异于欧美传统的、异质文明的哲学视域。<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--横线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>《企鹅哲学史》<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">i</span>&gt;</span>《企鹅哲学史》<span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">u</span>&gt;</span>《企鹅哲学史》<span class="hljs-tag">&lt;/<span class="hljs-name">u</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--横线标签--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>沙柳河水流淌<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p>结果</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230126162302036.png" alt="image-20230126162302036"></p><p>案列</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>企业简介<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;yellow&quot;</span> &gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;red&quot;</span>&gt;</span>传智教育<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span>(股票代码 003032)，隶属江苏传智播客教育科技股份有限公司，注册资本4亿元，是第一个实现A股IPO的教育企业，<br>    公司致力于培养高精尖数字化人才，主要培养人工智能、python+大数据开发、智能制造、软件、互联网、区块链等数字化专业人才及数据分析、网络营销、<br>    新媒体等数字化应用人才。公司由一批拥有10年以上开发管理经验，且来自互联网或研究机构的IT精英组成，负责研究、<br>    开发教学模式和课程内容。公司具有完善的课程研发体系，一直走在整个行业发展的前端，在行业内竖立起了良好的品质口碑。<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    民族振兴靠人才，中华民族正处于伟大复兴之路上，要赢得国际竞争，需要拥有大量的科技人才，我们将肩负起民族使命，在三尺讲台诲人不倦<br>    著书立说，为科技行业培养出大量的优秀人才，促进民族伟大复兴！我们的使命是：<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>为中华民族伟大复兴而讲课，为千万学生少走弯路而著书。<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span><br>    探索教育之路，长途漫漫。传智教育希望可以通过自己的努力，寻找出一条更符合人类自然成长规律的教育之路，<br>    建立起一个新的教育生态环境，让中国的家长和孩子们在现有的教育体系之外，再多一些选择的机会。因此<span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>“探索教育本源，<br>    开辟教育新生态”<span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span>便成为了所有传智人为之奋斗的终极愿景，也是所有传智人共同努力的目标。为此，15年来，传智人不曾有一丝懈怠，<br>    相信在传智人的不懈努力下，大道不远，终在脚下。<br><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;<span class="hljs-name">hr</span> <span class="hljs-attr">color</span>=<span class="hljs-string">&quot;yellow&quot;</span> &gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">center</span> &gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">font</span> <span class="hljs-attr">color</span>=<span class="hljs-string">#778899</span>&gt;</span>江苏传智播客教育科技股份有限公司<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    版权所有Copyright 2006-2018<span class="hljs-symbol">&amp;copy;</span>, All Rights Reserved 苏ICP备16007882<span class="hljs-tag">&lt;/<span class="hljs-name">font</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">center</span>&gt;</span><br><br><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230126163527991.png" alt="image-20230126163527991"></p><h3 id="图片音频视频"><a href="#图片音频视频" class="headerlink" title="图片音频视频"></a>图片音频视频</h3><p>img：定义图片<br>    src：规定显示图像的 URL（统一资源定位符）<br>    height：定义图像的高度<br>    width：定义图像的宽度<br>audio：定义音频。支持的音频格式：MP3、WAV、OGG<br>    src：规定音频的 URL<br>    controls：显示播放控件<br>video：定义视频。支持的音频格式：MP4, WebM、OGG<br>    src：规定视频的 URL<br>    controls：显示播放控件</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">&lt;<span class="hljs-selector-tag">img</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;a.jpg&quot;</span>&gt;<br>&lt;<span class="hljs-selector-tag">audio</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;b.mp3&quot;</span> controls&gt;&lt;/audio&gt;<br>&lt;<span class="hljs-selector-tag">video</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;c.mp4&quot;</span> controls width=<span class="hljs-string">&quot;500&quot;</span> height=<span class="hljs-string">&quot;300&quot;</span>&gt;&lt;/video&gt;<br></code></pre></td></tr></table></figure><h3 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h3><p>href：指定访问资源的URL<br>target：指定打开资源的方式<br>    _self：默认值，在当前页面打开<br>    _blank：在空白页面打开</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">a <span class="hljs-attribute">href</span>=<span class="hljs-string">&quot;https://www.fox.cn&quot;</span> <span class="hljs-attribute">target</span>=<span class="hljs-string">&quot;_self&quot;</span>&gt;点我有惊喜<br></code></pre></td></tr></table></figure><h3 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h3><h4 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230126171408453.png" alt="image-20230126171408453"></p><h4 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230126171423800.png" alt="image-20230126171423800"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230126171452371.png" alt="image-20230126171452371"></p><p>有序列表中的 type 属性用来指定标记的标号的类型（数字、字母、罗马数字等） 无序列表中的 type 属性用来指定标记的形状。不建议直接修改标记属性，一般使用css进行控制</p><h3 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h3><p>cellspacing=”0”合并</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">table</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;1&quot;</span> <span class="hljs-attr">cellspacing</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;500&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>序号<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>品牌logo<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>品牌名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">th</span>&gt;</span>企业名称<span class="hljs-tag">&lt;/<span class="hljs-name">th</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>009<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/三只松鼠.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>优衣库<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>优衣库<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>008<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/三只松鼠.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>小米<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>小米可以有限公司<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">tr</span> <span class="hljs-attr">align</span>=<span class="hljs-string">&quot;center&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>010<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/三只松鼠.png&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;40&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;30&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>三枝松鼠<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>三枝松鼠<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><br><br></code></pre></td></tr></table></figure><h4 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230126172832469.png" alt="image-20230126172832469"></p><h3 id="双标签"><a href="#双标签" class="headerlink" title="双标签"></a>双标签</h3><p>双标签有开始标签和结束标签一起构成，内容写在两个标签之间</p><pre><code class="hljs">&lt;p&gt; &lt;/p&gt;#段落标签&lt;ul&gt; &lt;/ul&gt;#无序列表标签&lt;h1&gt; &lt;/h1&gt;#标题标签&lt;table&gt; &lt;/tabel&gt;#/表格标签</code></pre><h3 id="单标签"><a href="#单标签" class="headerlink" title="单标签"></a>单标签</h3><p>单标签只有一个标签构成</p><pre><code class="hljs">&lt;br/&gt;#换行标签&lt;hr/&gt;#建立水平线&lt;meta/&gt;元素提供有关页面的元信息&lt;img/&gt;#在页面插入图片 </code></pre><h3 id="标签属性"><a href="#标签属性" class="headerlink" title="标签属性"></a>标签属性</h3><p>设置标签的样式和显示格式</p><pre><code class="hljs">&lt;p align=&quot;center&quot;&gt;文字 &lt;/p&gt;设置显示方式为居中显示</code></pre><h3 id="内嵌样式标签"><a href="#内嵌样式标签" class="headerlink" title="内嵌样式标签"></a>内嵌样式标签</h3><p>在head标签中加入style标签</p><pre><code class="hljs">&lt;style&gt;    p&#123;        background:green #设置标签p的背景为绿色            &#125; &lt;/style&gt;</code></pre><h3 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h3><p>在HTML中加入注释有助于其他人理解，和其他语言的注释方式略微有点不同</p><pre><code class="hljs">&lt;!--这是一个注释--&gt;</code></pre><h3 id="常用标签"><a href="#常用标签" class="headerlink" title="常用标签"></a>常用标签</h3><pre><code class="hljs">&lt;h1&gt;这是一级标题标签 &lt;/h1&gt;&lt;p&gt; 这是段落标签 &lt;/p&gt;</code></pre><p>​    </br>这是换行标签<br>​    </nobr>这是不换行标签<br>​    <hr>水平线</p><h3 id="特殊字符的输入"><a href="#特殊字符的输入" class="headerlink" title="特殊字符的输入"></a>特殊字符的输入</h3><figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gams"><span class="hljs-meta"><span class="hljs-meta-keyword">$nbsp</span> 这是空格</span><br></code></pre></td></tr></table></figure><h3 id="布局标签"><a href="#布局标签" class="headerlink" title="布局标签"></a>布局标签</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">&lt;<span class="hljs-selector-tag">div</span>&gt;我是<span class="hljs-selector-tag">div</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">div</span>&gt;我是<span class="hljs-selector-tag">div</span>&lt;/<span class="hljs-selector-tag">div</span>&gt;<br>  &lt;<span class="hljs-selector-tag">span</span>&gt;我是<span class="hljs-selector-tag">span</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;<br>  &lt;<span class="hljs-selector-tag">span</span>&gt;我是<span class="hljs-selector-tag">span</span>&lt;/<span class="hljs-selector-tag">span</span>&gt;<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230127160749903.png" alt="image-20230127160749903"></p><h3 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"> &lt;form action=&quot;#&quot; <span class="hljs-keyword">method</span>=&quot;post&quot;&gt;<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;text&quot; <span class="hljs-type">name</span>=&quot;username&quot;&gt;<br>        &lt;<span class="hljs-keyword">input</span> <span class="hljs-keyword">type</span>=&quot;submit&quot;&gt;<br>&lt;/form&gt;<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230127160740579.png" alt="image-20230127160740579"></p><p>action：规定当提交表单时向何处发送表单数据，该属性值就是URL</p><p>以后会将数据提交到服务端，该属性需要书写服务端的URL。而今天我们可以书写 # ，表示提交到当前页面来看效果。</p><p>method ：规定用于发送表单数据的方式</p><p>method取值有如下两种：</p><p>get：默认值。如果不设置method属性则默认就是该值</p><p>​        请求参数会拼接在URL后边</p><p>​        url的长度有限制 4KB</p><p>post：</p><p>​        浏览器会将数据放到http请求消息体中</p><p>​        请求参数无限制的</p><p><input> ：表单项，通过type属性控制输入形式</p><p>​    input标签有多个属性，通过type属性取值的不同，展示效果也不同</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230127172028927.png" alt="image-20230127172028927"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br></code></pre></td></tr></table></figure><p>text文本输入框 </p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;textarea <span class="hljs-attribute">cols</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attribute">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;&lt;/textarea&gt; <br></code></pre></td></tr></table></figure><p>演示</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--   隐藏标签     --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;hidden&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;id&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;123&quot;</span>&gt;</span><br>        <span class="hljs-comment">&lt;!--   让标签与inpu框产生关联lable     --&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>            账号：<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">label</span> <span class="hljs-attr">for</span>=<span class="hljs-string">&quot;pw&quot;</span>&gt;</span><br>            密码：<br>        <span class="hljs-tag">&lt;/<span class="hljs-name">label</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;passwd&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;pw&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        <span class="hljs-comment">&lt;!--    radio同一个name时会进行互斥，只能选择其中一个--&gt;</span><br>        性别：男<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;男&quot;</span>&gt;</span><br>        女<span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;radio&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;gender&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;女&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        爱好：<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happy&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;1&quot;</span>&gt;</span> 健身<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happy&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;2&quot;</span>&gt;</span> 娱乐<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;checkbox&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;happy&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;3&quot;</span>&gt;</span> 打游戏<br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        头像<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;file&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        地点<span class="hljs-tag">&lt;<span class="hljs-name">select</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>上海<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>杭州<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>北京<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">option</span>&gt;</span>德国<span class="hljs-tag">&lt;/<span class="hljs-name">option</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">select</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        个人描述<br>        <span class="hljs-tag">&lt;<span class="hljs-name">textarea</span> <span class="hljs-attr">cols</span>=<span class="hljs-string">&quot;20&quot;</span> <span class="hljs-attr">rows</span>=<span class="hljs-string">&quot;10&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">textarea</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;reset&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;重置&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;按钮&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230127171847524.png" alt="image-20230127171847524"></p><h1 id="Css"><a href="#Css" class="headerlink" title="Css"></a>Css</h1><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>CSS被称为层叠样式单，用与描述结构文档的表现方式，主要用于网页风格的设计，包括字体大小的设计，颜色，背景以及元素的精确定位，增强文档的表现力。</p><h3 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h3><pre><code class="hljs">p &#123;color:red ;size:20px;&#125; 设置p标签的颜色为红色，字体大小为20px</code></pre><h3 id="使用css样式的方法"><a href="#使用css样式的方法" class="headerlink" title="使用css样式的方法"></a>使用css样式的方法</h3><h4 id="内嵌样式"><a href="#内嵌样式" class="headerlink" title="内嵌样式"></a>内嵌样式</h4><p>内部样式就是直接在标签内设置该标签的样式属性</p><pre><code class="hljs">&lt;p style=&quot;color:red ,frontsize:20px;front-family:微软雅黑&gt; 内部样式设置&lt;/p&gt;</code></pre><h4 id="内部样式"><a href="#内部样式" class="headerlink" title="内部样式"></a>内部样式</h4><p>也可以将样式属性直接放在头部的style标签中</p><pre><code class="hljs">&lt;head&gt;&lt;style&gt;          p&#123;            color:red;            font-size:20px;                        &#125;         &lt;/style&gt;&lt;/head&gt;</code></pre><h4 id="外部样式"><a href="#外部样式" class="headerlink" title="外部样式"></a>外部样式</h4><p>外部样式是直接将所有的样式写进一个css文件中，然后从HTML文件中直接调用该文件<br>头部标签中加入  </p><pre><code class="hljs">&lt;link rel=&quot;stylesheet&quot; href=&quot;style.css&quot;&gt; #这里注意将css文件和HTML文件放在同一级目录</code></pre><p>导入外部样式表(style标签中加入）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-keyword">@import</span> <span class="hljs-string">&quot;style.css&quot;</span>;<br></code></pre></td></tr></table></figure><p>总结</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../Css/demo.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-comment">&lt;!--内部导入一--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;color: red&quot;</span>&gt;</span>Hello CSS<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-comment">&lt;!--内部导入二--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>hello css<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-comment">&lt;!--外部导入css--&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>hello css<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230127174428436.png" alt="image-20230127174428436"></p><h3 id="css的特性"><a href="#css的特性" class="headerlink" title="css的特性"></a>css的特性</h3><p>id具有唯一性质</p><h4 id="层叠性"><a href="#层叠性" class="headerlink" title="层叠性"></a>层叠性</h4><p>权重低的选择器可以被权重高的选择器覆盖掉<br>    #a ID选择器 权重向下依次递减<br>    .b 类选择器  class<br>    P 标签选择器  </p><p>谁显示的范围越小，就优先显示谁的</p><h4 id="继承性"><a href="#继承性" class="headerlink" title="继承性"></a>继承性</h4><p>子标签的属性可以有父标签的属性定义<br>有其父必有其子吗？答案是不一定的，比如a标签不能继承颜色，h标签不能继承字体大小</p><h4 id="案列-1"><a href="#案列-1" class="headerlink" title="案列"></a>案列</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="css"></span><br><span class="css">        <span class="hljs-comment">/*标签选择器*/</span></span><br><span class="css">    <span class="hljs-selector-tag">div</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: red;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-selector-tag">span</span>&#123;</span><br><span class="css">        <span class="hljs-attribute">color</span>: aqua;</span><br><span class="css">    &#125;</span><br><span class="css">    <span class="hljs-comment">/*id选择器*/</span></span><br><span class="css">        <span class="hljs-selector-id">#id2</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: black;</span><br><span class="css">        &#125;</span><br><span class="css">    <span class="hljs-comment">/*    类选择class*/</span></span><br><span class="css">        <span class="hljs-selector-class">.cls</span>&#123;</span><br><span class="css">            <span class="hljs-attribute">color</span>: lightslategrey;</span><br><span class="css">        &#125;</span><br><span class="css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> &gt;</span>1<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;id2&quot;</span>&gt;</span>2<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>3<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;cls&quot;</span>&gt;</span>span<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230127181603763.png" alt="image-20230127181603763"></p><h4 id="优先性"><a href="#优先性" class="headerlink" title="优先性"></a>优先性</h4><p>!important&gt;行内样式&gt;ID选择器&gt;类选择器&gt;标签选择器&gt;通配符&gt;继承&gt;浏览器属性</p><h3 id="css样式选择器"><a href="#css样式选择器" class="headerlink" title="css样式选择器"></a>css样式选择器</h3><pre><code class="hljs">h1&#123;&#125; //标签选择器*&#123;&#125;  //通配符#id&#123;&#125; //id选择器.class&#123;&#125; //类选择器p,div&#123;&#125;  //群选择器p .class a &#123;&#125; //包含选择器 选择某个特定标签下的子标签ul.class &gt;li&gt;a &#123;&#125; //子类选择器ul h2~p //兄弟选择器</code></pre><h4 id="动态伪类选择器"><a href="#动态伪类选择器" class="headerlink" title="动态伪类选择器"></a>动态伪类选择器</h4><p>伪类选择器并不是正真的选择元素的选择器，而是针对伪元素</p><pre><code class="hljs">li:bedfore&#123; &#125; //在li标签之前插入li:after &#123; &#125; //在li标签后插入li:before &#123; content:counter(order,upper-roman)&quot;.&quot;;&#125; //设置编号</code></pre><h4 id="css选择器"><a href="#css选择器" class="headerlink" title="css选择器"></a>css选择器</h4><p>结构性伪类选择器，利用文档结构树来实现元素的过滤，类似于正则表达式的匹配，这个只不过匹配的是文档元素</p><pre><code class="hljs">：root //匹配文档的根元素:first-child //匹配父元素的第一个子元素:last-child  // 匹配父元素的最后一个子元素</code></pre><h5 id="UI伪类选择器"><a href="#UI伪类选择器" class="headerlink" title="UI伪类选择器"></a>UI伪类选择器</h5><p>只有存在某种状态才可能某种样式出现<br>    ：hover //鼠标悬浮的样式<br>    :active //按住左键不松开的样式<br>    :focus  //获得指针输入时的样式</p><h5 id="单选框与复选框样式"><a href="#单选框与复选框样式" class="headerlink" title="单选框与复选框样式"></a>单选框与复选框样式</h5><pre><code class="hljs">input[type=&quot;checkbox&quot;]：checked&#123;&#125;  //单选框input[type=&quot;text&quot;]::selection&#123;&#125;    //复选框</code></pre><h5 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h5><pre><code class="hljs">[class^=d]匹配类名以d开始的每个元素[class$=d]匹配以类名d结尾的每个元素</code></pre><h3 id="css网页美化"><a href="#css网页美化" class="headerlink" title="css网页美化"></a>css网页美化</h3><h4 id="设置字体粗细"><a href="#设置字体粗细" class="headerlink" title="设置字体粗细"></a>设置字体粗细</h4><pre><code class="hljs">font-weight:bold; //加粗字体font-weight:bolder; //超级加粗font-weight:lighter; //细字体font-weight:normal; //默认字体</code></pre><h5 id="设置字体风格"><a href="#设置字体风格" class="headerlink" title="设置字体风格"></a>设置字体风格</h5><pre><code class="hljs">font-style:normal //默认字体font-style:oblique //倾斜字体font-style:italic  //斜体font-style:inherit  //继承父元素字体</code></pre><h5 id="设置字体大小"><a href="#设置字体大小" class="headerlink" title="设置字体大小"></a>设置字体大小</h5><pre><code class="hljs">font-size:larger; font-size:smaller;font-size:length;font-size:30px;</code></pre><h5 id="设置字体类型"><a href="#设置字体类型" class="headerlink" title="设置字体类型"></a>设置字体类型</h5><pre><code class="hljs">font-family:微软雅黑font-family:华文彩云font-family:宋体</code></pre><h5 id="设置行高"><a href="#设置行高" class="headerlink" title="设置行高"></a>设置行高</h5><pre><code class="hljs">line-height:30px //设置行高为30像素 </code></pre><h4 id="设置复合属性"><a href="#设置复合属性" class="headerlink" title="设置复合属性"></a>设置复合属性</h4><pre><code class="hljs">font:font-style font-variant font-weight font-zize font-family</code></pre><h4 id="设置首行缩进和字符间距"><a href="#设置首行缩进和字符间距" class="headerlink" title="设置首行缩进和字符间距"></a>设置首行缩进和字符间距</h4><pre><code class="hljs">text-indent:2em ;//设置两个字符的首行缩进letter-space:5px ;//设置字符间距</code></pre><h4 id="设置对齐方式"><a href="#设置对齐方式" class="headerlink" title="设置对齐方式"></a>设置对齐方式</h4><pre><code class="hljs">text-align:left;text-align:right;text-align:center;text-align:justfy; //两端对齐</code></pre><h4 id="设置竖直对齐方式"><a href="#设置竖直对齐方式" class="headerlink" title="设置竖直对齐方式"></a>设置竖直对齐方式</h4><pre><code class="hljs">vretical-align:topvertical-align:middlevertical-align:bottom </code></pre><h4 id="设置服务器字体"><a href="#设置服务器字体" class="headerlink" title="设置服务器字体"></a>设置服务器字体</h4><pre><code class="hljs">@font-face&#123;font-family:name; /*设置服务器字体的名称*/scr:url(url) format(font-format) /*设置字体路径和字体格式*/&#125;</code></pre><h5 id="美化网页图像"><a href="#美化网页图像" class="headerlink" title="美化网页图像"></a>美化网页图像</h5><h6 id="插入图像"><a href="#插入图像" class="headerlink" title="插入图像"></a>插入图像</h6><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;image.jpg&quot;</span>&gt;<br></code></pre></td></tr></table></figure><p>设置图像路径</p><p>最方便的方法：直接将图片放在与网页文件的统一级目录，插入图片时直接引用图片名称即可</p><p>相对路径：相对与网页文件，在整个目录文件中的位置（./img.jpg)</p><p>绝对路径：相对于计算机文件夹的路径（D:/img.jpg)</p><h6 id="设置图像格式"><a href="#设置图像格式" class="headerlink" title="设置图像格式"></a>设置图像格式</h6><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs awk">&lt;img src=<span class="hljs-string">&quot;image.jpg&quot;</span> width=<span class="hljs-string">&quot;200px&quot;</span> height=<span class="hljs-string">&quot;200px&quot;</span>&gt; <span class="hljs-regexp">//</span>设置图像的宽度为<span class="hljs-number">200</span>px,高度也为<span class="hljs-number">200</span>px<br>.img &#123;<br>border:<span class="hljs-number">10</span>px solid <span class="hljs-comment">#12334;   //设置图像边框</span><br>opcity=<span class="hljs-number">0.5</span>; <span class="hljs-regexp">//</span>设置图像透明度<br>border-radius: <span class="hljs-number">50</span>px; <span class="hljs-regexp">//</span>设置圆角<br>box-shadow:<span class="hljs-number">20</span>px <span class="hljs-number">20</span>px <span class="hljs-comment">#00ff00 //设置图像阴影</span><br>vertical-align:bottom; <span class="hljs-regexp">//</span>设置对齐方式<br>float:left; <span class="hljs-regexp">//</span>设置文字与图片混排方式<br>&#125;<br><br></code></pre></td></tr></table></figure><h6 id="设置背景图片"><a href="#设置背景图片" class="headerlink" title="设置背景图片"></a>设置背景图片</h6><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-selector-tag">body</span>&#123;<br><span class="hljs-attribute">background-color</span>:red; <span class="hljs-comment">//设置背景颜色</span><br><span class="hljs-attribute">background</span>-<span class="hljs-selector-tag">img</span>: img.jpg; <span class="hljs-comment">//设置背景图片</span><br><span class="hljs-attribute">background-repeat</span>:no-repeat; <span class="hljs-comment">//设置图片的平铺方式</span><br><span class="hljs-attribute">background-position</span><span class="hljs-selector-pseudo">:left</span> <span class="hljs-attribute">top</span>; <span class="hljs-comment">//设置图像的位置</span><br>&#125;<br></code></pre></td></tr></table></figure><h5 id="网页美化超链接"><a href="#网页美化超链接" class="headerlink" title="网页美化超链接"></a>网页美化超链接</h5><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h1><h3 id="内部脚本"><a href="#内部脚本" class="headerlink" title="内部脚本"></a>内部脚本</h3><p>alert(数据) 是 JavaScript 的一个方法，作用是将参数数据以浏览器弹框的形式输出出来。</p><p>在 HTML 文档中可以在任意地方，放置任意数量的标签。如下图</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--内部脚本--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    alert(<span class="hljs-string">&quot;内部脚本&quot;</span>)</span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>一般把脚本置于 元素的底部，可改善显示速度 因为浏览器在加载页面的时候会从上往下进行加载并解析。 我们应该让用户看到页面内容，然后再展示动态的效 果。</p><h3 id="外部脚本"><a href="#外部脚本" class="headerlink" title="外部脚本"></a>外部脚本</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--外部脚本引入--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;demo1.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230128163551469.png" alt="image-20230128163551469"></p><h3 id="书写语法"><a href="#书写语法" class="headerlink" title="书写语法"></a>书写语法</h3><p>​    区分大小写：与 Java 一样，变量名、函数名以及其他一切东西都是区分大小写的<br>每行结尾的分号可有可无<br>如果一行上写多个语句时，必须加分号用来区分多个语句。<br>注释<br>​    单行注释：// 注释内容<br>​    多行注释：/* 注释内容 */</p><p>{}大括号代表代码块</p><h3 id="js三种输出"><a href="#js三种输出" class="headerlink" title="js三种输出"></a>js三种输出</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230128165505180.png" alt="image-20230128165505180"></p><p>alert</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--    写入警告框--&gt;</span><br>    window.alert(&quot;hello js&quot;);//写入警告框<br></code></pre></td></tr></table></figure><p>document.write</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arduino">document.<span class="hljs-built_in">write</span>(<span class="hljs-string">&quot;hello js2~&quot;</span>);<span class="hljs-comment">//写入html页面</span><br></code></pre></td></tr></table></figure><p>console.log</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs 1c">console.<span class="hljs-built_in">log</span>(<span class="hljs-string">&quot;hello js 3&quot;</span>);<span class="hljs-comment">//写入浏览器的控制台</span><br><br></code></pre></td></tr></table></figure><h3 id="变量的定义"><a href="#变量的定义" class="headerlink" title="变量的定义"></a>变量的定义</h3><h4 id="var"><a href="#var" class="headerlink" title="var"></a>var</h4><p>/*<br>var定义的变量特点：<br>    作用域很大<br>    可以重复定义</p><p>*/</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs routeros">var <span class="hljs-attribute">p</span>=30;<br>var <span class="hljs-attribute">p</span>=40;<br>alert(p)<br></code></pre></td></tr></table></figure><h4 id="let"><a href="#let" class="headerlink" title="let"></a>let</h4><p>/*</p><ul><li>let定义的变量：</li><li>变量只在所在的代码块中有效，且不允许重复定义</li><li>*/</li></ul><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs nix">&#123;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-attr">q=20;</span><br>&#125;<br><br>// <span class="hljs-keyword">let</span> <span class="hljs-attr">q=90;</span><br></code></pre></td></tr></table></figure><h4 id="const"><a href="#const" class="headerlink" title="const"></a>const</h4><p>const常量的定义，只能赋值一次，不可更改</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache">   <br><span class="hljs-attribute">const</span> pi=<span class="hljs-number">3</span>.<span class="hljs-number">14</span><br></code></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>number :整数，，小数，NaN</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> age=<span class="hljs-number">20</span>;<br> <span class="hljs-keyword">var</span> price=<span class="hljs-number">99.8</span>;<br> <span class="hljs-built_in">document</span>.write(<span class="hljs-keyword">typeof</span> age);<br><span class="hljs-built_in">document</span>.write(<span class="hljs-keyword">typeof</span> price);<br></code></pre></td></tr></table></figure><p>string ：字符、字符串，单双引皆可</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> var ch=<span class="hljs-string">&#x27;a&#x27;</span>;<br><span class="hljs-regexp">//</span> var name=<span class="hljs-string">&quot;张三&quot;</span>;<br><span class="hljs-regexp">//</span> var add=<span class="hljs-string">&#x27;北京&#x27;</span>;<br><span class="hljs-regexp">//</span> alert(typeof ch);<br><span class="hljs-regexp">//</span> alert(typeof name);<br><span class="hljs-regexp">//</span> alert(typeof add)<br></code></pre></td></tr></table></figure><p>boolean布尔。true，false</p><figure class="highlight sqf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sqf">var <span class="hljs-built_in">flag</span>=<span class="hljs-literal">true</span>;<br>   alert(<span class="hljs-built_in">typeof</span> <span class="hljs-built_in">flag</span>);<br></code></pre></td></tr></table></figure><p>null 对象为空</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> obj=<span class="hljs-literal">null</span>;<br>   alert(<span class="hljs-keyword">typeof</span> obj);<span class="hljs-comment">//结果时object</span><br></code></pre></td></tr></table></figure><p>undefined 当声明的变量未初始化时，该变量的默认值是 </p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">var</span> <span class="hljs-selector-tag">a</span> ;<br>   <span class="hljs-selector-tag">alert</span>(typeof a); <span class="hljs-comment">//结果是 undefined</span><br></code></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p><code>==和  ===的区别</code></p><p>==：如果类型不同，会先进行类型转换，然后在进行比较。</p><p>===：如果类型不同就直接返回false,类型相同才进行比较</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-section">&lt;script&gt;</span><br>    <span class="hljs-attribute">var</span> age<span class="hljs-number">1</span>=<span class="hljs-number">20</span>;<br>    <span class="hljs-attribute">var</span> age<span class="hljs-number">2</span>=<span class="hljs-string">&quot;20&quot;</span>;<br>    <span class="hljs-attribute">alert</span>(age<span class="hljs-number">1</span>==age<span class="hljs-number">2</span>);//返回true<br>    <span class="hljs-attribute">alert</span>(age<span class="hljs-number">1</span>===age<span class="hljs-number">2</span>);//返回false<br><br><span class="hljs-section">&lt;/script&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h3><h4 id="其他类型转换转为number"><a href="#其他类型转换转为number" class="headerlink" title="其他类型转换转为number"></a>其他类型转换转为number</h4><p>​        1.string:按照字符串的字面值，转成数字，如果字面值不是数字，就转成NaN,</p><p>​        2.bolean:true为1，false为0;</p><p>使用+转换</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">var str = +<span class="hljs-string">&quot;20&quot;</span>;<br>   <span class="hljs-regexp">//</span> alert(str + <span class="hljs-number">1</span>) <span class="hljs-regexp">//</span><span class="hljs-number">21</span><br></code></pre></td></tr></table></figure><p>使用paseInt</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-comment">//paseInt</span><br>   <span class="hljs-built_in">var</span> <span class="hljs-built_in">str</span> = <span class="hljs-string">&quot;20&quot;</span>;<br>   alert(parseInt(<span class="hljs-built_in">str</span>) + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h4 id="其他类型转为boolean"><a href="#其他类型转为boolean" class="headerlink" title="其他类型转为boolean"></a>其他类型转为boolean</h4><p>1.number:0和NaN转成false,其他数字转成true</p><p>2.String:空字符串转成false,其他字符串转成true</p><p>3.null:false;</p><p>4.nudefine:false</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> flag = <span class="hljs-literal">undefined</span>;<br>    <span class="hljs-keyword">var</span> flag=<span class="hljs-string">&#x27;dsff&#x27;</span>;<br>    <span class="hljs-keyword">if</span>(flag)&#123;<br>        alert(<span class="hljs-string">&quot;转为true&quot;</span>);<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>        alert(<span class="hljs-string">&quot;转为false&quot;</span>);<br>    &#125;<br></code></pre></td></tr></table></figure><p>使用</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-keyword">if</span>(<span class="hljs-built_in">str</span> != <span class="hljs-literal">null</span> &amp;&amp; <span class="hljs-built_in">str</span>.length &gt; <span class="hljs-number">0</span>)<br></code></pre></td></tr></table></figure><p>等于</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(str)</span></span><br></code></pre></td></tr></table></figure><h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h4 id="if"><a href="#if" class="headerlink" title="if"></a>if</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-keyword">count</span> = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">count</span> == <span class="hljs-number">3</span>) &#123;<br>alert(<span class="hljs-keyword">count</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h4><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">var</span> <span class="hljs-built_in">num</span> = <span class="hljs-number">3</span>;<br><span class="hljs-keyword">switch</span> (<span class="hljs-built_in">num</span>) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>alert(<span class="hljs-string">&quot;星期一&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>alert(<span class="hljs-string">&quot;星期二&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>alert(<span class="hljs-string">&quot;星期三&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">4</span>:<br>alert(<span class="hljs-string">&quot;星期四&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">5</span>:<br>alert(<span class="hljs-string">&quot;星期五&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">6</span>:<br>alert(<span class="hljs-string">&quot;星期六&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-number">7</span>:<br>alert(<span class="hljs-string">&quot;星期日&quot;</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br>alert(<span class="hljs-string">&quot;输入的星期有误&quot;</span>);<br><span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="for"><a href="#for" class="headerlink" title="for"></a>for</h4><figure class="highlight lasso"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs lasso"><span class="hljs-built_in">var</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>;<br>for (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">100</span>; i++) &#123; <span class="hljs-comment">//建议for循环小括号中定义的变量使用let</span><br><span class="hljs-keyword">sum</span> += i;<br>&#125;<br>alert(<span class="hljs-keyword">sum</span>);<br></code></pre></td></tr></table></figure><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>) &#123;<br><span class="hljs-keyword">sum</span> += i;<br>i++;<br>&#125;<br>alert(<span class="hljs-keyword">sum</span>);<br><br></code></pre></td></tr></table></figure><h4 id="dowhile"><a href="#dowhile" class="headerlink" title="dowhile"></a>dowhile</h4><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs axapta"><span class="hljs-built_in">var</span> <span class="hljs-keyword">sum</span> = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">var</span> i = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">do</span> &#123;<br><span class="hljs-keyword">sum</span> += i;<br>i++;<br>&#125;<br><span class="hljs-keyword">while</span> (i &lt;= <span class="hljs-number">100</span>);<br>alert(<span class="hljs-keyword">sum</span>);<br><br></code></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数 和java函数的定义有区别，需要function关键字，且不需要定义传入参数类型和返回值类型</p><p>方式一</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada"><span class="hljs-keyword">function</span> <span class="hljs-title">函数名</span>(参数1,参数2..)&#123;<br>要执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><p>方式二</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> 函数名 = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">(参数列表)</span></span>&#123;<br>要执行的代码<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ada">var add=<span class="hljs-keyword">function</span> <span class="hljs-title"></span>(a,b)&#123;<br>       <span class="hljs-keyword">return</span> <span class="hljs-type">a+b</span>;<br>   &#125;<br></code></pre></td></tr></table></figure><p>注：即使调用函数传入的参数和函数需要参数不一致，也不会报错</p><p>例子：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function">function <span class="hljs-title">add</span>(<span class="hljs-params">a,b</span>)</span>&#123;<br>       <span class="hljs-keyword">return</span> a+b<br>   &#125;<br>   <br>   <span class="hljs-keyword">var</span> result=<span class="hljs-keyword">add</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>   alert(result)<br>   <br>     <span class="hljs-keyword">var</span> result1=<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br>   <span class="hljs-comment">//返回3</span><br>   <span class="hljs-keyword">var</span> result2=<span class="hljs-keyword">add</span>(<span class="hljs-number">1</span>);<br>   <span class="hljs-comment">//返回NaN</span><br></code></pre></td></tr></table></figure><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p><a href="https://www.w3school.com.cn/jsref/dom_obj_all.asp">HTML DOM Element 对象 (w3school.com.cn)</a></p><h4 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230129163027772.png" alt="image-20230129163027772"></p><p>创建</p><p>方式一</p><figure class="highlight haxe"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haxe"><span class="hljs-comment">// 方式一</span><br>    <span class="hljs-keyword">var</span> arr = <span class="hljs-keyword">new</span> <span class="hljs-type">Array</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>方式二</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 方式二<br>    var arr2 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>];<br>    <span class="hljs-regexp">//</span> alert(arr2);<br></code></pre></td></tr></table></figure><p>特性：变长，变类型</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> 变长<br>  var arr3 = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>  <span class="hljs-regexp">//</span>变类型<br>  arr3[<span class="hljs-number">3</span>]=<span class="hljs-string">&quot;hello&quot;</span>;<br>  alert(arr3)<br></code></pre></td></tr></table></figure><p>循环遍历</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-keyword">for</span> (let i = <span class="hljs-number">0</span>; i &lt; arr3.length; i++) &#123;<br>        <span class="hljs-regexp">//</span> alert(arr3[i])<br><br>    &#125;<br></code></pre></td></tr></table></figure><p>添加与 删除</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>添加<br>    arr3.push(<span class="hljs-number">10</span>);<br>    <span class="hljs-regexp">//</span> alert(arr3); <span class="hljs-regexp">//</span>数组的元素是 &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">10</span>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>删除<br>    arr3.splice(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>);<br>    <span class="hljs-regexp">//</span> alert(arr3)<br></code></pre></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p>定义方式一</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--  定义的方式一--&gt;</span><br>  var s= new String(&quot;hello world&quot;);<br>  // alert(s);<br></code></pre></td></tr></table></figure><p>定义方式二</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--定义的方式二--&gt;</span><br>   var s1=&quot;hello world2&quot;;<br>   // alert(s1)<br><br></code></pre></td></tr></table></figure><p>函数</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">var str=<span class="hljs-string">&#x27;  abc  &#x27;</span>;<br>   <span class="hljs-regexp">//</span>返回指定位置的字符<br>   <span class="hljs-regexp">//</span> alert(str.charAt(<span class="hljs-number">0</span>));<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span>检索字符串<br> <span class="hljs-regexp">//</span> alert(str.indexOf(<span class="hljs-string">&#x27;a&#x27;</span>));<br></code></pre></td></tr></table></figure><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs processing"><span class="hljs-comment">//去除首尾空格</span><br>alert(<span class="hljs-built_in">str</span>.<span class="hljs-built_in">trim</span>());<br></code></pre></td></tr></table></figure><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">str.length<span class="hljs-regexp">//</span>获取长度<br></code></pre></td></tr></table></figure><h4 id="自定义对象"><a href="#自定义对象" class="headerlink" title="自定义对象"></a>自定义对象</h4><p>代码模板</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> 对象名称=&#123;<br>属性名称<span class="hljs-number">1</span>：属性值，<br>属性名称<span class="hljs-number">1</span>：属性值，<br>函数名称:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(形参列表)</span></span>&#123;<br><br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>案列</p><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs actionscript"><span class="hljs-keyword">var</span> person=&#123;<br>    name:<span class="hljs-string">&quot;张三&quot;</span>,<br>    age:<span class="hljs-number">23</span>,<br>    eat:<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">()</span></span>&#123;<br>        alert(<span class="hljs-string">&quot;干饭&quot;</span>);<br>    &#125;<br><br>&#125;;<br><br>alert(person.name);<br>alert(person.age);<br>person.eat();<br><br></code></pre></td></tr></table></figure><h3 id="BOM对象"><a href="#BOM对象" class="headerlink" title="BOM对象"></a>BOM对象</h3><h4 id="windows对象"><a href="#windows对象" class="headerlink" title="windows对象"></a>windows对象</h4><p>windows.可以省略</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> window.alert(<span class="hljs-string">&quot;abc&quot;</span>);<br><span class="hljs-regexp">//</span> window.confirm(<span class="hljs-string">&quot;确认删除？&quot;</span>)<br></code></pre></td></tr></table></figure><p>单次计时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//单词计时器</span><br>   <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>       alert(<span class="hljs-string">&quot;java&quot;</span>)<br>   &#125;,<span class="hljs-number">2000</span>);<br></code></pre></td></tr></table></figure><p>多次计时器</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//循环计时间器</span><br>  <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>      alert(<span class="hljs-string">&quot;3s&quot;</span>)<br><br>  &#125;,<span class="hljs-number">3000</span>);<br><br></code></pre></td></tr></table></figure><h4 id="计时器案列"><a href="#计时器案列" class="headerlink" title="计时器案列"></a>计时器案列</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;on()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;开灯&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myImage&quot;</span> <span class="hljs-attr">border</span>=<span class="hljs-string">&quot;0&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img/off.gif&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;text-align:center;&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;button&quot;</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;off()&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;关灯&quot;</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">on</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myImage&#x27;</span>).src=<span class="hljs-string">&#x27;img/on.gif&#x27;</span>;</span><br><span class="javascript">    &#125;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">off</span>(<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">        <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&#x27;myImage&#x27;</span>).src=<span class="hljs-string">&#x27;img/off.gif&#x27;</span></span><br><span class="javascript">    &#125;</span><br><span class="javascript">    <span class="hljs-keyword">var</span> x = <span class="hljs-number">0</span>;</span><br><span class="javascript"></span><br><span class="javascript">    <span class="hljs-comment">// 根据一个变化的数字，产生固定个数的值； 2  x % 2     3   x % 3</span></span><br><span class="javascript">    <span class="hljs-comment">//定时器</span></span><br><span class="javascript">    <span class="hljs-built_in">setInterval</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-keyword">if</span>(x % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>)&#123;</span><br><span class="javascript">            on();</span><br><span class="javascript">        &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="javascript">            off();</span><br><span class="javascript">        &#125;</span><br><span class="javascript"></span><br><span class="javascript">        x ++;</span><br><span class="javascript"></span><br><span class="javascript">    &#125;,<span class="hljs-number">200</span>);</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230129203558165.png" alt="image-20230129203558165"></p><h4 id="History"><a href="#History" class="headerlink" title="History"></a>History</h4><p>对js的历史记录进行封装</p><p>history对象的获取</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs coffeescript"><span class="hljs-built_in">window</span>.history()<br></code></pre></td></tr></table></figure><p>函数</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">back</span><span class="hljs-params">()</span></span><span class="hljs-comment">//加载history列表中的前一个url</span><br><span class="hljs-function"><span class="hljs-title">forward</span><span class="hljs-params">()</span></span><span class="hljs-comment">//加载history列表中的下一个url</span><br></code></pre></td></tr></table></figure><p>对应浏览器的回退与前进</p><h4 id="Location"><a href="#Location" class="headerlink" title="Location"></a>Location</h4><p>跳转与获取完整的url</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"> <span class="hljs-comment">//3秒跳转</span></span><br><span class="javascript"> <span class="hljs-built_in">document</span>.write(<span class="hljs-string">&quot;3秒跳转&quot;</span>);</span><br><span class="javascript"> <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;</span><br><span class="javascript">     location.href=<span class="hljs-string">&quot;https://www.baidu.com&quot;</span></span><br><span class="javascript"></span><br><span class="javascript"> &#125;,<span class="hljs-number">3000</span>)</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br></code></pre></td></tr></table></figure><h3 id="DOM对象"><a href="#DOM对象" class="headerlink" title="DOM对象"></a>DOM对象</h3><p>element对象的获取</p><p>getElementById() ：根据id属性值获取，返回单个Element对象 getElementsByTagName() ：根据标签名称获取，返回Element对象数组 getElementsByName() ：根据name属性值获取，返回Element对象数组 getElementsByClassName() ：根据class属性值获取，返回Element对象数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//根据id获取对象</span><br>    <span class="hljs-keyword">let</span> elementById = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;light&quot;</span>);<br>    <span class="hljs-comment">// alert(elementById);</span><br><br>    <span class="hljs-comment">//根据标签名获取对象</span><br>    <span class="hljs-keyword">var</span> elementsByTagName = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">&quot;div&quot;</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; elementsByTagName.length; i++) &#123;<br>        <span class="hljs-comment">// alert(elementsByTagName[i])</span><br>    &#125;<br><br><br>    <span class="hljs-comment">//根据name获取</span><br>    <span class="hljs-keyword">var</span> elementsByName = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">&quot;hobby&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; elementsByName.length; i++) &#123;<br>        <span class="hljs-comment">// alert(elementsByName[i])</span><br>    &#125;<br><br>    <span class="hljs-comment">//根据class获取</span><br>    <span class="hljs-keyword">var</span> elementsByClassName = <span class="hljs-built_in">document</span>.getElementsByClassName(<span class="hljs-string">&quot;cls&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; elementsByClassName.length; i++) &#123;<br>        alert(elementsByClassName[i])<br>    &#125;<br><br></code></pre></td></tr></table></figure><h4 id="对应属性的方法"><a href="#对应属性的方法" class="headerlink" title="对应属性的方法"></a>对应属性的方法</h4><p><a href="https://www.w3school.com.cn/jsref/dom_obj_all.asp">HTML DOM Element 对象 (w3school.com.cn)</a></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230130180933640.png" alt="image-20230130180933640"></p><p>常用方法</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">element.innerHTML=<span class="hljs-string">&quot;  &quot;</span><span class="hljs-comment">//修改文本</span><br>element<span class="hljs-selector-class">.style</span><span class="hljs-selector-class">.cololr</span><br>elemet.<span class="hljs-attribute">src</span>=<br></code></pre></td></tr></table></figure><p>举例</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">elementById.<span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;img/on.gif&quot;</span>;<br>elementsByName[i].<span class="hljs-attribute">checked</span>=<span class="hljs-literal">true</span><br>elementsByTagName[i].style.<span class="hljs-attribute">color</span>=<span class="hljs-string">&quot;red&quot;</span>;<br>elementsByTagName[i].<span class="hljs-attribute">innerHTML</span>=<span class="hljs-string">&quot;hahah&quot;</span>;<br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230130180853051.png" alt="image-20230130180853051"></p><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p><a href="https://www.w3school.com.cn/jsref/dom_obj_event.asp">HTML DOM 事件 (w3school.com.cn)</a></p><p>要想知道什么是事件监听，首先先聊聊什么是事件？ HTML 事件是发生在 HTML 元素上的“事情”。比如：页面上的 按钮被点击 、 鼠标移动到元素之上 、 按下键盘按键 等都是事件。 事件监听是JavaScript 可以在事件被侦测到时执行一段逻辑代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//第一种方式：使用内嵌的方式</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">on</span>(<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">&quot;点我&quot;</span>)<br>&#125;<br><span class="hljs-comment">//第二种：直接获取element对象，然后调用方法</span><br><span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;click&quot;</span>).onclick=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span>&#123;<br>    alert(<span class="hljs-string">&quot;我被点了&quot;</span>)<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常用事件"><a href="#常用事件" class="headerlink" title="常用事件"></a>常用事件</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230130184756500.png" alt="image-20230130184756500"></p><table><thead><tr><th><a href="https://www.w3school.com.cn/jsref/event_onmousemove.asp">mousemove</a></th><th>当指针在元素上方移动时，发生此事件。</th></tr></thead><tbody><tr><td><a href="https://www.w3school.com.cn/jsref/event_onmouseout.asp">mouseout</a></td><td>当指针移动到元素或其中的子元素上时，发生此事件。</td></tr><tr><td>focus</td><td>获取焦点的事件</td></tr></tbody></table><table><thead><tr><th><a href="https://www.w3school.com.cn/jsref/event_onfocusin.asp">focusin</a></th><th>在元素即将获得焦点时发生此事件</th></tr></thead><tbody><tr><td></td><td></td></tr></tbody></table><h4 id="案列-2"><a href="#案列-2" class="headerlink" title="案列"></a>案列</h4><p>表单验证模型</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xquery">&lt;form<span class="hljs-built_in"> id</span>=<span class="hljs-string">&quot;register&quot;</span> action=<span class="hljs-string">&quot;#&quot;</span> &gt;<br>    &lt;input type=<span class="hljs-string">&quot;text&quot;</span><span class="hljs-built_in"> name</span>=<span class="hljs-string">&quot;username&quot;</span> /&gt;<br>    <span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;提交&quot;</span>&gt;</span></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span></span><br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="javascript"><span class="xml">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;register&quot;</span>).onsubmit=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>)</span></span></span><span class="xquery">&#123;</span><br><span class="xquery">        <span class="hljs-keyword">return</span><span class="hljs-built_in"> true</span>;//返<span class="hljs-built_in">回true</span>，则表单会被提交，返<span class="hljs-built_in">回false</span>，则表单不提交</span><br><span class="xquery"></span><br><span class="xquery">    &#125;</span><span class="xml"></span><br><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br></code></pre></td></tr></table></figure><h4 id="完整案列"><a href="#完整案列" class="headerlink" title="完整案列"></a>完整案列</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;../Css/register.css&quot;</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;form-div&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;reg-content&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>欢迎注册<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>已有帐号？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">a</span> <span class="hljs-attr">href</span>=<span class="hljs-string">&quot;#&quot;</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg-form&quot;</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;#&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;get&quot;</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">table</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>用户名<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;username&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;username_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>用户名不太受欢迎<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>密码<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;password_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>密码格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">tr</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span>&gt;</span>手机号<span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">td</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;inputs&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;tel&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel&quot;</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;tel_err&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;err_msg&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;display: none&quot;</span>&gt;</span>手机号格式有误<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">td</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">tr</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">table</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;buttons&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">value</span>=<span class="hljs-string">&quot;注 册&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;reg_btn&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;clear&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//&lt;!--  用户名称的校验--&gt;</span></span><br><span class="javascript"><span class="hljs-comment">// 1.获取用户名</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> input = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username&quot;</span>);</span><br><span class="javascript"><span class="hljs-comment">//2.绑定onblur事件，失去焦点后校验</span></span><br><span class="javascript"></span><br><span class="javascript">input.onblur=checkname</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkname</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//  3.获取输入，并去除空格</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> name = input.value.trim();</span><br><span class="javascript">  <span class="hljs-comment">//4.校验用户名的长度是否合格</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> flag=name.length&gt;<span class="hljs-number">2</span> &amp;&amp; name.length&lt;<span class="hljs-number">4</span></span><br><span class="javascript">  <span class="hljs-keyword">if</span>(flag)&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username_err&quot;</span>).style.display=<span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;username_err&quot;</span>).style.display=<span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">return</span> flag;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//&lt;!--  密码名称的校验--&gt;</span></span><br><span class="javascript"><span class="hljs-comment">// 1.获取密码名</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> inputpw = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;password&quot;</span>);</span><br><span class="javascript"><span class="hljs-comment">//2.绑定onblur事件，失去焦点后校验</span></span><br><span class="javascript"></span><br><span class="javascript">inputpw.onblur=checkpassword</span><br><span class="javascript"></span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checkpassword</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//  3.获取输入，并去除空格</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> name = inputpw.value.trim();</span><br><span class="javascript">  <span class="hljs-comment">//4.校验密码名的长度是否合格</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> flag=name.length&gt;<span class="hljs-number">2</span> &amp;&amp; name.length&lt;<span class="hljs-number">4</span>;</span><br><span class="javascript">  <span class="hljs-keyword">if</span>(flag)&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;password_err&quot;</span>).style.display=<span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;password_err&quot;</span>).style.display=<span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  &#125;</span><br><span class="javascript">  <span class="hljs-keyword">return</span> flag;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//&lt;!--  电话号码名称的校验--&gt;</span></span><br><span class="javascript"><span class="hljs-comment">// 1.获取电话号码名</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> inputtel = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;tel&quot;</span>);</span><br><span class="javascript"><span class="hljs-comment">//2.绑定onblur事件，失去焦点后校验</span></span><br><span class="javascript"></span><br><span class="javascript">inputtel.onblur=checktel</span><br><span class="javascript">        <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">checktel</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript"><span class="hljs-comment">//  3.获取输入，并去除空格</span></span><br><span class="javascript">  <span class="hljs-keyword">var</span> name = inputtel.value.trim();</span><br><span class="javascript">  <span class="hljs-comment">//4.校验电话号码的长度是否合格</span></span><br><span class="javascript"><span class="hljs-keyword">var</span>  flag=name.length&gt;<span class="hljs-number">2</span> &amp;&amp; name.length&lt;<span class="hljs-number">4</span>;</span><br><span class="javascript">  <span class="hljs-keyword">if</span>(flag)&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;tel_err&quot;</span>).style.display=<span class="hljs-string">&#x27;none&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  &#125;<span class="hljs-keyword">else</span>&#123;</span><br><span class="javascript">    <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;tel_err&quot;</span>).style.display=<span class="hljs-string">&#x27;&#x27;</span>;</span><br><span class="javascript"></span><br><span class="javascript">  &#125;</span><br><span class="javascript"></span><br><span class="javascript">  <span class="hljs-keyword">return</span> flag;</span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"><span class="hljs-comment">//表单提交验证</span></span><br><span class="javascript"><span class="hljs-keyword">var</span> commit = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">&quot;reg-form&quot;</span>);</span><br><span class="javascript"></span><br><span class="javascript">commit.onsubmit=<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="javascript">  <span class="hljs-keyword">var</span> flag=checktel()&amp;&amp;checkpassword()&amp;&amp;checkname();</span><br><span class="javascript">  <span class="hljs-keyword">return</span> flag;</span><br><span class="javascript"></span><br><span class="javascript">&#125;</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/image-20230203175110150.png" alt="image-20230203175110150"></p><p>简单入门</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"></span><br><span class="javascript">    <span class="hljs-keyword">var</span> reg=<span class="hljs-regexp">/^\w&#123;4,5&#125;$/</span>;<span class="hljs-comment">//匹配规则</span></span><br><span class="javascript">    <span class="hljs-keyword">var</span> a=<span class="hljs-string">&quot;abc&quot;</span>;<span class="hljs-comment">//代匹配的字符串</span></span><br><span class="javascript">    b=reg.test(a) ;</span><br><span class="javascript">    alert(b);</span><br><span class="javascript"></span><br><span class="javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用正则优化表单验证</p><p>用户名</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//5.正则优化，</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">reg</span>=/^\w&#123;6,12&#125;$/<br><span class="hljs-keyword">var</span> flag=<span class="hljs-keyword">reg</span>.<span class="hljs-keyword">test</span>(password)<br></code></pre></td></tr></table></figure><p>密码</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//5.正则优化，</span><br><span class="hljs-keyword">var</span> <span class="hljs-keyword">reg</span>=/^\w&#123;6,12&#125;$/<br><span class="hljs-keyword">var</span> flag=<span class="hljs-keyword">reg</span>.<span class="hljs-keyword">test</span>(password)<br></code></pre></td></tr></table></figure><p>电话号码</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-comment">//5.正则优化,第一位是1，一共11位</span><br>  <span class="hljs-keyword">var</span> <span class="hljs-keyword">reg</span>=/^[1]\<span class="hljs-keyword">d</span>&#123;10&#125;$/<br>  <span class="hljs-keyword">var</span> flag=<span class="hljs-keyword">reg</span>.<span class="hljs-keyword">test</span>(tel)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>破解wifi密码</title>
    <link href="/2022/03/10/WiFi%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/"/>
    <url>/2022/03/10/WiFi%E5%AF%86%E7%A0%81%E7%A0%B4%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h3 id="命令集合"><a href="#命令集合" class="headerlink" title="命令集合"></a>命令集合</h3><p>​        airmon-ng//查看是否有无线网卡<br>​        airmon-ng start wlan0//开启无线网口的监听模式<br>​        airodump-ng waln0mon //扫描环境中的网络<br>​        airodump-ng -c 4 –bssid mac地址 -w hach wlan0mon//抓取握手包<br>​        aircrack-ng -a2 -b mac地址 -w 密码字典文件.txt 抓包资源.cap //进行密码破解<br>​        aireplay-ng -0 10 -a mac地址 -c 对方端口地址 wlan0mon \踢对方下线</p><h3 id="查看虚拟机无线网口wlan0"><a href="#查看虚拟机无线网口wlan0" class="headerlink" title="查看虚拟机无线网口wlan0"></a>查看虚拟机无线网口wlan0</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220430212434.png"></p><h3 id="开启无线网口得监听功能"><a href="#开启无线网口得监听功能" class="headerlink" title="开启无线网口得监听功能"></a>开启无线网口得监听功能</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220430212507.png"></p><h3 id="查看监听功能得端口wlan0mon"><a href="#查看监听功能得端口wlan0mon" class="headerlink" title="查看监听功能得端口wlan0mon"></a>查看监听功能得端口wlan0mon</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220430212644.png"></p><h3 id="扫描附近得网络"><a href="#扫描附近得网络" class="headerlink" title="扫描附近得网络"></a>扫描附近得网络</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220501160915.png"></p><h3 id="对要进行得网络进行抓包（抓包成功后得到cap文件）"><a href="#对要进行得网络进行抓包（抓包成功后得到cap文件）" class="headerlink" title="对要进行得网络进行抓包（抓包成功后得到cap文件）"></a>对要进行得网络进行抓包（抓包成功后得到cap文件）</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220501160747.png"></p><h4 id="无法成功抓包得应对方法（踢对方得下线后重新连接抓包）"><a href="#无法成功抓包得应对方法（踢对方得下线后重新连接抓包）" class="headerlink" title="无法成功抓包得应对方法（踢对方得下线后重新连接抓包）"></a>无法成功抓包得应对方法（踢对方得下线后重新连接抓包）</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220501162021.png"></p><h3 id="对抓包进行破解（跑字典））"><a href="#对抓包进行破解（跑字典））" class="headerlink" title="对抓包进行破解（跑字典））"></a>对抓包进行破解（跑字典））</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220501160538.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多版本python包的安装</title>
    <link href="/2022/03/10/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpython%E5%AE%89%E8%A3%85%E5%8C%85/"/>
    <url>/2022/03/10/%E4%B8%8D%E5%90%8C%E7%89%88%E6%9C%ACpython%E5%AE%89%E8%A3%85%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><h4 id="第一步-找到想要安装包的python版本的scripts文件夹"><a href="#第一步-找到想要安装包的python版本的scripts文件夹" class="headerlink" title="第一步 找到想要安装包的python版本的scripts文件夹"></a>第一步 找到想要安装包的python版本的scripts文件夹</h4><h4 id="第二步-将cmd的路径跳转到该文件夹目录下"><a href="#第二步-将cmd的路径跳转到该文件夹目录下" class="headerlink" title="第二步 将cmd的路径跳转到该文件夹目录下"></a>第二步 将cmd的路径跳转到该文件夹目录下</h4><h4 id="第三步-输入安装命令"><a href="#第三步-输入安装命令" class="headerlink" title="第三步 输入安装命令"></a>第三步 输入安装命令</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">pip <span class="hljs-built_in">int</span>all <br></code></pre></td></tr></table></figure><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220422121618.png"></p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre><code class="hljs">pip install -t D:\python3.5(32bit)\Lib\site-packages -i https://pypi.douban.com/simple PyInstaller</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>图床的搭建</title>
    <link href="/2022/03/10/%E5%9B%BE%E5%BA%8A/"/>
    <url>/2022/03/10/%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h2 id="什么是图床"><a href="#什么是图床" class="headerlink" title="什么是图床"></a>什么是图床</h2><p>单独存储图片的服务器</p><h2 id="图床的搭建-gitee-PicGo"><a href="#图床的搭建-gitee-PicGo" class="headerlink" title="图床的搭建(gitee+PicGo)"></a>图床的搭建(gitee+PicGo)</h2><p>1.建立仓库<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/%E6%96%B0%E5%BB%BA%E4%BB%93%E5%BA%93.png"></p><p>2.下载PicGO <a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/Picgo.png"></p><p>注意：需要根据自己电脑选择对应版本的安装包。<br>例如window64位系统<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220222193502.png"></p><p>3.执行安装包，直接选择下一步</p><p>4.配置<br>在插件设置中安装gitte 和gitee uploader</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220222194336.png"></p><p>安装完成后重启软件，然后点击到图床设计那一栏，再选Gitee图床</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/%E9%85%8D%E7%BD%AE.png"></p><p>ower:填写自己的gitee账户的空间地址（只要求后面部分）<br>repo:填写自己的仓库名<br>token：自己的gitee仓库私人令牌（需要自己操作生成）<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220222200022.png"></p><p>其他的可以不用填，然后点击将其设为默认配置</p><p>5.上传传图片测试<br>点击上传，上传完成后，图片会出现在相册中</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220222201244.png"></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>2022/2/22</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>用户管理系统</title>
    <link href="/2022/03/10/%E5%AD%A6%E7%94%9F%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/03/10/%E5%AD%A6%E7%94%9F%E7%94%A8%E6%88%B7%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<p>import tkinter as tk<br>windows=tk.Tk()</p><p>windows.title=(‘学生用户管理系统’)<br>windows.geometry(‘800x400’)<br>l=tk.lable(windows,text=’hello world’,bg=’green’,font=(‘Apial’,12),width=15,height=15)<br>l.pack()<br>window.mainlop()</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>知识碎片</title>
    <link href="/2022/03/10/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/"/>
    <url>/2022/03/10/%E5%A5%87%E6%80%AA%E7%9A%84%E7%9F%A5%E8%AF%86/</url>
    
    <content type="html"><![CDATA[<h2 id="20220417"><a href="#20220417" class="headerlink" title="20220417"></a>20220417</h2><h3 id="爱情三角论"><a href="#爱情三角论" class="headerlink" title="爱情三角论"></a>爱情三角论</h3><p>美国心理学家斯滕伯格认为爱情由三个基本成分组成：激情，亲密和承诺。激情是爱情中的性欲成分，是情绪上的着迷；亲密是指爱情关系中能够引起的温暖体验；承诺指维持关系的决定期或担保。</p><h3 id="随意后注意"><a href="#随意后注意" class="headerlink" title="随意后注意"></a>随意后注意</h3><p>是注意的一种形式，指有自觉目的但不需要意志努力的注意，即服从当前的活动目的与任务，有能节省意志的努力，因此对长期，持续的任务特别有利，培养随意后注意在于发展活动本身的直接兴趣</p><h3 id="联觉现象"><a href="#联觉现象" class="headerlink" title="联觉现象"></a>联觉现象</h3><p>即对一种感官的刺激作用触发另外一种感觉现象。例红，橙，黄会使人感到温暖，蓝，青，绿使人感觉寒冷</p>]]></content>
    
    
    
    <tags>
      
      <tag>其他</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>wifi密码</title>
    <link href="/2022/03/10/%E7%94%B5%E8%84%91%E6%9F%A5%E7%9C%8BWIFI%E5%AF%86%E7%A0%81/"/>
    <url>/2022/03/10/%E7%94%B5%E8%84%91%E6%9F%A5%E7%9C%8BWIFI%E5%AF%86%E7%A0%81/</url>
    
    <content type="html"><![CDATA[<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>cmd命令行查看法</p><pre><code class="hljs">netsh wlan show profilesnetsh wlan show profiles WiFi名称 key=clear</code></pre><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220420165342.png"><br>###方法二<br>网络共享中心查看法<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220420165140.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>爬取豆瓣读书实列</title>
    <link href="/2022/03/01/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E8%AF%BB%E4%B9%A6%E5%AE%9E%E5%88%97/"/>
    <url>/2022/03/01/%E7%88%AC%E5%8F%96%E8%B1%86%E7%93%A3%E8%AF%BB%E4%B9%A6%E5%AE%9E%E5%88%97/</url>
    
    <content type="html"><![CDATA[<h2 id="以绘画类图书为例"><a href="#以绘画类图书为例" class="headerlink" title="以绘画类图书为例"></a>以绘画类图书为例</h2><p><a href="https://book.douban.com/tag/%E7%94%B5%E5%BD%B1">https://book.douban.com/tag/%E7%94%B5%E5%BD%B1</a></p><h3 id="第一步-导人requests库"><a href="#第一步-导人requests库" class="headerlink" title="第一步 导人requests库"></a>第一步 导人requests库</h3><pre><code class="hljs">import requests</code></pre><h3 id="第二步-模拟浏览器的请求头"><a href="#第二步-模拟浏览器的请求头" class="headerlink" title="第二步 模拟浏览器的请求头"></a>第二步 模拟浏览器的请求头</h3><pre><code class="hljs">headers=&#123;&#39;user-agent&#39;:&#39;Mozilla/5.0&#39;&#125;</code></pre><h3 id="第三部-与链接建立链接"><a href="#第三部-与链接建立链接" class="headerlink" title="第三部 与链接建立链接"></a>第三部 与链接建立链接</h3><pre><code class="hljs">r = requests.get(url,headers=headers)</code></pre><h3 id="打印爬取页面的内容"><a href="#打印爬取页面的内容" class="headerlink" title="打印爬取页面的内容"></a>打印爬取页面的内容</h3><pre><code class="hljs">print(r.text)</code></pre><h3 id="使用浏览器插件xpath-helper获取提取信息位置"><a href="#使用浏览器插件xpath-helper获取提取信息位置" class="headerlink" title="使用浏览器插件xpath helper获取提取信息位置"></a>使用浏览器插件xpath helper获取提取信息位置</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220302172400.png"></p><h3 id="解析html页面"><a href="#解析html页面" class="headerlink" title="解析html页面"></a>解析html页面</h3><pre><code class="hljs">from lxml import etrees=etree.HTML(r.text)s.xpath(&#39;//h2/a&#39;)</code></pre><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220303192349.png"></p><h3 id="显示提取关键字内容"><a href="#显示提取关键字内容" class="headerlink" title="显示提取关键字内容"></a>显示提取关键字内容</h3><pre><code class="hljs">for elem in s.path(&#39;//path/a&#39;):    print(elem.text.strip())</code></pre><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220303192441.png"><br>函数strip： <a href="https://www.runoob.com/python/att-string-strip.html">https://www.runoob.com/python/att-string-strip.html</a></p><h3 id="遍历打印所有的文本内容地址"><a href="#遍历打印所有的文本内容地址" class="headerlink" title="遍历打印所有的文本内容地址"></a>遍历打印所有的文本内容地址</h3><pre><code class="hljs">for elem in s.xpath(&#39;//h2/a&#39;):    print(elem.itertext())</code></pre><p>*函数itertext:从元素中提取文本，剥离标签<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220303193129.png"></p><h3 id="连接文本，去掉空格和换行符"><a href="#连接文本，去掉空格和换行符" class="headerlink" title="连接文本，去掉空格和换行符"></a>连接文本，去掉空格和换行符</h3><pre><code class="hljs">for elem in s.xpath(&#39;//h2/a&#39;):    print(&#39;&#39;.join(elem.itertext()).replace(&#39; &#39;,&#39;&#39;)/replace(&#39;\n&#39;,&#39;&#39;))</code></pre><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220303193611.png"></p><h3 id="自动翻页爬取"><a href="#自动翻页爬取" class="headerlink" title="自动翻页爬取"></a>自动翻页爬取</h3><p><strong>方法一</strong><br>经过观察发现，当实现翻页时，各个页面的url出现了规律性的变化，  真个链接只有start后面的数字在发生变法，我们就通过函数来实现按该链接的规律性变化，然后实现翻页<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220308213655.png"><br><strong>方法二</strong><br>可以利用当前页面中存在下一页的按钮进行翻页，将下一页按钮的链接拼接到豆瓣主页后面，形成新的下一页链接<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220308214223.png"></p><h1 id="注意事项："><a href="#注意事项：" class="headerlink" title="注意事项："></a>注意事项：</h1><p>在主板块下，抓取对应子板块内容，需要在xpath路径前加上一点。<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220306100804.png"></p><hr><h3 id="保存爬取内容到本地"><a href="#保存爬取内容到本地" class="headerlink" title="保存爬取内容到本地"></a>保存爬取内容到本地</h3><p>使用with open 函数对csv文件进行读写，将book_info的数据列表写入文件中，writerows多行写入<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220308220356.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>环境变量的位置</title>
    <link href="/2022/02/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E4%BD%8D%E7%BD%AE/"/>
    <url>/2022/02/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%B8%B8%E7%94%A8%E8%AE%BE%E7%BD%AE%E4%BD%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>系统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计算机操作系统</title>
    <link href="/2022/02/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <url>/2022/02/18/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
    
    <content type="html"><![CDATA[<h2 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h2><h3 id="操作系统的作用"><a href="#操作系统的作用" class="headerlink" title="操作系统的作用"></a>操作系统的作用</h3><ul><li>作为用户与计算机硬件系统之间的接口。</li><li>作为计算机资源的管理器</li><li>实现对计算机资源的抽象<h3 id="推动计算机系统发展的主要动力"><a href="#推动计算机系统发展的主要动力" class="headerlink" title="推动计算机系统发展的主要动力"></a>推动计算机系统发展的主要动力</h3></li><li>不断提高计算机资源的利用率</li><li>方便用户</li><li>硬件的不断更新迭代</li><li>计算机结构的不断发展</li><li>不断有新的应用需求<h3 id="计算机系统的发展路程"><a href="#计算机系统的发展路程" class="headerlink" title="计算机系统的发展路程"></a>计算机系统的发展路程</h3>未配置的操作系统——》单通道批处理系统——》多通道批处理系统——》分时系统——》实时系统——》微分操作系统</li></ul><h3 id="操作系统的基本特征"><a href="#操作系统的基本特征" class="headerlink" title="操作系统的基本特征"></a>操作系统的基本特征</h3><ul><li>并发</li><li>共享</li><li>虚拟</li><li>异步</li></ul><h3 id="操作系统的主要功能"><a href="#操作系统的主要功能" class="headerlink" title="操作系统的主要功能"></a>操作系统的主要功能</h3><ul><li>处理机管理</li><li>存储器管理</li><li>设备管理</li><li>文件管理</li><li>操作系统与用户之间的接口</li><li>发展操作系统的新功能<h3 id="os结构设计"><a href="#os结构设计" class="headerlink" title="os结构设计"></a>os结构设计</h3></li><li>C/S（客户/服务器模式)组成<ul><li>1.客服机 2.服务器 3.网络系统 </li></ul></li><li>客户/服务器之间的交付<ul><li>客服发送请求消息</li><li>服务器接受消息</li><li>服务器回送消息</li><li>客户机接受消息</li></ul></li><li>客户/服务器的优点<ul><li>数据的分布存储和处理</li><li>便于集中管理</li><li>灵活性和可扩充性</li><li>易于改变应用软件</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>计算机基础知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>python网络爬虫</title>
    <link href="/2022/02/18/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/"/>
    <url>/2022/02/18/python%E7%BD%91%E7%BB%9C%E7%88%AC%E8%99%AB/</url>
    
    <content type="html"><![CDATA[<h3 id="爬虫介绍"><a href="#爬虫介绍" class="headerlink" title="爬虫介绍"></a>爬虫介绍</h3><pre><code class="hljs">用于自动收集网页上数据的一种自动化脚本，数据包括文字，图片，视频</code></pre><h3 id="万物皆可API"><a href="#万物皆可API" class="headerlink" title="万物皆可API"></a>万物皆可API</h3><p>API:程序之间的接口</p><h3 id="编程环境安装"><a href="#编程环境安装" class="headerlink" title="编程环境安装"></a>编程环境安装</h3><pre><code class="hljs">requests库的安装：以管理员权限打开管理员控制台（cmd)然后输入命令 pip install requests</code></pre><h4 id="测试requests库是否安装成功"><a href="#测试requests库是否安装成功" class="headerlink" title="测试requests库是否安装成功"></a>测试requests库是否安装成功</h4><pre><code class="hljs">打开python的ide输入以下命令：    import requets    r = requests.get(&quot;http://www.baidu.com&quot;)    print(r.status_code)然后运行命令，显示200，则表示requests库安装成功</code></pre><h4 id="requests库的主要方法"><a href="#requests库的主要方法" class="headerlink" title="requests库的主要方法"></a>requests库的主要方法</h4><pre><code class="hljs">requests.get(url):含有浏览器返回的所有信息    r=requests.get(url)    r.status_code //返回状态，200表述连接成功，404表述连接失败    r.text //返回url对应的页面内容    r.encoding 返回响应内编码方式    r.apparent_encoding 从内容这分出析响应的编码方式    r.content 以二进制返回网页内容    r.raise_for_status() 异常处理，如果状态不是200则会引发异常requests.head()requests.post()requests.put()requests.patch()requests.delete()requests.request(method,url,**kwargs)method:get,post,put,patch,delete**kwarges:传输数据</code></pre><h3 id="网页爬取通用框架"><a href="#网页爬取通用框架" class="headerlink" title="网页爬取通用框架"></a>网页爬取通用框架</h3><pre><code class="hljs">import requeststry: r=requests.request(get,url,timeout=30) r.raise_for_status() r.encoding=r.apprent_encoding  return r.textexcept:    return &quot;error&quot;</code></pre><h3 id="http协议"><a href="#http协议" class="headerlink" title="http协议"></a>http协议</h3><p>超文本传输协议<br>提取服务器信息：get head<br>更新服务器操作： post put(覆盖原有信息) patch（更新局部信息）<br>delete.<br>详见：<a href="https://www.runoob.com/http/http-status-codes.html">https://www.runoob.com/http/http-status-codes.html</a></p><h3 id="cookie"><a href="#cookie" class="headerlink" title="cookie"></a>cookie</h3><p>是一种存储在用户本地终端的加密数据<br>作用：辨别用户身份</p><h3 id="robots协议"><a href="#robots协议" class="headerlink" title="robots协议"></a>robots协议</h3><p>用于网络爬虫排除标准<br>告知所有的网络爬虫爬取资源的权限</p><h3 id="模拟浏览器向服务器发送请求（规避浏览器来源审查）"><a href="#模拟浏览器向服务器发送请求（规避浏览器来源审查）" class="headerlink" title="模拟浏览器向服务器发送请求（规避浏览器来源审查）"></a>模拟浏览器向服务器发送请求（规避浏览器来源审查）</h3><h4 id="查看我们发给服务器的headers"><a href="#查看我们发给服务器的headers" class="headerlink" title="查看我们发给服务器的headers"></a>查看我们发给服务器的headers</h4><pre><code class="hljs">r.request.headers</code></pre><p>1.构造我们要模拟浏览器的headers键值对.  </p><pre><code class="hljs">kv = &#123;&#39;user-agent&#39;:&#39;Mozilla/5.0&#39;&#125;</code></pre><p>2.修改headers的user-agent字段</p><pre><code class="hljs">r =requests.get(url,headers=kv&#125;</code></pre><h3 id="关键字提交"><a href="#关键字提交" class="headerlink" title="关键字提交"></a>关键字提交</h3><pre><code class="hljs">kv=&#123;:&#125;r=requsts.get(url,params=kv)</code></pre><h2 id="保存文件"><a href="#保存文件" class="headerlink" title="保存文件"></a>保存文件</h2><pre><code class="hljs">with open(path,&#39;wb&#39;) as ff.write(r.content)f.cloce</code></pre><h2 id="BeautifulSoup"><a href="#BeautifulSoup" class="headerlink" title="BeautifulSoup"></a>BeautifulSoup</h2><h4 id="beautifulsoup的安装"><a href="#beautifulsoup的安装" class="headerlink" title="beautifulsoup的安装"></a>beautifulsoup的安装</h4><p>以管理员权限打开cmd ，然后输入一下命令</p><pre><code class="hljs">pip install beautifulsoup4</code></pre><h4 id="beatifulsoup的使用"><a href="#beatifulsoup的使用" class="headerlink" title="beatifulsoup的使用"></a>beatifulsoup的使用</h4><p>导入beautifulsoup库</p><pre><code class="hljs">from bs4 import BeautifulSoup</code></pre><p>对页面内容进行解析</p><pre><code class="hljs">demo=r.textsoup=BeautifulSoup(demo,&#39;html.parser&#39;)</code></pre><p>prettify的使用</p><pre><code class="hljs">soup.prettiy()//为html文本增加换行符，分行显示</code></pre><p>其中html.parser为html页面的解析器，还可以为lxml,xml,html5lib</p><p>获取html页面对应标签的内容</p><pre><code class="hljs">soup.asoup.a.string//返回a标签中的字符串类容soup.divsoup.body</code></pre><p>获取对应标签的名字</p><pre><code class="hljs">soup.a.namesoup.parent.name</code></pre><p>查看标签的属性</p><pre><code class="hljs">tag=soup.atag.attrs//获取整个标签属性字典tag.attrs[&#39;class&#39;]//查看标签a的类名tag.attrs[&#39;id&#39;]tag.attrs[&#39;herf&#39;]//查看标签中的链接</code></pre><p>查看子节点</p><pre><code class="hljs">soup.body.contents//查看body中所有儿子节点，将所有的儿子节点存入列表中soup.body.children //循环遍历所有的儿子节点soup.descendants  //用于遍历所有子孙节点</code></pre><p>查看父亲节点</p><pre><code class="hljs">soup.body.parentsoup.body.parents//用于遍历所有先辈节点</code></pre><p>查看平行标签</p><p>查看平行标签的下一个标签</p><pre><code class="hljs">soup.a.next_sibling//查看a标签的下一个标签</code></pre><p>查看平行标签的上一个标签</p><pre><code class="hljs">soup.a.previous_sibing//查看a标签的上一个标签</code></pre><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220224220339.png"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="信息标记的三种方式"><a href="#信息标记的三种方式" class="headerlink" title="信息标记的三种方式"></a>信息标记的三种方式</h2><h3 id="xml（与html相似）"><a href="#xml（与html相似）" class="headerlink" title="xml（与html相似）"></a>xml（与html相似）</h3><p>主要用来internet上的信息交互与传递</p><h3 id="jason-键值对-含有双引号）"><a href="#jason-键值对-含有双引号）" class="headerlink" title="jason(键值对,含有双引号）"></a>jason(键值对,含有双引号）</h3><p>主要应用于云端和节点的信息通信<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220228201941.png"><br>可以在键值对中嵌套键值对</p><h3 id="Yaml-键值对形式，但无双引号）"><a href="#Yaml-键值对形式，但无双引号）" class="headerlink" title="Yaml(键值对形式，但无双引号）"></a>Yaml(键值对形式，但无双引号）</h3><p>各类系统的配置文件<br>利用缩进来表示所属关系<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220228202037.png"><br>利用减号表述所属关系<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220228202201.png"><br>用竖线表示整块数据<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220228202330.png"></p><h2 id="信息提取的一般方法"><a href="#信息提取的一般方法" class="headerlink" title="信息提取的一般方法"></a>信息提取的一般方法</h2><h3 id="形式解析与搜索方法"><a href="#形式解析与搜索方法" class="headerlink" title="形式解析与搜索方法"></a>形式解析与搜索方法</h3><h4 id="方法find-all的使用"><a href="#方法find-all的使用" class="headerlink" title="方法find_all的使用"></a>方法find_all的使用</h4><pre><code class="hljs">soup.find_all(&#39;a&#39;)//查找所有的a标签,默认查找所有的子孙soup.find_all(&#39;a&#39;，recursive=false)//查找所有的a标签,查找子节点soup.find_all(&#39;a&#39;,&#39;b&#39;)//查找a和b标签for tag in soup.find_all(True):    print(tag.name)//查看html页面的所有内容for tag in soup.find_all(re.compile(&#39;b&#39;)):    print(tag.name)//查看html页面的所有以b开头的内容sou.find_all(&#39;a&#39;,&#39;student&#39;)//查找a标签中包含student属性的标签soup.find_all(id=&#39;link1&#39;) //查看标签中属性包含id=&#39;link1&#39;soup.find_all(string =re.compile (&quot;python&quot;))//检索所有包含字符串python的字符串</code></pre><h2 id="正则表达式（表示了一组字符串的特征或模式）"><a href="#正则表达式（表示了一组字符串的特征或模式）" class="headerlink" title="正则表达式（表示了一组字符串的特征或模式）"></a>正则表达式（表示了一组字符串的特征或模式）</h2><h3 id="导入正则表达式库"><a href="#导入正则表达式库" class="headerlink" title="导入正则表达式库"></a>导入正则表达式库</h3><pre><code class="hljs">import re</code></pre><h3 id="常用正则"><a href="#常用正则" class="headerlink" title="常用正则"></a>常用正则</h3><pre><code class="hljs">py+//匹配以p开头且后面有一个或无穷多个y的字符串</code></pre><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220310195658.png"></p><h3 id="常用操作符"><a href="#常用操作符" class="headerlink" title="常用操作符"></a>常用操作符</h3><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220310195430.png"><br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220310195518.png"></p><pre><code class="hljs">re.sub(pattern,repl,string)//将string中符合pattern的字符串使用repl进行替换re.finiditer(pattern,string) //将匹配到的字符串整成一个可以循环的列表，使用for循环可以取出其中的元素re.compile(pattern) 将正则表达式的字符串形式编译成正则表达式对象martch.group(0) //获得匹配后的字符串martch.start() //获取匹配到的开始位置martch.end() //匹配的结束位置marth.spand() //匹配文本的开始与结束martch.string //待匹配的文本martch.re //获取匹配的正则表达式martch.pos //获取开始匹配的位置martch.endpos //获取结束匹配的位置</code></pre><h4 id="面向对象re库用法"><a href="#面向对象re库用法" class="headerlink" title="面向对象re库用法"></a>面向对象re库用法</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220310201212.png"><br>经过一次编译，以后都可以直接使用，以此加快程序的运行    </p><p>###re函数的主要功能</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220310195121.png"></p><h3 id="re库的贪婪匹配和最小匹配"><a href="#re库的贪婪匹配和最小匹配" class="headerlink" title="re库的贪婪匹配和最小匹配"></a>re库的贪婪匹配和最小匹配</h3><p>re库默认的是贪婪匹配，返回匹配到的最长的字符串<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220310203514.png"></p><hr><h2 id="lxml库"><a href="#lxml库" class="headerlink" title="lxml库"></a>lxml库</h2><p>官方文档 <a href="https://www.w3cschool.cn/lxml/">https://www.w3cschool.cn/lxml/</a></p><h2 id="Scapy爬虫框架-5-2）"><a href="#Scapy爬虫框架-5-2）" class="headerlink" title="Scapy爬虫框架(5+2）"></a>Scapy爬虫框架(5+2）</h2><h4 id="Scrapy的安装"><a href="#Scrapy的安装" class="headerlink" title="Scrapy的安装"></a>Scrapy的安装</h4><pre><code class="hljs">pip install Scrapy</code></pre><h4 id="Scrapy的框架"><a href="#Scrapy的框架" class="headerlink" title="Scrapy的框架"></a>Scrapy的框架</h4><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220316195813.png"></p><p>Spider</p><ul><li>解析Downloader返回的响应(Response)</li><li>产生爬取项(scraped item)</li><li>产生额外的爬取请求（Requests)</li></ul><p>Engine </p><ul><li>控制所有模块之间的数据流</li><li>根据条件触发事件</li><li>不需要用户修改</li></ul><p>DownLoader</p><ul><li>根据请求下载网页</li><li>不需要用户修改</li></ul><p>Scheduler </p><ul><li>不需要用户修改</li><li>对所有请求进行调度管理</li></ul><h4 id="Scapy常用命令"><a href="#Scapy常用命令" class="headerlink" title="Scapy常用命令"></a>Scapy常用命令</h4><p>格式：scrapy command options args</p><pre><code class="hljs">scrapy startprojects name dir /创建一个工程scrapy genspider name domain //创建一个爬虫scrapy seting options //获取爬虫的配置信息scrapy crawl spider //运行一个爬虫scrapy list // 列出工程中所有的爬虫scrapy shell url //启动URL调试命令行</code></pre><h4 id="Scrapy基础"><a href="#Scrapy基础" class="headerlink" title="Scrapy基础"></a>Scrapy基础</h4><p>第一步：创建scrapy项目</p><p>在自己创建存储项目的文件夹内，按住shift然后右键，选择打开powershell 命令台，前面的两个单词是创建项目固定的，最后一个单词是项目名称</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220317211436.png"><br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220317212010.png"></p><pre><code class="hljs">scrapy startproject python123demo</code></pre><p>第二步：产生demo.py<br>继续在命令台上输入 scrapy genspider python123.io ,前两个单词固定，后面是爬取页面的原始地址，这个可以在创建demo后，修改爬取网页的地址<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220317212221.png"><br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220317212043.png"></p><p>第三步：修改demo</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220317213550.png"></p><p>第四步：运行爬虫<br>继续在命令台输入 scrapy crawl demo<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220317212523.png"></p><p>结果：<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220317213244.png"></p><h4 id="yield生成器"><a href="#yield生成器" class="headerlink" title="yield生成器"></a>yield生成器</h4><ul><li>生成器是一个不断产生值的函数</li><li>包含yild语句的函数是一个生成器</li><li>生成器每次产生一个值（yield语句），函数被冻结，被唤醒后在产生一个值，唤醒后还是从上一个执行的位置开始执行</li><li>经常与循环搭配使用<h4 id="使用实列"><a href="#使用实列" class="headerlink" title="使用实列"></a>使用实列</h4>  def gen(n):<pre><code class="hljs">  for i in range(n):      yield i**2</code></pre>  for i in gen(5):<pre><code class="hljs">      print(i,&quot;&quot;,end=&quot;&quot;)</code></pre>  结果： 0 1 4 9 16</li></ul><p>生成器的优点（相比与普通的列表返回方法）</p><ul><li>更快的响应速度</li><li>更节省存储空间（每次只需要一个存储空间）</li><li>使用更加灵活</li></ul><h4 id="爬虫的生成器写法"><a href="#爬虫的生成器写法" class="headerlink" title="爬虫的生成器写法"></a>爬虫的生成器写法</h4><pre><code class="hljs">for url in start_urls:        yield scrapy.Request(url=url,callback=self.parse)</code></pre><h4 id="scrapy爬虫的使用步骤"><a href="#scrapy爬虫的使用步骤" class="headerlink" title="scrapy爬虫的使用步骤"></a>scrapy爬虫的使用步骤</h4><p>步骤一：创建一个工程和spider模板<br>步奏二:编写spider<br>步骤三： 编写item pipecline<br>步骤四： 优化配置策略</p><h5 id="Scrapy爬虫的数据类型"><a href="#Scrapy爬虫的数据类型" class="headerlink" title="Scrapy爬虫的数据类型"></a>Scrapy爬虫的数据类型</h5><p>Ruests类 </p><pre><code class="hljs">class scrapy.http.Request()</code></pre><table><thead><tr><th>.url</th><th>.method</th><th>.headers</th><th>.body</th><th>.meta</th><th>.copy</th></tr></thead><tbody><tr><td>requests对应请求的位置</td><td>对应的请求方法</td><td>字典类型的请求头</td><td>内容的主体</td><td>用户添加的拓展信息</td><td>复制该请求</td></tr></tbody></table><p>Response类  </p><pre><code class="hljs">class scrapy.http.Response()</code></pre><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220321212306.png"></p><p>Item类 </p><pre><code class="hljs"> class scrapy.http.Response()</code></pre><h5 id="Css-selector"><a href="#Css-selector" class="headerlink" title="Css-selector"></a>Css-selector</h5><pre><code class="hljs">&lt;HTML&gt;.CSS(&#39;a::attr(herf)&#39;).extract()</code></pre>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据可视化</title>
    <link href="/2022/02/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/"/>
    <url>/2022/02/18/%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="数据分析软件"><a href="#数据分析软件" class="headerlink" title="数据分析软件"></a>数据分析软件</h2><h3 id="python的安装"><a href="#python的安装" class="headerlink" title="python的安装"></a>python的安装</h3><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>在官方网站下载 <a href="https://www.python.org/">https://www.python.org/</a></p><p>  <img src="/imgs/python.png" alt="avatar"></p><h4 id="第二步：点击exe执行安装"><a href="#第二步：点击exe执行安装" class="headerlink" title="第二步：点击exe执行安装"></a>第二步：点击exe执行安装</h4><p>注意将下面连个选项勾上<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220314215708.png"></p><p>手动配置环境变量</p><p>1.打开系统高级设置<br>桌面上找到我的电脑图标，然后右键，选择属性，然后找到系统高级设置，选择高级，然后点击右下方的环境变量<br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220314220229.png"><br>2，找到系统变量下的path<br>双击path，点击兴建，然后将python的安装路径添加进去，然后点击确定， 一直点确定，记得把最后一个系统属性的确定 也点击了，这样你添加的环境变量才会生效</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220314220554.png"></p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220314221015.png"><br>3.验证 是否安装成功</p><p><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220314221307.png"></p><hr><p><strong>寻找python安装路径：在电脑的文件夹中搜索pip.exe,打开搜索到的文件位置，将文件路径复制即可</strong><br><img src="https://plboss-imges.oss-cn-chengdu.aliyuncs.com/master/20220314223132.png"></p>]]></content>
    
    
    
    <tags>
      
      <tag>python</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>virtuebox</title>
    <link href="/2021/12/06/Virtuebox/"/>
    <url>/2021/12/06/Virtuebox/</url>
    
    <content type="html"><![CDATA[<h3 id="共享文件夹配置方法"><a href="#共享文件夹配置方法" class="headerlink" title="共享文件夹配置方法"></a>共享文件夹配置方法</h3><p><a href="https://blog.csdn.net/2004v2004/article/details/108102119">https://blog.csdn.net/2004v2004/article/details/108102119</a></p><h3 id="看不到上方工具栏"><a href="#看不到上方工具栏" class="headerlink" title="看不到上方工具栏"></a>看不到上方工具栏</h3><p>方法：ctrl+alt+c</p>]]></content>
    
    
    
    <tags>
      
      <tag>虚拟机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络安全学习路线</title>
    <link href="/2021/07/03/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/"/>
    <url>/2021/07/03/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%AD%A6%E4%B9%A0%E8%B7%AF%E7%BA%BF/</url>
    
    <content type="html"><![CDATA[<p>一：百思莫解之菜鸟篇<br> 对于刚接触网络安全的门外汉，无论是自学还是上课都有一个大前提，就是读大量的书，掌握安全基本知识。因为网络安全设计的知识面很广，术语多，理论知识多，需要我们投入时间和精力来学习，掌握网络安全的基本知识，安全的概念和定义，常见的安全标准等。<br> 推荐书：《CIW：安全专家全息教程》 《计算机系统安全》 《计算机网络安全导论》 《winsock网络编程经络》<br> 二：毛塞顿开小白篇<br>  掌握了必要的理论，就开始开展技能方面的学习了，具体的技能与之前的理论结合起来，你会有毛晒顿开的感觉，这部分的学习主要包括：解密与加密，协议层安全。<br>  解密与加密<br>  软件的加密与解密是一个的研究领域，他几乎可以与任意一种计算机技术紧密结合————密码学，程序设计语言，操作系统，数据结构哦。没有技术，任何网络安全都是一纸空谈，加密学的应用贯穿整个网络安全学习的过程中。<br>  先了解一下计算机的程序，高级语言编写的程序，会汇编成机器语言在CpU中执行，如VisualC++等。由于机器语言与汇编语言是一一对应，而汇编语言转化成汇编语言，这样个过程称之为反汇编。而汇编语言可能读性是比较好，这样就可分析程序流程，解析其功能了，这个过程称就是解密（俗称破解）。也就是说，解密的基础是建立在汇编语言级别上的，因此想涉足这一领域的朋友，汇编语言一定的学好。等汇编语言学好了，建议在掌握Win32编程。<br>  学习解密与加密是很累的，需要花费大量的时间，而且会经常碰壁，三天两天的毫无进展是极为平常的事情。除了勤奋加执着，没有背的秘诀和可言，但但掌握这方面可以通过跟踪软件，提高自己的调试技能，了解他人编程思路，写出更好的程序<br>  推荐书：《windows程序设计》 《Windows环境下32位汇编语言设计》 《密码学》 《密码工程实践指南》 《密码学引导》 《Window95系统程式设计大奥秘？ 《Windows高级编程指南》 《Windows200编程技术内幕》 《win32系统编程-Winows 2000应用程序开发指南》<br>  协议层安全<br>  协议层安全主要涉及和Tcp/ip分层模型有关的内容，包括常见协议的工作原理和特点，缺陷，保护或替代措施等等。系统学习TCP/IP反面的知识有很多原因。要适当的实施防火墙过滤，安全管理员必须对于TCp/ip的IP层和Tcp/udp层有很深的见解，黑客经常使用TCP/IP堆栈中的一部分或破坏网络安全等。所以你也必须清楚的了解这些内容。<br>  推荐书: 《Tcp/Ip详解 卷一：协议》 《用TCp/ip进行网络互联第一卷原理，协议与结构》<br>  三，驾轻就熟之高手篇<br>  掌握了以上基础知识和技能，你就不是在是网络安全小白了，下一阶段的学习会让你成为网络安全高手，队理论做到触类旁通，对技术做到亲车熟路。高手的技术修炼主要包括两部分：WIndows安全（攻击与防御）和UNix/Linx安全（攻击与防御）<br>  Windows安全（攻击与防御）<br>  因为微软的WIndows操作系统已被广泛应用，所以他们更容易成为攻击的目标</p><p>  对于Windows安全的学习，其实就是对Windows系统攻击与防御技术的学习。windows系统安全的学习内容将包括：用户和组，文件系统，策略，系统魔人值，审计以及操作系统本身漏洞的研究</p><p>参考书：《黑客攻防实战入门》 《黑客大曝光》 《狙击黑客》</p><p>Unix/Linunx安全（攻击与 防御》<br>随着Linux的市占有率越高，LInux系统，服务器也别部署的越来越广泛。Unix/Linux系统的安全问题也越来越凸显出来。作为一个网络安全工作这，LInux安全绝对占有网络安全一半的重要性，但是相对Windows系统，普通用户LInux系统的机会不多。<br>Unix/Linux系统本身的学习也是他们必须恶补的一课。</p><p>四 豁然开朗之达人篇<br>掌握了Windows安全和UNix/Linux安全，你一定迫不及待的像搞定防火墙技术和入侵监测系统（IdS).到了这个阶段，你就会发现网络安全非常的有趣，学习的过程就是满足好奇心的过程，而是完成这一部分的学习后，你就可以成为一名合格的网络安全工程师了。</p><p>防火墙技术<br>防火墙技术原是网络安全的中重要元素，是外网和内网进行通信时的一道屏障，一个屏障，一个哨岗。除了应该深刻理解防火墙技术的种类，工作原理之外，作为一个网络安全的管理人员应该熟悉各种常见防火墙的配置，维护。</p><p>至少应该了解以下防火墙的简单配置：<br>（1） 常见的各种个人防火墙的使用<br>（2） 基于Acl的包过滤防火墙配置（如基于Windows的IPSec配置，基于Cisco路由器的ACl配置等；<br>（3) 基于Linux操作洗系统的防火墙配置（ipchains/iptables）<br>（4） ISA配置<br>（5) CIsco PIX 配置<br>（6） check point 防火墙配置<br>（7）基于WIndows Unix，Cisco路由器的Vpn配置<br>推荐书：《网络安全与防火墙技术》 《Linux 防火墙》 《高级防火墙ISA Sever 2000》 《Cisco 访问表配置指南》 《check point NG 安全管理》<br>《虚拟网络Vpn精解》<br>入侵检测系统（IDS)<br>防火墙不能对所有应用层的数据包进行分析，也会成为网络安全通讯的瓶颈。即便是代理防火墙也不能检查所有应用层的数据包。。<br>入侵检是防火墙的合力补充，它通过收集，分析计算机系统，计算机网络介质的各种有用信息帮助系统管理员发现攻击并进行响应，可以说入侵检测是防火墙之后的第二道安全闸门，在不影响网络性能的情况下能对网络进行检测，从而提供对内部进行攻击，外部攻击和误操作的实时保护。</p><p>到了达人阶段，相信你已经跃跃欲试，想要凭借自己的所学做出点成绩了，但是，理论学习固然重要，但是还是要落实到实践，一个精通理论而不熟悉技巧和产品 的人不可能成为合格的网络安全工程师。</p><p>如果没有机会实践，比较好的方法是多分析成功案例。初入安全行业的工程师不会有太多的案例上手，弥补这块短板的方式就是研究别人成功案列，从案例分析中汲取技术，技能，掌握方案设计思路，熟悉相关产品，尽快提高在高压环境的下的现场解决问题的能力。<br> 另外，推荐两个网络安全和技术的网站：<br> <a href="http://freebuf.com/">http://freebuf.com</a>, <a href="https://pentesterlab.com.这里有最新的网络技术,咨迅,技术分享,也许还能在这里遇到志同道和的人./">https://pentesterlab.com.这里有最新的网络技术，咨迅，技术分享，也许还能在这里遇到志同道和的人。</a></p><p> 网络安全工程师作为技术和市场之间的最佳“纽带”，未来选择的职业很丰富。虽然网络安全工程师的工作及辛苦又难做，但恰恰最锻炼一个人的意志与能力。但如果能够坚持下来，成为白帽黑客指日可待。<br> 最后，当你学习网络安全式遇到瓶颈了该怎末办？借用@tombkeeperTK主教的一段话：<br> 从事任何方向的技术研究，不知道该干什么时，就问自己四个问题：<br> *这个方法最新进展是什么？都知道码？<br> *这个方向最著名的专家又那些？他们的研究都看过吗？<br> *这个方向上最著名的社区有哪些“精华帖都看过吗？<br> *这个方向上最重要，工具有哪些？文章都看过吗？工具都分析过吗？<br> 对于每个重事网络安全的人来说，庞大的网络都如何宇宙般浩瀚无垠，而作为这个联通世界的网络的包卫者，我们心存敬畏<br> 最后，一句话送给立志于网络安全领域的奋斗者们：Do not go gentle into that good night :面对浩瀚的宇宙，没有心里的爱和敬畏，我们就真的太渺小了</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>fox</title>
    <link href="/2021/07/02/fox/"/>
    <url>/2021/07/02/fox/</url>
    
    <content type="html"><![CDATA[<p>这是我的第一篇文章<br>当我在写这篇文章的时候就已经很高兴了，做这个博客真的很不容易，尽管网上教程很多，但当我实际操作时，就遇到了各种不一样的情况，然后又不得不上网搜索<br>然后在尝试，反复出错，和教程里的就不一样，所以就只有重新来过。经过反复摸索，终于搭建成功，也就是现在你们看到的样子。<br>创建这个博客后，我有了很多的想法，其实就一个中心——“不一样”<br>第一个不一样是，我的博客将不会出很多的教程(网上的教程一搜一大堆)，在以后的分享中，更多的将是我自己的生活心得和经验，可能也会出一点教程，但我最求的教程将会更多的追求细节，且力求简洁，在正真意义上解决看这篇文章的人的问题。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。<br>。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2021/07/02/hello-world/"/>
    <url>/2021/07/02/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
